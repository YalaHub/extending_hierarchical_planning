(ROOT
  (S
    (S
      (NP (DT These))
      (VP (VBP are)
        (VP (VBN obtained)
          (PP (IN by)
            (S
              (VP (VBG picking)
                (PRT (RP up))
                (NP
                  (NP (DT the) (NN item))
                  (SBAR
                    (WHNP (WDT that))
                    (S
                      (VP (VBZ drops)
                        (PP (IN after)
                          (S
                            (VP (VBG mining)
                              (NP (DT an) (NN ore))
                              (PP (IN with)
                                (NP
                                  (NP (DT a) (NN pickaxe))
                                  (PP (IN of)
                                    (NP (DT the) (JJ right) (NN material))))))))))))))))))
    (, ,)
    (CC or)
    (S
      (VP (VBG taking)
        (NP
          (NP (DT the) (NN item))
          (SBAR
            (WHNP (WDT that))
            (S
              (VP (VBZ gets)
                (VP (VBN created)
                  (PP (IN after)
                    (S
                      (VP (VBG smelting)
                        (NP (DT an) (NN ore))
                        (PP (IN by)
                          (S
                            (VP (VBG dragging)
                              (NP (DT the) (VBN finished) (NN product))
                              (PP (IN into)
                                (NP (PRP$ your) (NN inventory))))))))))))))))
    (. .)))

nsubjpass(obtained-3, These-1)
nsubjpass(taking-24, These-1)
auxpass(obtained-3, are-2)
agent(obtained-3, picking-5)
prt(picking-5, up-6)
det(item-8, the-7)
dobj(picking-5, item-8)
nsubj(drops-10, item-8)
rcmod(item-8, drops-10)
prepc_after(drops-10, mining-12)
det(ore-14, an-13)
dobj(mining-12, ore-14)
det(pickaxe-17, a-16)
prep_with(mining-12, pickaxe-17)
det(material-21, the-19)
amod(material-21, right-20)
prep_of(pickaxe-17, material-21)
conj_or(obtained-3, taking-24)
det(item-26, the-25)
dobj(taking-24, item-26)
nsubjpass(created-29, item-26)
auxpass(created-29, gets-28)
rcmod(item-26, created-29)
prepc_after(created-29, smelting-31)
det(ore-33, an-32)
dobj(smelting-31, ore-33)
prepc_by(smelting-31, dragging-35)
det(product-38, the-36)
amod(product-38, finished-37)
dobj(dragging-35, product-38)
poss(inventory-41, your-40)
prep_into(dragging-35, inventory-41)

(ROOT
  (S
    (NP (JJ Fishing) (NNS rods))
    (VP (VBP allow)
      (S
        (NP (DT the) (NN player))
        (VP (TO to)
          (VP
            (VP (VB go)
              (NP (NN fishing))
              (S
                (VP (TO to)
                  (VP (VB catch)
                    (NP
                      (NP (JJ several) (NNS types))
                      (PP (IN of)
                        (NP
                          (NP (NN fish))
                          (, ,)
                          (NP (NN treasure))
                          (, ,))))))))
            (CC and)
            (VP
              (VP (VB trash))
              (, ,)
              (CONJP (RB as) (RB well) (IN as))
              (VP (VB pull)
                (NP (NNS mobs)
                  (CC or)
                  (NNS players))
                (ADVP (RBR closer))))))))
    (. .)))

amod(rods-2, Fishing-1)
nsubj(allow-3, rods-2)
det(player-5, the-4)
nsubj(go-7, player-5)
nsubj(trash-19, player-5)
aux(go-7, to-6)
xcomp(allow-3, go-7)
dobj(go-7, fishing-8)
dobj(trash-19, fishing-8)
aux(catch-10, to-9)
xcomp(go-7, catch-10)
amod(types-12, several-11)
dobj(catch-10, types-12)
prep_of(types-12, fish-14)
appos(fish-14, treasure-16)
xcomp(allow-3, trash-19)
conj_and(go-7, trash-19)
conj_and(go-7, pull-24)
conj_and(trash-19, pull-24)
dobj(pull-24, mobs-25)
dobj(pull-24, players-27)
conj_or(mobs-25, players-27)
advmod(pull-24, closer-28)

(ROOT
  (S
    (PP (TO To)
      (NP (VBN smelt) (NN something)))
    (, ,)
    (NP
      (NP (DT an) (NN input) (NN material))
      (CC and)
      (NP (DT a) (NN fuel)))
    (VP (MD must)
      (VP (VB be)
        (VP (VBN loaded)
          (PP (IN into)
            (NP (DT the) (NN furnace))))))
    (. .)))

amod(something-3, smelt-2)
prep_to(loaded-13, something-3)
det(material-7, an-5)
nn(material-7, input-6)
nsubjpass(loaded-13, material-7)
det(fuel-10, a-9)
conj_and(material-7, fuel-10)
nsubjpass(loaded-13, fuel-10)
aux(loaded-13, must-11)
auxpass(loaded-13, be-12)
det(furnace-16, the-15)
prep_into(loaded-13, furnace-16)

(ROOT
  (S
    (SBAR
      (WHADVP (WRB When))
      (S
        (NP (DT the) (NN furnace))
        (VP (VBZ begins)
          (S
            (VP (TO to)
              (VP (VBN smelt)))))))
    (, ,)
    (S
      (NP (PRP it))
      (VP (MD will)
        (VP (VB consume)
          (NP
            (NP (CD one) (NN piece))
            (PP (IN of)
              (NP (NN fuel)))))))
    (CC and)
    (S
      (NP (DT the) (NN fire) (NN gauge))
      (VP (MD will)
        (VP (VB fill)
          (PRT (RP up)))))
    (. .)))

advmod(begins-4, When-1)
det(furnace-3, the-2)
nsubj(begins-4, furnace-3)
xsubj(smelt-6, furnace-3)
dep(consume-10, begins-4)
aux(smelt-6, to-5)
xcomp(begins-4, smelt-6)
nsubj(consume-10, it-8)
aux(consume-10, will-9)
num(piece-12, one-11)
dobj(consume-10, piece-12)
dobj(fill-20, piece-12)
prep_of(piece-12, fuel-14)
det(gauge-18, the-16)
nn(gauge-18, fire-17)
nsubj(fill-20, gauge-18)
aux(fill-20, will-19)
conj_and(consume-10, fill-20)
prt(fill-20, up-21)

(ROOT
  (S
    (SBAR (IN If)
      (S
        (NP (EX there))
        (VP (VBZ is)
          (NP
            (NP (DT no) (JJR more) (NN fuel))
            (VP (VBN left))))))
    (, ,)
    (S
      (NP (DT the) (NN furnace))
      (VP (MD will)
        (VP (VB be)
          (VP (VBN interrupted)))))
    (CC and)
    (S
      (NP (DT the) (NN item))
      (VP (MD will)
        (VP (VB be)
          (VP (VBN uncooked)))))
    (. .)))

mark(is-3, If-1)
expl(is-3, there-2)
advcl(interrupted-13, is-3)
det(fuel-6, no-4)
amod(fuel-6, more-5)
nsubj(is-3, fuel-6)
partmod(fuel-6, left-7)
det(furnace-10, the-9)
nsubjpass(interrupted-13, furnace-10)
aux(interrupted-13, will-11)
auxpass(interrupted-13, be-12)
det(item-16, the-15)
nsubjpass(uncooked-19, item-16)
aux(uncooked-19, will-17)
auxpass(uncooked-19, be-18)
conj_and(interrupted-13, uncooked-19)

(ROOT
  (S
    (SBAR (IN If)
      (S
        (NP (DT the) (NN furnace))
        (VP (VBZ runs)
          (PRT (RP out))
          (PP (IN of)
            (NP (NN fuel)))
          (SBAR (IN before)
            (S
              (NP (DT the) (NN arrow))
              (VP (VBZ is)
                (VP (VBN filled)
                  (PRT (RP up)))))))))
    (, ,)
    (S
      (ADVP (RB then))
      (NP (DT the) (NN input))
      (VP (MD will) (RB not)
        (VP (VB be)
          (VP (VBN smelted)))))
    (CC and)
    (S
      (NP (DT the) (NN process))
      (VP (MD will)
        (VP (VB rewind)
          (PP (IN at)
            (NP (JJ 2x) (NN speed))))))
    (. .)))

mark(runs-4, If-1)
det(furnace-3, the-2)
nsubj(runs-4, furnace-3)
advcl(smelted-21, runs-4)
prep_out_of(runs-4, fuel-7)
mark(filled-12, before-8)
det(arrow-10, the-9)
nsubjpass(filled-12, arrow-10)
auxpass(filled-12, is-11)
advcl(runs-4, filled-12)
prt(filled-12, up-13)
advmod(smelted-21, then-15)
det(input-17, the-16)
nsubjpass(smelted-21, input-17)
aux(smelted-21, will-18)
neg(smelted-21, not-19)
auxpass(smelted-21, be-20)
det(process-24, the-23)
nsubj(rewind-26, process-24)
aux(rewind-26, will-25)
conj_and(smelted-21, rewind-26)
amod(speed-29, 2x-28)
prep_at(rewind-26, speed-29)

(ROOT
  (S
    (SBAR (IN If)
      (S
        (NP (DT the) (NN player))
        (VP (VBZ sleeps)
          (PP (IN in)
            (NP (DT a) (NN bed)))
          (SBAR (IN while)
            (S
              (NP (DT a) (NN furnace))
              (VP (VBZ is)
                (VP (VBG smelting))))))))
    (, ,)
    (NP
      (NP (DT the) (NN furnace) (POS 's))
      (NN progress))
    (VP (MD will)
      (VP (VB be)
        (NP (DT the) (JJ same))
        (SBAR (RB as) (IN if)
          (S
            (S
              (NP (DT the) (NN bed))
              (VP (VBD had) (RB not)
                (VP (VBN been)
                  (VP (VBN used)))))
            (CC and)
            (S
              (NP (DT no) (JJ additional) (NN time))
              (VP (VBD had)
                (VP (VBN passed))))))))
    (. .)))

mark(sleeps-4, If-1)
det(player-3, the-2)
nsubj(sleeps-4, player-3)
advcl(same-21, sleeps-4)
det(bed-7, a-6)
prep_in(sleeps-4, bed-7)
mark(smelting-12, while-8)
det(furnace-10, a-9)
nsubj(smelting-12, furnace-10)
aux(smelting-12, is-11)
advcl(sleeps-4, smelting-12)
det(furnace-15, the-14)
poss(progress-17, furnace-15)
nsubj(same-21, progress-17)
aux(same-21, will-18)
cop(same-21, be-19)
det(same-21, the-20)
advmod(used-29, as-22)
dep(used-29, if-23)
det(bed-25, the-24)
nsubjpass(used-29, bed-25)
aux(used-29, had-26)
neg(used-29, not-27)
auxpass(used-29, been-28)
dep(same-21, used-29)
det(time-33, no-31)
amod(time-33, additional-32)
nsubj(passed-35, time-33)
aux(passed-35, had-34)
dep(same-21, passed-35)
conj_and(used-29, passed-35)

(ROOT
  (S
    (S
      (PP (IN For)
        (NP (JJR larger) (NNS jobs)))
      (, ,)
      (NP
        (NP (DT a) (JJ single) (NN lava) (NN bucket))
        (CC or)
        (NP
          (NP (DT a) (NN block))
          (PP (IN of)
            (NP (NN coal)))))
      (VP (MD can)
        (VP (VB burn)
          (NP (JJR more) (NNS items))
          (SBAR (IN than)
            (S
              (VP (MD will)
                (VP (VB fit)
                  (PP (IN in)
                    (NP (DT the) (NN furnace))))))))))
    (: --)
    (S
      (S
        (NP (DT both) (NN input)
          (CC and)
          (NN output))
        (VP (VBP are)
          (VP (VBN limited)
            (S
              (VP (TO to)
                (VP
                  (ADVP (DT a))
                  (VB stack)
                  (PP (IN of)
                    (NP (CD 64)))))))))
      (, ,)
      (CC but)
      (S
        (NP
          (NP (DT a) (NN block))
          (PP (IN of)
            (NP (NN coal))))
        (VP (VBZ burns)
          (NP (CD 80)))))
    (, ,)
    (CC and)
    (S
      (NP (NN lava))
      (VP (MD can)
        (VP (VB burn)
          (NP (CD 100)))))
    (. .)))

amod(jobs-3, larger-2)
prep_for(burn-15, jobs-3)
det(bucket-8, a-5)
amod(bucket-8, single-6)
nn(bucket-8, lava-7)
nsubj(burn-15, bucket-8)
det(block-11, a-10)
conj_or(bucket-8, block-11)
nsubj(burn-15, block-11)
prep_of(block-11, coal-13)
aux(burn-15, can-14)
amod(items-17, more-16)
dobj(burn-15, items-17)
mark(fit-20, than-18)
aux(fit-20, will-19)
advcl(burn-15, fit-20)
det(furnace-23, the-22)
prep_in(fit-20, furnace-23)
preconj(input-26, both-25)
nsubjpass(limited-30, input-26)
xsubj(stack-33, input-26)
conj_and(input-26, output-28)
nsubjpass(limited-30, output-28)
xsubj(stack-33, output-28)
auxpass(limited-30, are-29)
parataxis(burn-15, limited-30)
aux(stack-33, to-31)
advmod(stack-33, a-32)
xcomp(limited-30, stack-33)
prep_of(stack-33, 64-35)
det(block-39, a-38)
nsubj(burns-42, block-39)
prep_of(block-39, coal-41)
parataxis(burn-15, burns-42)
conj_but(limited-30, burns-42)
dobj(burns-42, 80-43)
nsubj(burn-48, lava-46)
aux(burn-48, can-47)
conj_and(burn-15, burn-48)
dobj(burn-48, 100-49)

(ROOT
  (S
    (NP
      (NP (NN Burning) (NN wood))
      (PP (IN with)
        (NP (NN wood) (NNS planks)))
      (S
        (VP (TO to)
          (VP (VB make)
            (ADJP (JJ charcoal))))))
    (VP (VBZ is)
      (ADVP (IN over)
        (NP (CD 5) (NNS times)))
      (ADJP (RBR more) (JJ efficient)
        (PP (IN than)
          (S
            (VP (VBG using)
              (NP
                (NP
                  (NP (DT the) (NN wood))
                  (NP (PRP itself)))
                (PP (IN as)
                  (NP (NN fuel)))))))))
    (. .)))

nn(wood-2, Burning-1)
nsubj(efficient-14, wood-2)
nn(planks-5, wood-4)
prep_with(wood-2, planks-5)
aux(make-7, to-6)
infmod(wood-2, make-7)
acomp(make-7, charcoal-8)
cop(efficient-14, is-9)
advmod(efficient-14, over-10)
num(times-12, 5-11)
dep(over-10, times-12)
advmod(efficient-14, more-13)
prepc_than(efficient-14, using-16)
det(wood-18, the-17)
dobj(using-16, wood-18)
dep(wood-18, itself-19)
prep_as(wood-18, fuel-21)

(ROOT
  (S
    (NP
      (NP (DT All) (NN ore) (NNS blocks))
      (PP (IN except)
        (NP (NN iron)
          (CC and)
          (NN gold))))
    (VP (VBP require)
      (NP (DT a) (NNP Silk) (NNP Touch) (NN pickaxe)
        (S
          (VP (TO to)
            (VP (VB drop)
              (NP (PRP themselves)))))))
    (. .)))

det(blocks-3, All-1)
nn(blocks-3, ore-2)
nsubj(require-8, blocks-3)
prep_except(blocks-3, iron-5)
prep_except(blocks-3, gold-7)
conj_and(iron-5, gold-7)
det(pickaxe-12, a-9)
nn(pickaxe-12, Silk-10)
nn(pickaxe-12, Touch-11)
dobj(require-8, pickaxe-12)
aux(drop-14, to-13)
infmod(pickaxe-12, drop-14)
dobj(drop-14, themselves-15)

(ROOT
  (S
    (VP (VBD Create)
      (NP
        (NP (DT a) (NN stone) (NN axe))
        (, ,)
        (NP (NN stone) (NN sword))
        (, ,)
        (CC and)
        (NP (NN stone) (NN pickaxe))))
    (. .)))

det(axe-4, a-2)
nn(axe-4, stone-3)
dobj(Create-1, axe-4)
nn(sword-7, stone-6)
dobj(Create-1, sword-7)
conj_and(axe-4, sword-7)
nn(pickaxe-11, stone-10)
dobj(Create-1, pickaxe-11)
conj_and(axe-4, pickaxe-11)

(ROOT
  (S
    (ADVP (RB Now))
    (PRN
      (S
        (VP (VB craft)
          (NP (DT a) (NN furnace))
          (S
            (VP (TO to)
              (VP (VB cook)
                (NP (NN meat))
                (PP (IN for)
                  (NP
                    (ADJP (NN food)
                      (CC and)
                      (VBN smelt))
                    (DT any) (NN iron)))))))))
    (NP (PRP you))
    (VP (VBP find)
      (PP (IN in)
        (NP (PRP$ your) (NNS travels))))
    (. .)))

advmod(find-15, Now-1)
parataxis(find-15, craft-2)
det(furnace-4, a-3)
dobj(craft-2, furnace-4)
aux(cook-6, to-5)
xcomp(craft-2, cook-6)
dobj(cook-6, meat-7)
amod(iron-13, food-9)
conj_and(food-9, smelt-11)
amod(iron-13, smelt-11)
det(iron-13, any-12)
prep_for(cook-6, iron-13)
nsubj(find-15, you-14)
poss(travels-18, your-17)
prep_in(find-15, travels-18)

(ROOT
  (S
    (VP (VB Save)
      (NP
        (NP
          (QP (IN around) (CD five))
          (NNS blocks))
        (PP (IN of)
          (NP (NN wood))))
      (PP (IN in)
        (NP (NN case)))
      (SBAR
        (S
          (NP (PRP you))
          (VP (VBP have)
            (ADVP (RB n't))
            (VP
              (VP (VBN found)
                (NP (DT any) (NN coal))
                (ADVP (RB yet)))
              (, ,)
              (CC and)
              (VP (VBN smelt)
                (S
                  (NP (PRP them))
                  (VP (TO to)
                    (VP (VB create)
                      (ADJP (JJ charcoal)))))))))))
    (. .)))

quantmod(five-3, around-2)
num(blocks-4, five-3)
dobj(Save-1, blocks-4)
prep_of(blocks-4, wood-6)
prep_in(Save-1, case-8)
nsubj(found-12, you-9)
nsubj(smelt-18, you-9)
aux(found-12, have-10)
neg(found-12, n't-11)
dep(Save-1, found-12)
det(coal-14, any-13)
dobj(found-12, coal-14)
dobj(smelt-18, coal-14)
advmod(found-12, yet-15)
dep(Save-1, smelt-18)
conj_and(found-12, smelt-18)
nsubj(create-21, them-19)
aux(create-21, to-20)
xcomp(smelt-18, create-21)
acomp(create-21, charcoal-22)

(ROOT
  (S
    (NP (DT The) (NNS torches))
    (VP (VBP are)
      (ADJP (JJ easy))
      (SBAR (IN though) (, ,)
        (S
          (NP (PRP you))
          (ADVP (RB just))
          (VP (VBP need)
            (S
              (VP (TO to)
                (VP (VB craft)
                  (ADJP (JJ charcoal\/coal))
                  (PP (IN on)
                    (NP
                      (NP (NN top))
                      (PP (IN of)
                        (NP (DT a) (NN stick))))))))))))
    (. .)))

det(torches-2, The-1)
nsubj(easy-4, torches-2)
cop(easy-4, are-3)
mark(need-9, though-5)
nsubj(need-9, you-7)
xsubj(craft-11, you-7)
advmod(need-9, just-8)
advcl(easy-4, need-9)
aux(craft-11, to-10)
xcomp(need-9, craft-11)
acomp(craft-11, charcoal\/coal-12)
det(stick-17, a-16)
prep_on_top_of(craft-11, stick-17)

(ROOT
  (S
    (PP (IN After)
      (S
        (VP (VBG marking)
          (NP (PRP$ your)))))
    (S
      (VP
        (VP (VB spawn)
          (NP (NN point)))
        (, ,)
        (VP (VB head)
          (PP (IN for)
            (NP (JJ high) (NN ground))))
        (CC and)
        (VP (VB look)
          (PRT (RP around))
          (PP (IN for)
            (NP
              (NP (JJ green) (NN grass))
              (CC and\/or)
              (NP
                (NP (NNS trees))
                (-LRB- -LRB-)
                (NP
                  (NP (NNS cacti))
                  (CC and)
                  (NP (NN sugar) (NN cane)))))))))
    (VP (VBP do) (RB n't)
      (VP (VB count)))
    (. .)))

prepc_after(count-26, marking-2)
dobj(marking-2, your-3)
csubj(count-26, spawn-4)
dobj(spawn-4, point-5)
dobj(head-7, point-5)
dobj(look-12, point-5)
conj_and(spawn-4, head-7)
csubj(count-26, head-7)
amod(ground-10, high-9)
prep_for(head-7, ground-10)
conj_and(spawn-4, look-12)
csubj(count-26, look-12)
prt(look-12, around-13)
amod(grass-16, green-15)
prep_for(look-12, grass-16)
prep_for(look-12, trees-18)
conj_and\/or(grass-16, trees-18)
dep(trees-18, cacti-20)
nn(cane-23, sugar-22)
dep(trees-18, cane-23)
conj_and(cacti-20, cane-23)
aux(count-26, do-24)
neg(count-26, n't-25)

(ROOT
  (S
    (ADVP (RB However))
    (, ,)
    (NP
      (NP (CD one) (NN thing))
      (SBAR
        (S
          (NP (DT the) (NN mushroom) (NN biome))
          (VP (VBZ does) (RB not)
            (VP (VB have)))
          (, ,))))
    (VP (VBZ is)
      (NP (NN wood))
      (: --)
      (SBAR (RB so) (IN before)
        (S
          (NP (PRP you))
          (VP (VBP go)
            (ADVP (RB there))
            (, ,)
            (SBAR
              (S
                (NP
                  (NP (NN head))
                  (PP (IN for)
                    (NP (DT a) (JJ grassy) (NN area))))
                (VP (TO to)
                  (VP (VB get)
                    (NP (DT some) (NN wood)
                      (CC and)
                      (NN stone))
                    (ADVP (RB first))))))))))
    (. .)))

advmod(wood-13, However-1)
num(thing-4, one-3)
nsubj(wood-13, thing-4)
det(biome-7, the-5)
nn(biome-7, mushroom-6)
nsubj(have-10, biome-7)
aux(have-10, does-8)
neg(have-10, not-9)
rcmod(thing-4, have-10)
cop(wood-13, is-12)
advmod(go-18, so-15)
dep(go-18, before-16)
nsubj(go-18, you-17)
parataxis(wood-13, go-18)
advmod(go-18, there-19)
nsubj(get-27, head-21)
det(area-25, a-23)
amod(area-25, grassy-24)
prep_for(head-21, area-25)
aux(get-27, to-26)
ccomp(go-18, get-27)
xcomp(go-18, get-27)
det(wood-29, some-28)
dobj(get-27, wood-29)
dobj(get-27, stone-31)
conj_and(wood-29, stone-31)
advmod(get-27, first-32)

(ROOT
  (S
    (S
      (NP (DT This))
      (VP (VBZ is)
        (NP (DT a) (JJ good) (NN place)
          (S
            (VP (TO to)
              (VP (VB live)
                (PP (IN in)
                  (ADJP (JJ general)))))))))
    (, ,)
    (S
      (SBAR (IN if)
        (S
          (S
            (NP (PRP you))
            (VP (MD can)
              (VP (VB make)
                (NP (DT a) (NN bed)))))
          (: :)
          (S
            (NP (DT the) (NNS farms))
            (VP (MD will)
              (VP (VB solve)
                (NP (PRP$ your) (NN food) (NNS worries))
                (PP (IN for)
                  (ADVP (RB now))))))))
      (, ,)
      (NP (PRP you))
      (VP (MD can)
        (VP (VB trade)
          (PP (IN with)
            (NP (DT the) (NNS villagers))))))
    (, ,)
    (CC and)
    (S
      (SBAR (IN if)
        (S
          (NP (EX there))
          (VP (VBZ 's)
            (NP
              (NP (DT a) (NN blacksmith))
              (PRN (-LRB- -LRB-)
                (SQ
                  (VP (VB look)
                    (PP (IN for)
                      (NP
                        (NP (DT a) (NN house))
                        (PP (IN with)
                          (NP (DT a) (NN stone) (NN slab) (NN roof)))))))
                (-RRB- -RRB-))))))
      (, ,)
      (NP (PRP it))
      (VP (MD will)
        (VP (VB contain)
          (NP (DT a) (NN chest))
          (PP (IN with)
            (NP (NN bonus) (NNS items))))))
    (. .)))

nsubj(place-5, This-1)
cop(place-5, is-2)
det(place-5, a-3)
amod(place-5, good-4)
aux(live-7, to-6)
infmod(place-5, live-7)
prep_in(live-7, general-9)
mark(make-14, if-11)
nsubj(make-14, you-12)
aux(make-14, can-13)
advcl(trade-30, make-14)
det(bed-16, a-15)
dobj(make-14, bed-16)
det(farms-19, the-18)
nsubj(solve-21, farms-19)
aux(solve-21, will-20)
parataxis(make-14, solve-21)
poss(worries-24, your-22)
nn(worries-24, food-23)
dobj(solve-21, worries-24)
prep(solve-21, for-25)
dep(for-25, now-26)
nsubj(trade-30, you-28)
aux(trade-30, can-29)
ccomp(place-5, trade-30)
conj_and(place-5, trade-30)
det(villagers-33, the-32)
prep_with(trade-30, villagers-33)
mark('s-38, if-36)
expl('s-38, there-37)
advcl(contain-55, 's-38)
det(blacksmith-40, a-39)
nsubj('s-38, blacksmith-40)
dep(-LRB--41, look-42)
det(house-45, a-44)
prep_for(look-42, house-45)
det(roof-50, a-47)
nn(roof-50, stone-48)
nn(roof-50, slab-49)
prep_with(house-45, roof-50)
nsubj(contain-55, it-53)
aux(contain-55, will-54)
conj_and(place-5, contain-55)
det(chest-57, a-56)
dobj(contain-55, chest-57)
nn(items-60, bonus-59)
prep_with(contain-55, items-60)

(ROOT
  (S
    (SBAR (IN If)
      (S
        (NP (EX there))
        (VP (VBP are)
          (NP (DT no) (NN sheep))
          (ADVP (RB around)))))
    (, ,)
    (S
      (VP (VB look)
        (PP (IN for)
          (NP (`` ``)
            (NP (NN lamp) (NNS posts))
            ('' '')
            (PP (IN in)
              (NP
                (NP (DT the) (NN village))
                (: --)
                (NP (DT the) (JJ black) (NN block))))))
        (PP (IN on)
          (NP (NN top)))))
    (VP (VBZ is)
      (NP
        (NP (NN wool))
        (PRN (-LRB- -LRB-)
          (SQ
            (VP (VB break)
              (NP (PRP it))
              (PP (IN with)
                (NP (PRP$ your) (NN hand)))))
          (-RRB- -RRB-))))
    (. .)))

mark(are-3, If-1)
expl(are-3, there-2)
advcl(is-23, are-3)
det(sheep-5, no-4)
nsubj(are-3, sheep-5)
advmod(are-3, around-6)
csubj(is-23, look-8)
nn(posts-12, lamp-11)
prep_for(look-8, posts-12)
det(village-16, the-15)
prep_in(posts-12, village-16)
det(block-20, the-18)
amod(block-20, black-19)
dep(village-16, block-20)
prep_on(look-8, top-22)
attr(is-23, wool-24)
dep(-LRB--25, break-26)
dobj(break-26, it-27)
poss(hand-30, your-29)
prep_with(break-26, hand-30)

(ROOT
  (S
    (VP
      (VP (VB Look)
        (PRT (RP around))
        (PP (IN for)
          (NP
            (NP (DT a) (JJ few) (NNS things))
            (PP (IN in)
              (NP (JJ particular))))))
      (, ,)
      (PP (IN in)
        (NP
          (NP
            (NP (NN order))
            (PP (IN of)
              (NP (NN priority))))
          (PRN (: :)
            (NP
              (NP (NNS trees))
              (, ,)
              (NP
                (NP (JJ visible) (NN stone))
                (-LRB- -LRB-)
                (CC and)
                (NP
                  (NP (RB especially) (NN coal) (NN ore))
                  (, ,)
                  (SBAR
                    (WHNP (WDT which))
                    (S
                      (VP (VBZ looks)
                        (PP (IN like)
                          (NP
                            (NP (NN stone))
                            (PP (IN with)
                              (NP (JJ black) (NNS spots)))))
                        (PP (IN on)
                          (NP (PRP it)))
                        (-RRB- -RRB-))))))
              (, ,)
              (NP (NNS animals))
              (, ,)
              (CC and)
              (NP (JJ tall) (NN grass)))))))
    (. .)))

prt(Look-1, around-2)
det(things-6, a-4)
amod(things-6, few-5)
prep_for(Look-1, things-6)
prep_in(things-6, particular-8)
prep_in(Look-1, order-11)
prep_of(order-11, priority-13)
dep(order-11, trees-15)
amod(stone-18, visible-17)
dep(order-11, stone-18)
conj_and(trees-15, stone-18)
advmod(ore-23, especially-21)
nn(ore-23, coal-22)
conj_and(trees-15, ore-23)
conj_and(stone-18, ore-23)
nsubj(looks-26, ore-23)
rcmod(ore-23, looks-26)
prep_like(looks-26, stone-28)
amod(spots-31, black-30)
prep_with(stone-28, spots-31)
prep_on(looks-26, it-33)
dep(order-11, animals-36)
conj_and(trees-15, animals-36)
amod(grass-40, tall-39)
dep(order-11, grass-40)
conj_and(trees-15, grass-40)

(ROOT
  (S
    (NP (PRP$ Your) (JJ first) (NN priority))
    (VP (VBZ is)
      (S
        (VP (TO to)
          (VP
            (VP (VB find)
              (NP (DT a) (JJ small) (NN tree)))
            (, ,)
            (VP (VB bash)
              (PP (IN through)
                (NP (DT the) (NNS leaves)))
              (SBAR (IN if)
                (S
                  (VP (VBN needed)))))
            (, ,)
            (CC and)
            (VP (`` ``) (VB punch) ('' '')
              (NP (DT the) (NN wood))))))
      (SBAR (IN until)
        (S
          (NP (DT each) (NN block))
          (VP (VBZ drops)
            (PP (IN as)
              (NP (DT an) (NN item)))))))
    (. .)))

poss(priority-3, Your-1)
amod(priority-3, first-2)
nsubj(is-4, priority-3)
xsubj(find-6, priority-3)
aux(find-6, to-5)
xcomp(is-4, find-6)
det(tree-9, a-7)
amod(tree-9, small-8)
dobj(find-6, tree-9)
dobj(bash-11, tree-9)
xcomp(is-4, bash-11)
conj_and(find-6, bash-11)
det(leaves-14, the-13)
prep_through(bash-11, leaves-14)
mark(needed-16, if-15)
advcl(bash-11, needed-16)
xcomp(is-4, punch-20)
conj_and(find-6, punch-20)
det(wood-23, the-22)
dobj(punch-20, wood-23)
mark(drops-27, until-24)
det(block-26, each-25)
nsubj(drops-27, block-26)
advcl(is-4, drops-27)
det(item-30, an-29)
prep_as(drops-27, item-30)

(ROOT
  (S
    (NP (PRP You))
    (VP (MD 'll)
      (VP (VB punch)
        (NP (JJR more) (NN wood))
        (PP (IN in)
          (NP (DT a) (NN moment)))))
    (. !)))

nsubj(punch-3, You-1)
aux(punch-3, 'll-2)
amod(wood-5, more-4)
dobj(punch-3, wood-5)
det(moment-8, a-7)
prep_in(punch-3, moment-8)

(ROOT
  (S
    (NP (NNP Wood))
    (VP (VBZ is)
      (ADJP (JJ essential)
        (PP (IN for)
          (NP
            (NP (NNS tools))
            (CC and)
            (NP
              (NP (JJ useful) (NNS items))
              (PP (JJ such) (IN as)
                (NP
                  (NP (NNS torches))
                  (, ,)
                  (NP (NNS doors))
                  (, ,)
                  (NP (NNS fences))
                  (, ,)
                  (CC and)
                  (NP (NNS chests)))))))))
    (. .)))

nsubj(essential-3, Wood-1)
cop(essential-3, is-2)
prep_for(essential-3, tools-5)
amod(items-8, useful-7)
prep_for(essential-3, items-8)
conj_and(tools-5, items-8)
prep_such_as(items-8, torches-11)
prep_such_as(items-8, doors-13)
conj_and(torches-11, doors-13)
prep_such_as(items-8, fences-15)
conj_and(torches-11, fences-15)
prep_such_as(items-8, chests-18)
conj_and(torches-11, chests-18)

(ROOT
  (S
    (NP (DT The) (NNS planks))
    (VP (MD will)
      (VP (VB be)
        (NP (JJ different) (NNS colors))
        (PP (VBG depending)
          (PP (IN on)
            (SBAR
              (WHNP (WP what))
              (S
                (NP
                  (NP (NN sort))
                  (PP (IN of)
                    (NP (NN wood))))
                (NP (PRP you))
                (VP (VBP have))))))))
    (. .)))

det(planks-2, The-1)
nsubj(colors-6, planks-2)
aux(colors-6, will-3)
cop(colors-6, be-4)
amod(colors-6, different-5)
dobj(have-14, what-9)
nsubj(have-14, sort-10)
prep_of(sort-10, wood-12)
nsubj(have-14, you-13)
prepc_depending_on(colors-6, have-14)

(ROOT
  (S
    (PP (IN In)
      (ADJP (JJ particular)))
    (, ,)
    (NP (NNS sticks))
    (VP (VBP do) (RB n't)
      (VP (`` ``) (VB remember) ('' '')
        (NP
          (SBAR
            (WHNP (WP what))
            (S
              (NP
                (NP (NN sort))
                (PP (IN of)
                  (NP (NN wood))))
              (NP (PRP they))
              (VP (VBD came)
                (PP (IN from))))))))
    (. .)))

prep_in(remember-8, particular-2)
nsubj(remember-8, sticks-4)
aux(remember-8, do-5)
neg(remember-8, n't-6)
rel(came-15, what-10)
nsubj(came-15, sort-11)
prep_of(sort-11, wood-13)
nsubj(came-15, they-14)
dobj(remember-8, came-15)
prep(came-15, from-16)

(ROOT
  (S
    (NP
      (NP (NN n) (NN order))
      (SBAR
        (S
          (VP (TO to)
            (VP (VB collect)
              (NP
                (NP
                  (NP (NN stone)
                    (CC and)
                    (NN coal))
                  (, ,)
                  (NP (DT the) (JJ next) (NN staple)))
                (NNS resources)))))))
    (, ,)
    (NP (PRP you))
    (VP (MD will)
      (VP (VB need)
        (NP (DT a) (NN pickaxe))))
    (. .)))

nn(order-2, n-1)
nsubj(need-16, order-2)
aux(collect-4, to-3)
infmod(order-2, collect-4)
nn(resources-12, stone-5)
conj_and(stone-5, coal-7)
nn(resources-12, coal-7)
det(staple-11, the-9)
amod(staple-11, next-10)
appos(stone-5, staple-11)
dobj(collect-4, resources-12)
nsubj(need-16, you-14)
aux(need-16, will-15)
det(pickaxe-18, a-17)
dobj(need-16, pickaxe-18)

(ROOT
  (S
    (S
      (NP (PRP$ Your) (JJ first) (NN pickaxe))
      (VP (MD will)
        (VP (VB be)
          (VP (VBN made)
            (PP (IN of)
              (NP
                (NP (NN wood))
                (, ,)
                (SBAR
                  (WHNP (WDT which))
                  (S
                    (VP (VBZ is) (RB n't)
                      (ADJP (RB very) (JJ durable)
                        (CC or)
                        (JJ fast)))))))))))
    (, ,)
    (CC but)
    (S
      (SBAR (IN until)
        (S
          (NP (PRP you))
          (VP (VBP collect)
            (NP (DT some) (NN cobblestone)))))
      (NP (PRP it))
      (VP (VBZ 's)
        (SBAR (DT all)
          (S
            (NP (PRP you))
            (VP (VBP have))))))
    (. .)))

poss(pickaxe-3, Your-1)
amod(pickaxe-3, first-2)
nsubjpass(made-6, pickaxe-3)
aux(made-6, will-4)
auxpass(made-6, be-5)
prep_of(made-6, wood-8)
nsubj(durable-14, wood-8)
nsubj(fast-16, wood-8)
cop(durable-14, is-11)
neg(durable-14, n't-12)
advmod(durable-14, very-13)
rcmod(wood-8, durable-14)
rcmod(wood-8, fast-16)
conj_or(durable-14, fast-16)
mark(collect-21, until-19)
nsubj(collect-21, you-20)
advcl('s-25, collect-21)
det(cobblestone-23, some-22)
dobj(collect-21, cobblestone-23)
nsubj('s-25, it-24)
conj_but(made-6, 's-25)
dep(have-28, all-26)
nsubj(have-28, you-27)
ccomp('s-25, have-28)

(ROOT
  (S
    (S
      (ADVP (RB Now))
      (NP (PRP you))
      (VP (MD 'll)
        (VP (VB use)
          (NP (DT some) (NNS planks)))))
    (CC and)
    (S
      (NP (DT the))
      (VP (VBZ sticks)
        (S
          (NP (PRP you))
          (ADVP (RB just))
          (VP (VBN made)
            (S
              (VP (TO to)
                (VP (VB create)
                  (NP (DT the) (JJ final) (NN product)))))))))
    (. .)))

advmod(use-4, Now-1)
nsubj(use-4, you-2)
aux(use-4, 'll-3)
det(planks-6, some-5)
dobj(use-4, planks-6)
dobj(sticks-9, planks-6)
nsubj(sticks-9, the-8)
conj_and(use-4, sticks-9)
nsubj(made-12, you-10)
xsubj(create-14, you-10)
advmod(made-12, just-11)
ccomp(sticks-9, made-12)
aux(create-14, to-13)
xcomp(made-12, create-14)
det(product-17, the-15)
amod(product-17, final-16)
dobj(create-14, product-17)

(ROOT
  (S
    (SBAR (IN If)
      (S
        (NP (PRP you))
        (VP (VBP do) (RB n't)
          (VP
            (VP (VB see)
              (NP (DT any))
              (PP (IN on)
                (NP (DT the) (NN surface))))
            (, ,)
            (VP (VB dig)
              (PRT (RP down))
              (PP (IN in)
                (NP
                  (NP (DT a) (JJ staircase) (NN fashion)
                    (CC and)
                    (NN mine))
                  (NP (DT the) (NN stone))))
              (PP (IN with)
                (NP (PRP$ your) (NN pickaxe))))))))
    (: ;)
    (NP (PRP it))
    (VP (MD will)
      (VP (VB drop)
        (PP (IN as)
          (NP (JJ cobblestone) (NNS items)))))
    (. .)))

mark(see-5, If-1)
nsubj(see-5, you-2)
aux(see-5, do-3)
neg(see-5, n't-4)
advcl(drop-27, see-5)
dobj(see-5, any-6)
det(surface-9, the-8)
prep_on(see-5, surface-9)
dep(see-5, dig-11)
prt(dig-11, down-12)
det(fashion-16, a-14)
amod(fashion-16, staircase-15)
prep_in(dig-11, fashion-16)
prep_in(dig-11, mine-18)
conj_and(fashion-16, mine-18)
det(stone-20, the-19)
dep(fashion-16, stone-20)
poss(pickaxe-23, your-22)
prep_with(dig-11, pickaxe-23)
nsubj(drop-27, it-25)
aux(drop-27, will-26)
amod(items-30, cobblestone-29)
prep_as(drop-27, items-30)

(ROOT
  (S
    (S
      (VP (VB Gather) (RB enough)
        (VP (VB cobblestone)
          (S
            (VP (TO to)
              (VP
                (VP (VB upgrade)
                  (NP (PRP$ your) (NN pickaxe)))
                (CC and)
                (VP (VB make)
                  (NP (DT a) (NN stone) (NN shovel)))))))))
    (, ,)
    (NP
      (NP
        (NP (NN axe))
        (, ,)
        (CC and)
        (NP (NN sword))
        (, ,))
      (CC and)
      (NP
        (NP (DT a) (NN furnace))
        (-LRB- -LRB-)
        (NP
          (NP (DT the) (JJ exact) (NN number))
          (PP (IN of)
            (NP
              (NP (NN cobblestone))
              (VP (VBN required)
                (S
                  (VP (TO to)
                    (VP (VB make)
                      (NP (DT these)))))))))))
    (VP (VBZ is)
      (NP (CD 17)))
    (. .) (-RRB- -RRB-)))

ccomp(17-33, Gather-1)
advmod(Gather-1, enough-2)
dep(Gather-1, cobblestone-3)
aux(upgrade-5, to-4)
xcomp(cobblestone-3, upgrade-5)
poss(pickaxe-7, your-6)
dobj(upgrade-5, pickaxe-7)
xcomp(cobblestone-3, make-9)
conj_and(upgrade-5, make-9)
det(shovel-12, a-10)
nn(shovel-12, stone-11)
dobj(make-9, shovel-12)
nsubj(17-33, axe-14)
conj_and(axe-14, sword-17)
nsubj(17-33, sword-17)
det(furnace-21, a-20)
conj_and(axe-14, furnace-21)
nsubj(17-33, furnace-21)
det(number-25, the-23)
amod(number-25, exact-24)
dep(furnace-21, number-25)
prep_of(number-25, cobblestone-27)
xsubj(make-30, cobblestone-27)
partmod(cobblestone-27, required-28)
aux(make-30, to-29)
xcomp(required-28, make-30)
dobj(make-30, these-31)
cop(17-33, is-32)

(ROOT
  (S
    (S
      (NP (PRP You))
      (VP (MD can) (RB also)
        (VP (VB craft)
          (NP
            (NP (DT a) (NN stone) (NN hoe))
            (PRN (-LRB- -LRB-)
              (CC or)
              (RB even)
              (NP (DT a) (JJ wooden) (NN one))
              (-RRB- -RRB-))))))
    (, ,)
    (CC but)
    (S
      (NP (PRP it))
      (VP (MD wo) (RB n't)
        (VP (VB be)
          (ADJP (JJ useful))
          (SBAR (IN until)
            (S
              (NP (PRP you))
              (VP (VBP start)
                (NP
                  (NP (NNS farms))
                  (PRN (-LRB- -LRB-)
                    (VP (VBN explained)
                      (PP (IN on)
                        (NP (NN day) (CD two))))
                    (-RRB- -RRB-)))))))))
    (. .)))

nsubj(craft-4, You-1)
aux(craft-4, can-2)
advmod(craft-4, also-3)
det(hoe-7, a-5)
nn(hoe-7, stone-6)
dobj(craft-4, hoe-7)
dep(one-13, or-9)
dep(one-13, even-10)
det(one-13, a-11)
amod(one-13, wooden-12)
appos(hoe-7, one-13)
nsubj(useful-21, it-17)
aux(useful-21, wo-18)
neg(useful-21, n't-19)
cop(useful-21, be-20)
conj_but(craft-4, useful-21)
mark(start-24, until-22)
nsubj(start-24, you-23)
advcl(useful-21, start-24)
dobj(start-24, farms-25)
dep(farms-25, explained-27)
prep_on(explained-27, day-29)
num(day-29, two-30)

(ROOT
  (S
    (S
      (S
        (NP (DT A) (NN stone) (NN pickaxe))
        (VP (VBZ is)
          (ADJP
            (ADJP (RBR more) (JJ durable))
            (CC and)
            (ADJP (RBR more) (JJ efficient)
              (PP (IN than)
                (NP (DT a) (JJ wooden) (NN pickaxe)))))))
      (, ,)
      (CC and)
      (S
        (NP (PRP it))
        (VP (MD can))))
    (NP (PRP mine))
    (VP (VBZ ores)
      (SBAR (IN that)
        (S
          (NP (DT a) (JJ wooden) (NN pickaxe))
          (VP (MD ca) (RB n't)))))
    (. .)))

det(pickaxe-3, A-1)
nn(pickaxe-3, stone-2)
nsubj(durable-6, pickaxe-3)
nsubj(efficient-9, pickaxe-3)
cop(durable-6, is-4)
advmod(durable-6, more-5)
dep(ores-19, durable-6)
advmod(efficient-9, more-8)
conj_and(durable-6, efficient-9)
dep(ores-19, efficient-9)
det(pickaxe-13, a-11)
amod(pickaxe-13, wooden-12)
prep_than(efficient-9, pickaxe-13)
nsubj(can-17, it-16)
conj_and(durable-6, can-17)
dep(ores-19, can-17)
nsubj(ores-19, mine-18)
complm(ca-24, that-20)
det(pickaxe-23, a-21)
amod(pickaxe-23, wooden-22)
nsubj(ca-24, pickaxe-23)
ccomp(ores-19, ca-24)
neg(ca-24, n't-25)

(ROOT
  (S
    (ADVP (RB Now))
    (, ,)
    (NP (PRP you))
    (VP (MD should)
      (VP (VB gather)
        (NP (JJR more) (NN wood))
        (, ,)
        (S
          (VP (VBG using)
            (NP (PRP$ your) (JJ new) (NN stone) (NN axe))))))
    (. .)))

advmod(gather-5, Now-1)
nsubj(gather-5, you-3)
aux(gather-5, should-4)
amod(wood-7, more-6)
dobj(gather-5, wood-7)
xcomp(gather-5, using-9)
poss(axe-13, your-10)
amod(axe-13, new-11)
nn(axe-13, stone-12)
dobj(using-9, axe-13)

(ROOT
  (S
    (SBAR (IN If)
      (S
        (NP (PRP you))
        (VP (VBP happen)
          (PP (IN across)
            (NP
              (NP (DT a) (JJ coal-like) (NN ore))
              (PP (IN with)
                (NP
                  (NP (NN tan) (NNS specks))
                  (PP (IN in)
                    (NP
                      (NP (NN place))
                      (PP (IN of)
                        (NP (DT the) (JJ black))))))))))))
    (, ,)
    (NP (PRP you))
    (VP (VBP have)
      (VP (VBN found)
        (NP (DT some) (NN iron))))
    (. .)))

mark(happen-3, If-1)
nsubj(happen-3, you-2)
advcl(found-19, happen-3)
det(ore-7, a-5)
amod(ore-7, coal-like-6)
prep_across(happen-3, ore-7)
nn(specks-10, tan-9)
prep_with(ore-7, specks-10)
det(black-15, the-14)
prep_in_place_of(specks-10, black-15)
nsubj(found-19, you-17)
aux(found-19, have-18)
det(iron-21, some-20)
dobj(found-19, iron-21)

(ROOT
  (S
    (SBAR (IN As)
      (S
        (NP (PRP it))
        (VP (VBZ is)
          (VP (VBN made)
            (PP (IN with)
              (NP (NN cobblestone)))))))
    (, ,)
    (NP (PRP you))
    (VP (MD will)
      (VP (VB have)
        (S
          (VP (TO to)
            (VP (VB use)
              (NP (PRP$ your) (NN pickaxe))
              (S
                (VP (TO to)
                  (VP (VB collect)
                    (NP (PRP it))
                    (SBAR (IN if)
                      (S
                        (NP (PRP you))
                        (VP (VBP wish)
                          (S
                            (VP (TO to)
                              (VP (VB relocate)
                                (NP (PRP$ your) (NN furnace))))))))))))))))
    (. .)))

mark(made-4, As-1)
nsubjpass(made-4, it-2)
auxpass(made-4, is-3)
advcl(have-10, made-4)
prep_with(made-4, cobblestone-6)
nsubj(have-10, you-8)
xsubj(use-12, you-8)
aux(have-10, will-9)
aux(use-12, to-11)
xcomp(have-10, use-12)
poss(pickaxe-14, your-13)
dobj(use-12, pickaxe-14)
aux(collect-16, to-15)
xcomp(use-12, collect-16)
dobj(collect-16, it-17)
mark(wish-20, if-18)
nsubj(wish-20, you-19)
xsubj(relocate-22, you-19)
advcl(collect-16, wish-20)
aux(relocate-22, to-21)
xcomp(wish-20, relocate-22)
poss(furnace-24, your-23)
dobj(relocate-22, furnace-24)

(ROOT
  (S
    (VP (VBD Create)
      (NP
        (NP (DT a) (NN stone) (NN axe))
        (, ,)
        (NP (NN stone) (NN sword))
        (, ,)
        (CC and)
        (NP (NN stone) (NN pickaxe))))
    (. .)))

det(axe-4, a-2)
nn(axe-4, stone-3)
dobj(Create-1, axe-4)
nn(sword-7, stone-6)
dobj(Create-1, sword-7)
conj_and(axe-4, sword-7)
nn(pickaxe-11, stone-10)
dobj(Create-1, pickaxe-11)
conj_and(axe-4, pickaxe-11)

(ROOT
  (S
    (ADVP (RB Now))
    (PRN
      (S
        (VP (VB craft)
          (NP (DT a) (NN furnace))
          (S
            (VP (TO to)
              (VP (VB cook)
                (NP (NN meat))
                (PP (IN for)
                  (NP
                    (ADJP (NN food)
                      (CC and)
                      (VBN smelt))
                    (DT any) (NN iron)))))))))
    (NP (PRP you))
    (VP (VBP find)
      (PP (IN in)
        (NP (PRP$ your) (NNS travels))))
    (. .)))

advmod(find-15, Now-1)
parataxis(find-15, craft-2)
det(furnace-4, a-3)
dobj(craft-2, furnace-4)
aux(cook-6, to-5)
xcomp(craft-2, cook-6)
dobj(cook-6, meat-7)
amod(iron-13, food-9)
conj_and(food-9, smelt-11)
amod(iron-13, smelt-11)
det(iron-13, any-12)
prep_for(cook-6, iron-13)
nsubj(find-15, you-14)
poss(travels-18, your-17)
prep_in(find-15, travels-18)

(ROOT
  (S
    (VP (VB Save)
      (NP
        (NP
          (QP (IN around) (CD five))
          (NNS blocks))
        (PP (IN of)
          (NP (NN wood))))
      (PP (IN in)
        (NP (NN case)))
      (SBAR
        (S
          (NP (PRP you))
          (VP (VBP have)
            (ADVP (RB n't))
            (VP
              (VP (VBN found)
                (NP (DT any) (NN coal))
                (ADVP (RB yet)))
              (, ,)
              (CC and)
              (VP (VBN smelt)
                (S
                  (NP (PRP them))
                  (VP (TO to)
                    (VP (VB create)
                      (ADJP (JJ charcoal)))))))))))
    (. .)))

quantmod(five-3, around-2)
num(blocks-4, five-3)
dobj(Save-1, blocks-4)
prep_of(blocks-4, wood-6)
prep_in(Save-1, case-8)
nsubj(found-12, you-9)
nsubj(smelt-18, you-9)
aux(found-12, have-10)
neg(found-12, n't-11)
dep(Save-1, found-12)
det(coal-14, any-13)
dobj(found-12, coal-14)
dobj(smelt-18, coal-14)
advmod(found-12, yet-15)
dep(Save-1, smelt-18)
conj_and(found-12, smelt-18)
nsubj(create-21, them-19)
aux(create-21, to-20)
xcomp(smelt-18, create-21)
acomp(create-21, charcoal-22)

(ROOT
  (S
    (NP (DT The) (NNS torches))
    (VP (VBP are)
      (ADJP (JJ easy))
      (SBAR (IN though) (, ,)
        (S
          (NP (PRP you))
          (ADVP (RB just))
          (VP (VBP need)
            (S
              (VP (TO to)
                (VP (VB craft)
                  (ADJP (JJ charcoal\/coal))
                  (PP (IN on)
                    (NP
                      (NP (NN top))
                      (PP (IN of)
                        (NP (DT a) (NN stick))))))))))))
    (. .)))

det(torches-2, The-1)
nsubj(easy-4, torches-2)
cop(easy-4, are-3)
mark(need-9, though-5)
nsubj(need-9, you-7)
xsubj(craft-11, you-7)
advmod(need-9, just-8)
advcl(easy-4, need-9)
aux(craft-11, to-10)
xcomp(need-9, craft-11)
acomp(craft-11, charcoal\/coal-12)
det(stick-17, a-16)
prep_on_top_of(craft-11, stick-17)

(ROOT
  (S
    (PP (IN After)
      (S
        (VP (VBG marking)
          (NP (PRP$ your)))))
    (S
      (VP
        (VP (VB spawn)
          (NP (NN point)))
        (, ,)
        (VP (VB head)
          (PP (IN for)
            (NP (JJ high) (NN ground))))
        (CC and)
        (VP (VB look)
          (PRT (RP around))
          (PP (IN for)
            (NP
              (NP (JJ green) (NN grass))
              (CC and\/or)
              (NP
                (NP (NNS trees))
                (-LRB- -LRB-)
                (NP
                  (NP (NNS cacti))
                  (CC and)
                  (NP (NN sugar) (NN cane)))))))))
    (VP (VBP do) (RB n't)
      (VP (VB count)))
    (. .)))

prepc_after(count-26, marking-2)
dobj(marking-2, your-3)
csubj(count-26, spawn-4)
dobj(spawn-4, point-5)
dobj(head-7, point-5)
dobj(look-12, point-5)
conj_and(spawn-4, head-7)
csubj(count-26, head-7)
amod(ground-10, high-9)
prep_for(head-7, ground-10)
conj_and(spawn-4, look-12)
csubj(count-26, look-12)
prt(look-12, around-13)
amod(grass-16, green-15)
prep_for(look-12, grass-16)
prep_for(look-12, trees-18)
conj_and\/or(grass-16, trees-18)
dep(trees-18, cacti-20)
nn(cane-23, sugar-22)
dep(trees-18, cane-23)
conj_and(cacti-20, cane-23)
aux(count-26, do-24)
neg(count-26, n't-25)

(ROOT
  (S
    (ADVP (RB However))
    (, ,)
    (NP
      (NP (CD one) (NN thing))
      (SBAR
        (S
          (NP (DT the) (NN mushroom) (NN biome))
          (VP (VBZ does) (RB not)
            (VP (VB have)))
          (, ,))))
    (VP (VBZ is)
      (NP (NN wood))
      (: --)
      (SBAR (RB so) (IN before)
        (S
          (NP (PRP you))
          (VP (VBP go)
            (ADVP (RB there))
            (, ,)
            (SBAR
              (S
                (NP
                  (NP (NN head))
                  (PP (IN for)
                    (NP (DT a) (JJ grassy) (NN area))))
                (VP (TO to)
                  (VP (VB get)
                    (NP (DT some) (NN wood)
                      (CC and)
                      (NN stone))
                    (ADVP (RB first))))))))))
    (. .)))

advmod(wood-13, However-1)
num(thing-4, one-3)
nsubj(wood-13, thing-4)
det(biome-7, the-5)
nn(biome-7, mushroom-6)
nsubj(have-10, biome-7)
aux(have-10, does-8)
neg(have-10, not-9)
rcmod(thing-4, have-10)
cop(wood-13, is-12)
advmod(go-18, so-15)
dep(go-18, before-16)
nsubj(go-18, you-17)
parataxis(wood-13, go-18)
advmod(go-18, there-19)
nsubj(get-27, head-21)
det(area-25, a-23)
amod(area-25, grassy-24)
prep_for(head-21, area-25)
aux(get-27, to-26)
ccomp(go-18, get-27)
xcomp(go-18, get-27)
det(wood-29, some-28)
dobj(get-27, wood-29)
dobj(get-27, stone-31)
conj_and(wood-29, stone-31)
advmod(get-27, first-32)

(ROOT
  (S
    (S
      (NP (DT This))
      (VP (VBZ is)
        (NP (DT a) (JJ good) (NN place)
          (S
            (VP (TO to)
              (VP (VB live)
                (PP (IN in)
                  (ADJP (JJ general)))))))))
    (, ,)
    (S
      (SBAR (IN if)
        (S
          (S
            (NP (PRP you))
            (VP (MD can)
              (VP (VB make)
                (NP (DT a) (NN bed)))))
          (: :)
          (S
            (NP (DT the) (NNS farms))
            (VP (MD will)
              (VP (VB solve)
                (NP (PRP$ your) (NN food) (NNS worries))
                (PP (IN for)
                  (ADVP (RB now))))))))
      (, ,)
      (NP (PRP you))
      (VP (MD can)
        (VP (VB trade)
          (PP (IN with)
            (NP (DT the) (NNS villagers))))))
    (, ,)
    (CC and)
    (S
      (SBAR (IN if)
        (S
          (NP (EX there))
          (VP (VBZ 's)
            (NP
              (NP (DT a) (NN blacksmith))
              (PRN (-LRB- -LRB-)
                (SQ
                  (VP (VB look)
                    (PP (IN for)
                      (NP
                        (NP (DT a) (NN house))
                        (PP (IN with)
                          (NP (DT a) (NN stone) (NN slab) (NN roof)))))))
                (-RRB- -RRB-))))))
      (, ,)
      (NP (PRP it))
      (VP (MD will)
        (VP (VB contain)
          (NP (DT a) (NN chest))
          (PP (IN with)
            (NP (NN bonus) (NNS items))))))
    (. .)))

nsubj(place-5, This-1)
cop(place-5, is-2)
det(place-5, a-3)
amod(place-5, good-4)
aux(live-7, to-6)
infmod(place-5, live-7)
prep_in(live-7, general-9)
mark(make-14, if-11)
nsubj(make-14, you-12)
aux(make-14, can-13)
advcl(trade-30, make-14)
det(bed-16, a-15)
dobj(make-14, bed-16)
det(farms-19, the-18)
nsubj(solve-21, farms-19)
aux(solve-21, will-20)
parataxis(make-14, solve-21)
poss(worries-24, your-22)
nn(worries-24, food-23)
dobj(solve-21, worries-24)
prep(solve-21, for-25)
dep(for-25, now-26)
nsubj(trade-30, you-28)
aux(trade-30, can-29)
ccomp(place-5, trade-30)
conj_and(place-5, trade-30)
det(villagers-33, the-32)
prep_with(trade-30, villagers-33)
mark('s-38, if-36)
expl('s-38, there-37)
advcl(contain-55, 's-38)
det(blacksmith-40, a-39)
nsubj('s-38, blacksmith-40)
dep(-LRB--41, look-42)
det(house-45, a-44)
prep_for(look-42, house-45)
det(roof-50, a-47)
nn(roof-50, stone-48)
nn(roof-50, slab-49)
prep_with(house-45, roof-50)
nsubj(contain-55, it-53)
aux(contain-55, will-54)
conj_and(place-5, contain-55)
det(chest-57, a-56)
dobj(contain-55, chest-57)
nn(items-60, bonus-59)
prep_with(contain-55, items-60)

(ROOT
  (S
    (SBAR (IN If)
      (S
        (NP (EX there))
        (VP (VBP are)
          (NP (DT no) (NN sheep))
          (ADVP (RB around)))))
    (, ,)
    (S
      (VP (VB look)
        (PP (IN for)
          (NP (`` ``)
            (NP (NN lamp) (NNS posts))
            ('' '')
            (PP (IN in)
              (NP
                (NP (DT the) (NN village))
                (: --)
                (NP (DT the) (JJ black) (NN block))))))
        (PP (IN on)
          (NP (NN top)))))
    (VP (VBZ is)
      (NP
        (NP (NN wool))
        (PRN (-LRB- -LRB-)
          (SQ
            (VP (VB break)
              (NP (PRP it))
              (PP (IN with)
                (NP (PRP$ your) (NN hand)))))
          (-RRB- -RRB-))))
    (. .)))

mark(are-3, If-1)
expl(are-3, there-2)
advcl(is-23, are-3)
det(sheep-5, no-4)
nsubj(are-3, sheep-5)
advmod(are-3, around-6)
csubj(is-23, look-8)
nn(posts-12, lamp-11)
prep_for(look-8, posts-12)
det(village-16, the-15)
prep_in(posts-12, village-16)
det(block-20, the-18)
amod(block-20, black-19)
dep(village-16, block-20)
prep_on(look-8, top-22)
attr(is-23, wool-24)
dep(-LRB--25, break-26)
dobj(break-26, it-27)
poss(hand-30, your-29)
prep_with(break-26, hand-30)

(ROOT
  (S
    (VP
      (VP (VB Look)
        (PRT (RP around))
        (PP (IN for)
          (NP
            (NP (DT a) (JJ few) (NNS things))
            (PP (IN in)
              (NP (JJ particular))))))
      (, ,)
      (PP (IN in)
        (NP
          (NP
            (NP (NN order))
            (PP (IN of)
              (NP (NN priority))))
          (PRN (: :)
            (NP
              (NP (NNS trees))
              (, ,)
              (NP
                (NP (JJ visible) (NN stone))
                (-LRB- -LRB-)
                (CC and)
                (NP
                  (NP (RB especially) (NN coal) (NN ore))
                  (, ,)
                  (SBAR
                    (WHNP (WDT which))
                    (S
                      (VP (VBZ looks)
                        (PP (IN like)
                          (NP
                            (NP (NN stone))
                            (PP (IN with)
                              (NP (JJ black) (NNS spots)))))
                        (PP (IN on)
                          (NP (PRP it)))
                        (-RRB- -RRB-))))))
              (, ,)
              (NP (NNS animals))
              (, ,)
              (CC and)
              (NP (JJ tall) (NN grass)))))))
    (. .)))

prt(Look-1, around-2)
det(things-6, a-4)
amod(things-6, few-5)
prep_for(Look-1, things-6)
prep_in(things-6, particular-8)
prep_in(Look-1, order-11)
prep_of(order-11, priority-13)
dep(order-11, trees-15)
amod(stone-18, visible-17)
dep(order-11, stone-18)
conj_and(trees-15, stone-18)
advmod(ore-23, especially-21)
nn(ore-23, coal-22)
conj_and(trees-15, ore-23)
conj_and(stone-18, ore-23)
nsubj(looks-26, ore-23)
rcmod(ore-23, looks-26)
prep_like(looks-26, stone-28)
amod(spots-31, black-30)
prep_with(stone-28, spots-31)
prep_on(looks-26, it-33)
dep(order-11, animals-36)
conj_and(trees-15, animals-36)
amod(grass-40, tall-39)
dep(order-11, grass-40)
conj_and(trees-15, grass-40)

(ROOT
  (S
    (NP (PRP$ Your) (JJ first) (NN priority))
    (VP (VBZ is)
      (S
        (VP (TO to)
          (VP
            (VP (VB find)
              (NP (DT a) (JJ small) (NN tree)))
            (, ,)
            (VP (VB bash)
              (PP (IN through)
                (NP (DT the) (NNS leaves)))
              (SBAR (IN if)
                (S
                  (VP (VBN needed)))))
            (, ,)
            (CC and)
            (VP (`` ``) (VB punch) ('' '')
              (NP (DT the) (NN wood))))))
      (SBAR (IN until)
        (S
          (NP (DT each) (NN block))
          (VP (VBZ drops)
            (PP (IN as)
              (NP (DT an) (NN item)))))))
    (. .)))

poss(priority-3, Your-1)
amod(priority-3, first-2)
nsubj(is-4, priority-3)
xsubj(find-6, priority-3)
aux(find-6, to-5)
xcomp(is-4, find-6)
det(tree-9, a-7)
amod(tree-9, small-8)
dobj(find-6, tree-9)
dobj(bash-11, tree-9)
xcomp(is-4, bash-11)
conj_and(find-6, bash-11)
det(leaves-14, the-13)
prep_through(bash-11, leaves-14)
mark(needed-16, if-15)
advcl(bash-11, needed-16)
xcomp(is-4, punch-20)
conj_and(find-6, punch-20)
det(wood-23, the-22)
dobj(punch-20, wood-23)
mark(drops-27, until-24)
det(block-26, each-25)
nsubj(drops-27, block-26)
advcl(is-4, drops-27)
det(item-30, an-29)
prep_as(drops-27, item-30)

(ROOT
  (S
    (NP (PRP You))
    (VP (MD 'll)
      (VP (VB punch)
        (NP (JJR more) (NN wood))
        (PP (IN in)
          (NP (DT a) (NN moment)))))
    (. !)))

nsubj(punch-3, You-1)
aux(punch-3, 'll-2)
amod(wood-5, more-4)
dobj(punch-3, wood-5)
det(moment-8, a-7)
prep_in(punch-3, moment-8)

(ROOT
  (S
    (NP (NNP Wood))
    (VP (VBZ is)
      (ADJP (JJ essential)
        (PP (IN for)
          (NP
            (NP (NNS tools))
            (CC and)
            (NP
              (NP (JJ useful) (NNS items))
              (PP (JJ such) (IN as)
                (NP
                  (NP (NNS torches))
                  (, ,)
                  (NP (NNS doors))
                  (, ,)
                  (NP (NNS fences))
                  (, ,)
                  (CC and)
                  (NP (NNS chests)))))))))
    (. .)))

nsubj(essential-3, Wood-1)
cop(essential-3, is-2)
prep_for(essential-3, tools-5)
amod(items-8, useful-7)
prep_for(essential-3, items-8)
conj_and(tools-5, items-8)
prep_such_as(items-8, torches-11)
prep_such_as(items-8, doors-13)
conj_and(torches-11, doors-13)
prep_such_as(items-8, fences-15)
conj_and(torches-11, fences-15)
prep_such_as(items-8, chests-18)
conj_and(torches-11, chests-18)

(ROOT
  (S
    (NP (DT The) (NNS planks))
    (VP (MD will)
      (VP (VB be)
        (NP (JJ different) (NNS colors))
        (PP (VBG depending)
          (PP (IN on)
            (SBAR
              (WHNP (WP what))
              (S
                (NP
                  (NP (NN sort))
                  (PP (IN of)
                    (NP (NN wood))))
                (NP (PRP you))
                (VP (VBP have))))))))
    (. .)))

det(planks-2, The-1)
nsubj(colors-6, planks-2)
aux(colors-6, will-3)
cop(colors-6, be-4)
amod(colors-6, different-5)
dobj(have-14, what-9)
nsubj(have-14, sort-10)
prep_of(sort-10, wood-12)
nsubj(have-14, you-13)
prepc_depending_on(colors-6, have-14)

(ROOT
  (S
    (PP (IN In)
      (ADJP (JJ particular)))
    (, ,)
    (NP (NNS sticks))
    (VP (VBP do) (RB n't)
      (VP (`` ``) (VB remember) ('' '')
        (NP
          (SBAR
            (WHNP (WP what))
            (S
              (NP
                (NP (NN sort))
                (PP (IN of)
                  (NP (NN wood))))
              (NP (PRP they))
              (VP (VBD came)
                (PP (IN from))))))))
    (. .)))

prep_in(remember-8, particular-2)
nsubj(remember-8, sticks-4)
aux(remember-8, do-5)
neg(remember-8, n't-6)
rel(came-15, what-10)
nsubj(came-15, sort-11)
prep_of(sort-11, wood-13)
nsubj(came-15, they-14)
dobj(remember-8, came-15)
prep(came-15, from-16)

(ROOT
  (S
    (PP (IN In)
      (NP (NN order)
        (S
          (VP (TO to)
            (VP (VB collect)
              (NP
                (NP (NN stone)
                  (CC and)
                  (NN coal))
                (, ,)
                (NP (DT the) (JJ next) (JJ staple) (NNS resources))))))))
    (, ,)
    (NP (PRP you))
    (VP (MD will)
      (VP (VB need)
        (NP (DT a) (NN pickaxe))))
    (. .)))

prep_in(need-16, order-2)
aux(collect-4, to-3)
infmod(order-2, collect-4)
dobj(collect-4, stone-5)
dobj(collect-4, coal-7)
conj_and(stone-5, coal-7)
det(resources-12, the-9)
amod(resources-12, next-10)
amod(resources-12, staple-11)
appos(stone-5, resources-12)
nsubj(need-16, you-14)
aux(need-16, will-15)
det(pickaxe-18, a-17)
dobj(need-16, pickaxe-18)

(ROOT
  (S
    (S
      (NP (PRP$ Your) (JJ first) (NN pickaxe))
      (VP (MD will)
        (VP (VB be)
          (VP (VBN made)
            (PP (IN of)
              (NP
                (NP (NN wood))
                (, ,)
                (SBAR
                  (WHNP (WDT which))
                  (S
                    (VP (VBZ is) (RB n't)
                      (ADJP (RB very) (JJ durable)
                        (CC or)
                        (JJ fast)))))))))))
    (, ,)
    (CC but)
    (S
      (SBAR (IN until)
        (S
          (NP (PRP you))
          (VP (VBP collect)
            (NP (DT some) (NN cobblestone)))))
      (NP (PRP it))
      (VP (VBZ 's)
        (SBAR (DT all)
          (S
            (NP (PRP you))
            (VP (VBP have))))))
    (. .)))

poss(pickaxe-3, Your-1)
amod(pickaxe-3, first-2)
nsubjpass(made-6, pickaxe-3)
aux(made-6, will-4)
auxpass(made-6, be-5)
prep_of(made-6, wood-8)
nsubj(durable-14, wood-8)
nsubj(fast-16, wood-8)
cop(durable-14, is-11)
neg(durable-14, n't-12)
advmod(durable-14, very-13)
rcmod(wood-8, durable-14)
rcmod(wood-8, fast-16)
conj_or(durable-14, fast-16)
mark(collect-21, until-19)
nsubj(collect-21, you-20)
advcl('s-25, collect-21)
det(cobblestone-23, some-22)
dobj(collect-21, cobblestone-23)
nsubj('s-25, it-24)
conj_but(made-6, 's-25)
dep(have-28, all-26)
nsubj(have-28, you-27)
ccomp('s-25, have-28)

(ROOT
  (S
    (S
      (ADVP (RB Now))
      (NP (PRP you))
      (VP (MD 'll)
        (VP (VB use)
          (NP (DT some) (NNS planks)))))
    (CC and)
    (S
      (NP (DT the))
      (VP (VBZ sticks)
        (S
          (NP (PRP you))
          (ADVP (RB just))
          (VP (VBN made)
            (S
              (VP (TO to)
                (VP (VB create)
                  (NP (DT the) (JJ final) (NN product)))))))))
    (. .)))

advmod(use-4, Now-1)
nsubj(use-4, you-2)
aux(use-4, 'll-3)
det(planks-6, some-5)
dobj(use-4, planks-6)
dobj(sticks-9, planks-6)
nsubj(sticks-9, the-8)
conj_and(use-4, sticks-9)
nsubj(made-12, you-10)
xsubj(create-14, you-10)
advmod(made-12, just-11)
ccomp(sticks-9, made-12)
aux(create-14, to-13)
xcomp(made-12, create-14)
det(product-17, the-15)
amod(product-17, final-16)
dobj(create-14, product-17)

(ROOT
  (S
    (SBAR (IN If)
      (S
        (NP (PRP you))
        (VP (VBP do) (RB n't)
          (VP
            (VP (VB see)
              (NP (DT any))
              (PP (IN on)
                (NP (DT the) (NN surface))))
            (, ,)
            (VP (VB dig)
              (PRT (RP down))
              (PP (IN in)
                (NP
                  (NP (DT a) (JJ staircase) (NN fashion)
                    (CC and)
                    (NN mine))
                  (NP (DT the) (NN stone))))
              (PP (IN with)
                (NP (PRP$ your) (NN pickaxe))))))))
    (: ;)
    (NP (PRP it))
    (VP (MD will)
      (VP (VB drop)
        (PP (IN as)
          (NP (JJ cobblestone) (NNS items)))))
    (. .)))

mark(see-5, If-1)
nsubj(see-5, you-2)
aux(see-5, do-3)
neg(see-5, n't-4)
advcl(drop-27, see-5)
dobj(see-5, any-6)
det(surface-9, the-8)
prep_on(see-5, surface-9)
dep(see-5, dig-11)
prt(dig-11, down-12)
det(fashion-16, a-14)
amod(fashion-16, staircase-15)
prep_in(dig-11, fashion-16)
prep_in(dig-11, mine-18)
conj_and(fashion-16, mine-18)
det(stone-20, the-19)
dep(fashion-16, stone-20)
poss(pickaxe-23, your-22)
prep_with(dig-11, pickaxe-23)
nsubj(drop-27, it-25)
aux(drop-27, will-26)
amod(items-30, cobblestone-29)
prep_as(drop-27, items-30)

(ROOT
  (S
    (S
      (VP (VB Gather) (RB enough)
        (VP (VB cobblestone)
          (S
            (VP (TO to)
              (VP
                (VP (VB upgrade)
                  (NP (PRP$ your) (NN pickaxe)))
                (CC and)
                (VP (VB make)
                  (NP (DT a) (NN stone) (NN shovel)))))))))
    (, ,)
    (NP
      (NP
        (NP (NN axe))
        (, ,)
        (CC and)
        (NP (NN sword))
        (, ,))
      (CC and)
      (NP
        (NP (DT a) (NN furnace))
        (-LRB- -LRB-)
        (NP
          (NP (DT the) (JJ exact) (NN number))
          (PP (IN of)
            (NP
              (NP (NN cobblestone))
              (VP (VBN required)
                (S
                  (VP (TO to)
                    (VP (VB make)
                      (NP (DT these)))))))))))
    (VP (VBZ is)
      (NP (CD 17)))
    (. .) (-RRB- -RRB-)))

ccomp(17-33, Gather-1)
advmod(Gather-1, enough-2)
dep(Gather-1, cobblestone-3)
aux(upgrade-5, to-4)
xcomp(cobblestone-3, upgrade-5)
poss(pickaxe-7, your-6)
dobj(upgrade-5, pickaxe-7)
xcomp(cobblestone-3, make-9)
conj_and(upgrade-5, make-9)
det(shovel-12, a-10)
nn(shovel-12, stone-11)
dobj(make-9, shovel-12)
nsubj(17-33, axe-14)
conj_and(axe-14, sword-17)
nsubj(17-33, sword-17)
det(furnace-21, a-20)
conj_and(axe-14, furnace-21)
nsubj(17-33, furnace-21)
det(number-25, the-23)
amod(number-25, exact-24)
dep(furnace-21, number-25)
prep_of(number-25, cobblestone-27)
xsubj(make-30, cobblestone-27)
partmod(cobblestone-27, required-28)
aux(make-30, to-29)
xcomp(required-28, make-30)
dobj(make-30, these-31)
cop(17-33, is-32)

(ROOT
  (S
    (S
      (NP (PRP You))
      (VP (MD can) (RB also)
        (VP (VB craft)
          (NP
            (NP (DT a) (NN stone) (NN hoe))
            (PRN (-LRB- -LRB-)
              (CC or)
              (RB even)
              (NP (DT a) (JJ wooden) (NN one))
              (-RRB- -RRB-))))))
    (, ,)
    (CC but)
    (S
      (NP (PRP it))
      (VP (MD wo) (RB n't)
        (VP (VB be)
          (ADJP (JJ useful))
          (SBAR (IN until)
            (S
              (NP (PRP you))
              (VP (VBP start)
                (NP
                  (NP (NNS farms))
                  (PRN (-LRB- -LRB-)
                    (VP (VBN explained)
                      (PP (IN on)
                        (NP (NN day) (CD two))))
                    (-RRB- -RRB-)))))))))
    (. .)))

nsubj(craft-4, You-1)
aux(craft-4, can-2)
advmod(craft-4, also-3)
det(hoe-7, a-5)
nn(hoe-7, stone-6)
dobj(craft-4, hoe-7)
dep(one-13, or-9)
dep(one-13, even-10)
det(one-13, a-11)
amod(one-13, wooden-12)
appos(hoe-7, one-13)
nsubj(useful-21, it-17)
aux(useful-21, wo-18)
neg(useful-21, n't-19)
cop(useful-21, be-20)
conj_but(craft-4, useful-21)
mark(start-24, until-22)
nsubj(start-24, you-23)
advcl(useful-21, start-24)
dobj(start-24, farms-25)
dep(farms-25, explained-27)
prep_on(explained-27, day-29)
num(day-29, two-30)

(ROOT
  (S
    (S
      (S
        (NP (DT A) (NN stone) (NN pickaxe))
        (VP (VBZ is)
          (ADJP
            (ADJP (RBR more) (JJ durable))
            (CC and)
            (ADJP (RBR more) (JJ efficient)
              (PP (IN than)
                (NP (DT a) (JJ wooden) (NN pickaxe)))))))
      (, ,)
      (CC and)
      (S
        (NP (PRP it))
        (VP (MD can))))
    (NP (PRP mine))
    (VP (VBZ ores)
      (SBAR (IN that)
        (S
          (NP (DT a) (JJ wooden) (NN pickaxe))
          (VP (MD ca) (RB n't)))))
    (. .)))

det(pickaxe-3, A-1)
nn(pickaxe-3, stone-2)
nsubj(durable-6, pickaxe-3)
nsubj(efficient-9, pickaxe-3)
cop(durable-6, is-4)
advmod(durable-6, more-5)
dep(ores-19, durable-6)
advmod(efficient-9, more-8)
conj_and(durable-6, efficient-9)
dep(ores-19, efficient-9)
det(pickaxe-13, a-11)
amod(pickaxe-13, wooden-12)
prep_than(efficient-9, pickaxe-13)
nsubj(can-17, it-16)
conj_and(durable-6, can-17)
dep(ores-19, can-17)
nsubj(ores-19, mine-18)
complm(ca-24, that-20)
det(pickaxe-23, a-21)
amod(pickaxe-23, wooden-22)
nsubj(ca-24, pickaxe-23)
ccomp(ores-19, ca-24)
neg(ca-24, n't-25)

(ROOT
  (S
    (ADVP (RB Now))
    (, ,)
    (NP (PRP you))
    (VP (MD should)
      (VP (VB gather)
        (NP (JJR more) (NN wood))
        (, ,)
        (S
          (VP (VBG using)
            (NP (PRP$ your) (JJ new) (NN stone) (NN axe))))))
    (. .)))

advmod(gather-5, Now-1)
nsubj(gather-5, you-3)
aux(gather-5, should-4)
amod(wood-7, more-6)
dobj(gather-5, wood-7)
xcomp(gather-5, using-9)
poss(axe-13, your-10)
amod(axe-13, new-11)
nn(axe-13, stone-12)
dobj(using-9, axe-13)

(ROOT
  (S
    (SBAR (IN If)
      (S
        (NP (PRP you))
        (VP (VBP happen)
          (PP (IN across)
            (NP
              (NP (DT a) (JJ coal-like) (NN ore))
              (PP (IN with)
                (NP
                  (NP (NN tan) (NNS specks))
                  (PP (IN in)
                    (NP
                      (NP (NN place))
                      (PP (IN of)
                        (NP (DT the) (JJ black))))))))))))
    (, ,)
    (NP (PRP you))
    (VP (VBP have)
      (VP (VBN found)
        (NP (DT some) (NN iron))))
    (. .)))

mark(happen-3, If-1)
nsubj(happen-3, you-2)
advcl(found-19, happen-3)
det(ore-7, a-5)
amod(ore-7, coal-like-6)
prep_across(happen-3, ore-7)
nn(specks-10, tan-9)
prep_with(ore-7, specks-10)
det(black-15, the-14)
prep_in_place_of(specks-10, black-15)
nsubj(found-19, you-17)
aux(found-19, have-18)
det(iron-21, some-20)
dobj(found-19, iron-21)

(ROOT
  (S
    (SBAR (IN As)
      (S
        (NP (PRP it))
        (VP (VBZ is)
          (VP (VBN made)
            (PP (IN with)
              (NP (NN cobblestone)))))))
    (, ,)
    (NP (PRP you))
    (VP (MD will)
      (VP (VB have)
        (S
          (VP (TO to)
            (VP (VB use)
              (NP (PRP$ your) (NN pickaxe))
              (S
                (VP (TO to)
                  (VP (VB collect)
                    (NP (PRP it))
                    (SBAR (IN if)
                      (S
                        (NP (PRP you))
                        (VP (VBP wish)
                          (S
                            (VP (TO to)
                              (VP (VB relocate)
                                (NP (PRP$ your) (NN furnace))))))))))))))))
    (. .)))

mark(made-4, As-1)
nsubjpass(made-4, it-2)
auxpass(made-4, is-3)
advcl(have-10, made-4)
prep_with(made-4, cobblestone-6)
nsubj(have-10, you-8)
xsubj(use-12, you-8)
aux(have-10, will-9)
aux(use-12, to-11)
xcomp(have-10, use-12)
poss(pickaxe-14, your-13)
dobj(use-12, pickaxe-14)
aux(collect-16, to-15)
xcomp(use-12, collect-16)
dobj(collect-16, it-17)
mark(wish-20, if-18)
nsubj(wish-20, you-19)
xsubj(relocate-22, you-19)
advcl(collect-16, wish-20)
aux(relocate-22, to-21)
xcomp(wish-20, relocate-22)
poss(furnace-24, your-23)
dobj(relocate-22, furnace-24)

(ROOT
  (S
    (S
      (VP (VBN Ration)
        (PRT (RP out))
        (NP
          (NP (DT a) (NN piece))
          (PP (IN of)
            (NP (NN coal\/charcoal))))
        (PP (IN for)
          (NP (DT the) (NN food)))))
    (, ,)
    (CC and)
    (S
      (VP (VB cook)
        (NP (DT the) (NN food))
        (ADVP (RB just))
        (PP (IN like)
          (S
            (VP (VBG smelting)
              (NP
                (NP (DT the) (NN wood))
                (PP (IN above) (: :)
                  (NP
                    (NP (NN food))
                    (PP (IN in)
                      (NP
                        (NP (DT the) (JJ upper) (NN input) (NN box))
                        (, ,)
                        (NP
                          (NP (NN fuel))
                          (PRN (-LRB- -LRB-)
                            (NP (NN coal))
                            (-RRB- -RRB-))))))))
              (PP (IN in)
                (NP (DT the) (JJR lower) (NN one))))))))
    (. .)))

prt(Ration-1, out-2)
det(piece-4, a-3)
dobj(Ration-1, piece-4)
prep_of(piece-4, coal\/charcoal-6)
det(food-9, the-8)
prep_for(Ration-1, food-9)
conj_and(Ration-1, cook-12)
det(food-14, the-13)
dobj(cook-12, food-14)
advmod(cook-12, just-15)
prepc_like(cook-12, smelting-17)
det(wood-19, the-18)
dobj(smelting-17, wood-19)
prep_above(wood-19, food-22)
det(box-27, the-24)
amod(box-27, upper-25)
nn(box-27, input-26)
prep_in(food-22, box-27)
appos(box-27, fuel-29)
appos(fuel-29, coal-31)
det(one-36, the-34)
amod(one-36, lower-35)
prep_in(smelting-17, one-36)

(ROOT
  (S
    (NP
      (NP
        (NP (NNP Use))
        (NP
          (NP (DT the) (NN rest))
          (PRN (-LRB- -LRB-)
            (PP
              (ADVP (RB up)
                (PP (TO to)
                  (NP (CD 8))))
              (IN for)
              (NP (RB now)))
            (-RRB- -RRB-))))
      (PP (IN of)
        (NP
          (NP (DT the) (NN coal)
            (CC or)
            (NN charcoal))
          (PP (IN with)
            (NP (DT some))))))
    (VP (VBZ sticks)
      (S
        (VP (TO to)
          (VP (VB craft)
            (PP (IN into)
              (NP (NNS torches)))))))
    (. .)))

nsubj(sticks-18, Use-1)
xsubj(craft-20, Use-1)
det(rest-3, the-2)
dep(Use-1, rest-3)
dep(for-8, up-5)
dep(up-5, to-6)
pobj(to-6, 8-7)
dep(rest-3, for-8)
pobj(for-8, now-9)
det(coal-13, the-12)
prep_of(Use-1, coal-13)
prep_of(Use-1, charcoal-15)
conj_or(coal-13, charcoal-15)
prep_with(coal-13, some-17)
aux(craft-20, to-19)
xcomp(sticks-18, craft-20)
prep_into(craft-20, torches-22)

(ROOT
  (S
    (NP (PRP One))
    (VP (VBP log)
      (NP (NNS crafts))
      (PP (IN into)
        (NP (CD 8) (NNS sticks)))
      (S
        (VP (TO to)
          (VP (VB match)
            (NP
              (NP (CD 8) (NNS pieces))
              (PP (IN of)
                (NP (NN coal)
                  (CC or)
                  (NN charcoal)))
              (, ,)
              (VP (VBG producing)
                (NP (CD 32) (NNS torches))))
            (SBAR
              (S (-LRB- -LRB-)
                (NP (PDT half) (DT a))
                (VP
                  (S
                    (VP (VB stack))))))))))
    (. .) (-RRB- -RRB-)))

nsubj(log-2, One-1)
xsubj(match-8, One-1)
dobj(log-2, crafts-3)
num(sticks-6, 8-5)
prep_into(log-2, sticks-6)
aux(match-8, to-7)
xcomp(log-2, match-8)
num(pieces-10, 8-9)
dobj(match-8, pieces-10)
prep_of(pieces-10, coal-12)
prep_of(pieces-10, charcoal-14)
conj_or(coal-12, charcoal-14)
partmod(pieces-10, producing-16)
num(torches-18, 32-17)
dobj(producing-16, torches-18)
predet(a-21, half-20)
nsubj(stack-22, a-21)
dep(match-8, stack-22)

(ROOT
  (S
    (PP (IN Throughout)
      (NP (DT the) (NN game)))
    (, ,)
    (NP (PRP you))
    (VP (MD will)
      (VP (VB be)
        (S
          (VP (VBG crafting)
            (NP
              (ADJP (JJR more)
                (CC and)
                (JJR more))
              (NNS torches))))
        (SBAR (IN as)
          (S
            (NP (PRP you))
            (VP
              (VP (VBP need)
                (NP (PRP them)))
              (, ,) (RB so)
              (VP
                (ADVP (RB always))
                (VBP keep)
                (NP
                  (NP (DT some) (NN coal)
                    (CC or)
                    (NN charcoal))
                  (PP (IN at)
                    (NP (NN hand))))))))))
    (. .)))

det(game-3, the-2)
prep_throughout(be-7, game-3)
nsubj(be-7, you-5)
aux(be-7, will-6)
xcomp(be-7, crafting-8)
amod(torches-12, more-9)
conj_and(more-9, more-11)
amod(torches-12, more-11)
dobj(crafting-8, torches-12)
mark(need-15, as-13)
nsubj(need-15, you-14)
advcl(be-7, need-15)
dobj(need-15, them-16)
advmod(need-15, so-18)
advmod(keep-20, always-19)
dep(need-15, keep-20)
det(coal-22, some-21)
dobj(keep-20, coal-22)
dobj(keep-20, charcoal-24)
conj_or(coal-22, charcoal-24)
prep_at(coal-22, hand-26)

(ROOT
  (S
    (VP
      (VP (VB Relocate)
        (NP
          (NP (PRP$ your) (VBG crafting) (NN table))
          (CC and)
          (NP
            (NP (NN furnace))
            (PP (IN in)
              (NP (RB here))))))
      (, ,)
      (CC and)
      (VP (VB make)
        (ADJP (JJ sure)
          (S
            (VP (TO to)
              (VP (VB light)
                (NP (PRP it))
                (PRT (RP up))))))))
    (. !)))

poss(table-4, your-2)
amod(table-4, crafting-3)
dobj(Relocate-1, table-4)
dobj(make-11, table-4)
dobj(Relocate-1, furnace-6)
conj_and(table-4, furnace-6)
prep(furnace-6, in-7)
pobj(in-7, here-8)
conj_and(Relocate-1, make-11)
acomp(make-11, sure-12)
aux(light-14, to-13)
xcomp(sure-12, light-14)
dobj(light-14, it-15)
prt(light-14, up-16)

(ROOT
  (S
    (SBAR (IN If)
      (S
        (NP (PRP you))
        (VP (VBP have)
          (NP (DT no) (NN door)))))
    (, ,)
    (NP (RB simply))
    (VP (VBP cover)
      (NP
        (NP (PRP$ your) (NN entrance))
        (PP (IN with)
          (NP (NN dirt)
            (CC or)
            (NN cobblestone)))
        (SBAR
          (WHADVP (WRB when))
          (S
            (NP (NN night))
            (VP (VBZ falls) (, ,)
              (S
                (ADVP (RB periodically))
                (VP (VBG breaking)
                  (S
                    (NP (PRP it))
                    (VP (TO to)
                      (VP (VB check)
                        (PP (IN for)
                          (NP
                            (NP (NN day))
                            (PRN (-LRB- -LRB-)
                              (SQ
                                (VP
                                  (VP (VB watch)
                                    (PRT (RP out))
                                    (PP (IN for)
                                      (NP (NNS mobs))))
                                  (ADVP (RB though)))
                                (. !))
                              (-RRB- -RRB-))))))))))))))))

mark(have-3, If-1)
nsubj(have-3, you-2)
advcl(cover-8, have-3)
det(door-5, no-4)
dobj(have-3, door-5)
nsubj(cover-8, simply-7)
poss(entrance-10, your-9)
dobj(cover-8, entrance-10)
prep_with(entrance-10, dirt-12)
prep_with(entrance-10, cobblestone-14)
conj_or(dirt-12, cobblestone-14)
advmod(falls-17, when-15)
rel(falls-17, when-15)
nsubj(falls-17, night-16)
dep(entrance-10, falls-17)
advmod(breaking-20, periodically-19)
xcomp(falls-17, breaking-20)
nsubj(check-23, it-21)
aux(check-23, to-22)
xcomp(breaking-20, check-23)
prep_for(check-23, day-25)
dep(-LRB--26, watch-27)
prt(watch-27, out-28)
prep_for(watch-27, mobs-30)
advmod(watch-27, though-31)

(ROOT
  (NP (NNP .)))


(ROOT
  (S
    (VP
      (VP (VB Keep)
        (NP (PRP$ your) (NN stone) (NN sword))
        (PP (IN in)
          (NP (NN hand))))
      (CC and)
      (VP (VB whack)
        (NP (PRP them))
        (ADVP
          (ADVP (RB as) (RB soon))
          (SBAR (IN as)
            (S
              (NP (PRP they))
              (VP (VBP come)
                (PP (IN into)
                  (NP (NN reach)))))))
        (, ,)
        (SBAR (IN before)
          (S
            (NP (PRP they))
            (VP (VBP get)
              (PRT (RP up))
              (PP (TO to)
                (NP (PRP you)))
              (: -)
              (S
                (VP (VBG attacking)
                  (SBAR
                    (S
                      (NP (PRP them))
                      (VP (MD will)
                        (VP (VB knock)
                          (NP (PRP them))
                          (ADVP (RB back) (RB down)))))))))))))
    (. .)))

poss(sword-4, your-2)
nn(sword-4, stone-3)
dobj(Keep-1, sword-4)
prep_in(Keep-1, hand-6)
conj_and(Keep-1, whack-8)
dobj(whack-8, them-9)
advmod(soon-11, as-10)
advmod(whack-8, soon-11)
mark(come-14, as-12)
nsubj(come-14, they-13)
dep(soon-11, come-14)
prep_into(come-14, reach-16)
mark(get-20, before-18)
nsubj(get-20, they-19)
advcl(whack-8, get-20)
prt(get-20, up-21)
prep_to(get-20, you-23)
parataxis(get-20, attacking-25)
xcomp(get-20, attacking-25)
nsubj(knock-28, them-26)
aux(knock-28, will-27)
ccomp(attacking-25, knock-28)
dobj(knock-28, them-29)
advmod(down-31, back-30)
advmod(knock-28, down-31)

(ROOT
  (S
    (NP (PRP You))
    (VP (MD can)
      (ADVP (RB also) (RB simply))
      (VP (VB build)
        (NP (DT a)
          (ADJP (CD three) (NN block))
          (JJ high) (NN hut))
        (PP (IN from)
          (NP (DT any) (NN material)))
        (, ,)
        (PP (IN for)
          (NP
            (NP (NN example) (NN cobblestone))
            (, ,)
            (NP (NN wood)
              (CC or)
              (NN dirt))))))
    (. .)))

nsubj(build-5, You-1)
aux(build-5, can-2)
advmod(simply-4, also-3)
advmod(build-5, simply-4)
det(hut-10, a-6)
dep(block-8, three-7)
amod(hut-10, block-8)
amod(hut-10, high-9)
dobj(build-5, hut-10)
det(material-13, any-12)
prep_from(build-5, material-13)
nn(cobblestone-17, example-16)
prep_for(build-5, cobblestone-17)
appos(cobblestone-17, wood-19)
appos(cobblestone-17, dirt-21)
conj_or(wood-19, dirt-21)

(ROOT
  (S
    (S
      (NP (NNP Extreme) (NNPS Hills) (NNS biomes))
      (VP (MD will)
        (VP (VB have)
          (NP (NNS caves))
          (PP (IN inside)
            (NP (NNS mountains))))))
    (, ,)
    (CC but)
    (S
      (NP (DT these))
      (VP (VBP are)
        (SBAR
          (ADVP (RB generally) (RB not))
          (WHNP (WP what))
          (S
            (NP (PRP you))
            (VP (VBP want))))
        (, ,)
        (SBAR (IN because)
          (S
            (NP (JJ only) (NN coal) (NN ore))
            (VP (MD will)
              (VP (VB appear)
                (PP (IN above)
                  (NP (NN sea) (NN level)))
                (PRN (-LRB- -LRB-)
                  (S
                    (NP (NNP Y))
                    (VP (JJ =)
                      (NP (CD 64))))
                  (-RRB- -RRB-))))))))
    (. .)))

nn(biomes-3, Extreme-1)
nn(biomes-3, Hills-2)
nsubj(have-5, biomes-3)
aux(have-5, will-4)
dobj(have-5, caves-6)
dobj(are-12, caves-6)
prep_inside(have-5, mountains-8)
nsubj(are-12, these-11)
conj_but(have-5, are-12)
advmod(not-14, generally-13)
neg(want-17, not-14)
dep(want-17, what-15)
nsubj(want-17, you-16)
ccomp(are-12, want-17)
mark(appear-24, because-19)
amod(ore-22, only-20)
nn(ore-22, coal-21)
nsubj(appear-24, ore-22)
aux(appear-24, will-23)
advcl(are-12, appear-24)
nn(level-27, sea-26)
prep_above(appear-24, level-27)
nsubj(=-30, Y-29)
parataxis(appear-24, =-30)
dobj(=-30, 64-31)

(ROOT
  (S
    (S
      (NP (DT This))
      (VP (VBZ is)
        (NP
          (NP (DT the) (JJ only) (NN ore))
          (SBAR
            (WHNP (WDT that))
            (S
              (VP (VBZ appears)
                (PP (IN above)
                  (NP (NN sea) (NN level)))
                (PRN (-LRB- -LRB-)
                  (S
                    (ADVP (RB anywhere))
                    (NP (EX there))
                    (VP (VBZ is)
                      (NP (NN stone))))
                  (-RRB- -RRB-))))))))
    (, ,)
    (CC and)
    (S
      (NP (PRP it))
      (VP (VBZ is)
        (ADJP (RB often) (JJ visible)
          (PP
            (PP (IN in)
              (NP
                (NP (NN stone) (NNS outcrops))
                (PP (IN on)
                  (NP (DT the) (NN surface)))))
            (CC or)
            (ADVP (RB even))
            (PP (IN on)
              (NP (NNS mountains)))))))
    (. .)))

nsubj(ore-5, This-1)
cop(ore-5, is-2)
det(ore-5, the-3)
amod(ore-5, only-4)
nsubj(appears-7, ore-5)
rcmod(ore-5, appears-7)
nn(level-10, sea-9)
prep_above(appears-7, level-10)
advmod(is-14, anywhere-12)
expl(is-14, there-13)
parataxis(appears-7, is-14)
nsubj(is-14, stone-15)
nsubj(visible-22, it-19)
nsubj(visible-22', it-19)
cop(visible-22, is-20)
advmod(visible-22, often-21)
conj_and(ore-5, visible-22)
conj_and(ore-5, visible-22')
conj_or(visible-22, visible-22')
nn(outcrops-25, stone-24)
prep_in(visible-22, outcrops-25)
det(surface-28, the-27)
prep_on(outcrops-25, surface-28)
conj(visible-22, even-30)
prep_on(visible-22', mountains-32)

(ROOT
  (S
    (CONJP (RB Gather) (IN as))
    (SINV
      (NP (RB much))
      (PP (IN of)
        (NP (PRP it)))
      (PP (IN as)
        (ADJP (JJ possible))))
    (, ,)
    (CC but)
    (S
      (NP (PRP it))
      (VP (VBZ needs)
        (NP
          (NP (DT a) (NN stone) (NN pickaxe))
          (CC or)
          (NP (JJR better)))
        (S
          (VP (TO to)
            (VP (NN mine)
              (NP (PRP it))
              (, ,)
              (ADVP (RB so))))
          (VP (VB be)
            (ADJP (JJ careful)
              (S (RB not)
                (VP (TO to)
                  (VP (VB use)
                    (NP (DT a) (JJ wooden) (NN pick))
                    (PP (IN on)
                      (NP (PRP it)))))))))))
    (. .)))

cc(needs-11, Gather-1)
dep(needs-11, much-3)
dep(much-3, of-4)
pobj(of-4, it-5)
dep(much-3, as-6)
pobj(as-6, possible-7)
cc(needs-11, but-9)
nsubj(needs-11, it-10)
det(pickaxe-14, a-12)
nn(pickaxe-14, stone-13)
dobj(needs-11, pickaxe-14)
dobj(needs-11, better-16)
conj_or(pickaxe-14, better-16)
aux(mine-18, to-17)
xcomp(needs-11, mine-18)
dobj(mine-18, it-19)
advmod(mine-18, so-21)
cop(careful-23, be-22)
pred(mine-18, careful-23)
neg(use-26, not-24)
aux(use-26, to-25)
dep(careful-23, use-26)
det(pick-29, a-27)
amod(pick-29, wooden-28)
dobj(use-26, pick-29)
prep_on(use-26, it-31)

(ROOT
  (S
    (SBAR (IN Once)
      (S
        (NP (PRP you))
        (VP (VBP have)
          (NP (DT some) (NN iron) (NN ore)))))
    (, ,)
    (VP (VB make)
      (NP (DT a) (NN furnace))
      (S
        (VP (TO to)
          (VP (VBN smelt)
            (NP (PRP it))
            (PP (IN into)
              (NP (NN iron) (NNS ingots)))
            (, ,)
            (SBAR (IN that)
              (S
                (NP (PRP you))
                (VP (MD can) (RB then)
                  (VP (VB craft)
                    (PP (IN into)
                      (NP (JJ other) (NNS items)))))))))))
    (. .)))

mark(have-3, Once-1)
nsubj(have-3, you-2)
advcl(make-8, have-3)
det(ore-6, some-4)
nn(ore-6, iron-5)
dobj(have-3, ore-6)
det(furnace-10, a-9)
dobj(make-8, furnace-10)
aux(smelt-12, to-11)
xcomp(make-8, smelt-12)
dobj(smelt-12, it-13)
nn(ingots-16, iron-15)
prep_into(smelt-12, ingots-16)
complm(craft-22, that-18)
nsubj(craft-22, you-19)
aux(craft-22, can-20)
advmod(craft-22, then-21)
ccomp(smelt-12, craft-22)
amod(items-25, other-24)
prep_into(craft-22, items-25)

(ROOT
  (S
    (NP
      (NP
        (NP
          (NP (NNP First))
          (PP (IN of)
            (NP (DT all) (NN craft))))
        (NP (DT a) (NN pickaxe)))
      (, ,)
      (NP (DT a) (NN sword))
      (, ,)
      (CC and)
      (NP
        (NP (DT a) (NN bucket))
        (PRN (-LRB- -LRB-)
          (SQ
            (VP (VB fill)
              (NP (PRP it))
              (PP (IN with)
                (NP (NN water)))))
          (-RRB- -RRB-)))
      (, ,))
    (ADVP (RB then))
    (VP (VB craft)
      (NP (NN iron) (NN armor)))
    (. .)))

nsubj(craft-22, First-1)
det(craft-4, all-3)
prep_of(First-1, craft-4)
det(pickaxe-6, a-5)
dep(First-1, pickaxe-6)
det(sword-9, a-8)
conj_and(First-1, sword-9)
nsubj(craft-22, sword-9)
det(bucket-13, a-12)
conj_and(First-1, bucket-13)
nsubj(craft-22, bucket-13)
dep(-LRB--14, fill-15)
dobj(fill-15, it-16)
prep_with(fill-15, water-18)
advmod(craft-22, then-21)
nn(armor-24, iron-23)
dobj(craft-22, armor-24)

(ROOT
  (S
    (SBAR (IN If)
      (S
        (NP (PRP you))
        (VP (VBP have)
          (ADJP (JJ extra)))))
    (, ,)
    (VP (VB go)
      (PRT (RP on))
      (S
        (VP (TO to)
          (VP (VB make)
            (NP
              (NP (NNS shears))
              (, ,)
              (NP
                (NP (DT another) (NN bucket))
                (PRN (-LRB- -LRB-)
                  (S
                    (VP (TO to)
                      (VP (VB hold)
                        (NP
                          (NP (DT a) (JJ second) (NN water) (NN source))
                          (CC or)
                          (NP (JJ stray) (NN lava))))))
                  (-RRB- -RRB-)))
              (, ,)
              (CC and)
              (ADVP (RB perhaps))
              (NP
                (NP (DT an) (NN iron) (NN shovel))
                (CC or)
                (NP (JJ other) (NNS tools))))))))
    (. .)))

mark(extra-4, If-1)
nsubj(extra-4, you-2)
dep(extra-4, have-3)
advcl(go-6, extra-4)
prt(go-6, on-7)
aux(make-9, to-8)
xcomp(go-6, make-9)
dobj(make-9, shears-10)
det(bucket-13, another-12)
dobj(make-9, bucket-13)
conj_and(shears-10, bucket-13)
aux(hold-16, to-15)
dep(bucket-13, hold-16)
det(source-20, a-17)
amod(source-20, second-18)
nn(source-20, water-19)
dobj(hold-16, source-20)
amod(lava-23, stray-22)
dobj(hold-16, lava-23)
conj_or(source-20, lava-23)
dobj(make-9, perhaps-27)
advmod(shears-10, perhaps-27)
conj_and(shears-10, perhaps-27)
det(shovel-30, an-28)
nn(shovel-30, iron-29)
dobj(make-9, shovel-30)
conj_and(shears-10, shovel-30)
amod(tools-33, other-32)
conj_and(shears-10, tools-33)
conj_or(shovel-30, tools-33)

(ROOT
  (S
    (NP
      (NP (NNP Gold))
      (CC and)
      (NP (NN redstone)))
    (VP (VBP need)
      (NP (DT an) (NN iron) (NN pickaxe))
      (PP (TO to)
        (NP (NN mine))))
    (. .)))

nsubj(need-4, Gold-1)
conj_and(Gold-1, redstone-3)
nsubj(need-4, redstone-3)
det(pickaxe-7, an-5)
nn(pickaxe-7, iron-6)
dobj(need-4, pickaxe-7)
prep_to(need-4, mine-9)

(ROOT
  (S (-LRB- -LRB-)
    (NP (NNP Lapis))
    (VP (MD can)
      (VP (VB be)
        (VP (VBN mined)
          (PP (IN with)
            (NP (DT a) (NN stone) (NN pickaxe))))))
    (. .)))

nsubjpass(mined-5, Lapis-2)
aux(mined-5, can-3)
auxpass(mined-5, be-4)
det(pickaxe-9, a-7)
nn(pickaxe-9, stone-8)
prep_with(mined-5, pickaxe-9)

(ROOT
  (S
    (NP (DT The) (NN ore))
    (VP
      (VP (MD can)
        (VP (VB be)
          (VP (VBN found)
            (PP (IN at)
              (NP
                (NP
                  (NP (DT the) (JJ very) (NN bottom))
                  (PP (IN of)
                    (NP (DT the) (NN world))))
                (, ,)
                (NP
                  (NP (DT the) (JJ bottom) (CD 15) (NNS layers))
                  (PP (IN of)
                    (NP (DT the) (NN map)))))))))
      (, ,)
      (CC and)
      (VP (VBZ requires)
        (NP
          (NP (DT an) (NN iron) (NN pickaxe))
          (PP (TO to)
            (NP (NN mine))))))
    (. .)))

det(ore-2, The-1)
nsubjpass(found-5, ore-2)
nsubjpass(requires-23, ore-2)
aux(found-5, can-3)
auxpass(found-5, be-4)
det(bottom-9, the-7)
amod(bottom-9, very-8)
prep_at(found-5, bottom-9)
det(world-12, the-11)
prep_of(bottom-9, world-12)
det(layers-17, the-14)
amod(layers-17, bottom-15)
num(layers-17, 15-16)
appos(bottom-9, layers-17)
det(map-20, the-19)
prep_of(layers-17, map-20)
conj_and(found-5, requires-23)
det(pickaxe-26, an-24)
nn(pickaxe-26, iron-25)
dobj(requires-23, pickaxe-26)
prep_to(pickaxe-26, mine-28)

(ROOT
  (S
    (S
      (NP (JJ Emerald) (NN ore))
      (VP (VBZ is)
        (VP (VBN found)
          (PP (IN at)
            (NP (DT the) (JJ same) (NNS depths)))
          (PP (IN as)
            (NP (NN gold) (NN ore))))))
    (, ,)
    (CC and)
    (SINV
      (ADVP (RB likewise))
      (VP (VBZ requires))
      (NP (DT an) (NN iron) (NN pickaxe)))
    (. .)))

amod(ore-2, Emerald-1)
nsubjpass(found-4, ore-2)
auxpass(found-4, is-3)
det(depths-8, the-6)
amod(depths-8, same-7)
prep_at(found-4, depths-8)
nn(ore-11, gold-10)
prep_as(found-4, ore-11)
advmod(requires-15, likewise-14)
conj_and(found-4, requires-15)
det(pickaxe-18, an-16)
nn(pickaxe-18, iron-17)
nsubj(requires-15, pickaxe-18)

(ROOT
  (S
    (SBAR (IN If)
      (S
        (NP (PRP you))
        (ADVP (RB still))
        (VP (VBP have)
          (ADVP (RB n't))
          (VP (VBN found)
            (NP (NN sheep))))))
    (, ,)
    (NP (CD 12) (NN string))
    (VP (MD can)
      (VP (VB be)
        (VP (VBN crafted)
          (PP (IN into)
            (NP (DT the) (CD 3) (NN wool)))
          (SBAR
            (S
              (NP (PRP you))
              (VP (VBP need)
                (PP (IN for)
                  (NP (DT a) (NN bed)))))))))
    (. .)))

mark(found-6, If-1)
nsubj(found-6, you-2)
advmod(found-6, still-3)
aux(found-6, have-4)
neg(found-6, n't-5)
advcl(crafted-13, found-6)
dobj(found-6, sheep-7)
num(string-10, 12-9)
nsubjpass(crafted-13, string-10)
aux(crafted-13, can-11)
auxpass(crafted-13, be-12)
det(wool-17, the-15)
num(wool-17, 3-16)
prep_into(crafted-13, wool-17)
nsubj(need-19, you-18)
ccomp(crafted-13, need-19)
det(bed-22, a-21)
prep_for(need-19, bed-22)

(ROOT
  (NP
    (NP
      (NP (JJ Gather) (NN sugar) (NN cane))
      (PP (IN for)
        (NP (NNS maps)
          (CC and)
          (NNS books))))
    (S (-LRB- -LRB-)
      (NP (PRP you))
      (VP (MD will) (RB also)
        (VP (VB need)
          (NP (NN iron)
            (CC and)
            (NN redstone))
          (PP (IN for)
            (NP
              (NP (NNS maps))
              (, ,)
              (CC and)
              (NP
                (NP (NN leather))
                (PP (IN for)
                  (NP (NNS books))))
              (-RRB- -RRB-)))))
      (. .))))

amod(cane-3, Gather-1)
nn(cane-3, sugar-2)
prep_for(cane-3, maps-5)
prep_for(cane-3, books-7)
conj_and(maps-5, books-7)
nsubj(need-12, you-9)
aux(need-12, will-10)
advmod(need-12, also-11)
dep(cane-3, need-12)
dobj(need-12, iron-13)
dobj(need-12, redstone-15)
conj_and(iron-13, redstone-15)
prep_for(need-12, maps-17)
prep_for(need-12, leather-20)
conj_and(maps-17, leather-20)
prep_for(leather-20, books-22)

(ROOT
  (S
    (NP (NN Fishing))
    (VP (MD will)
      (VP (VB be)
        (NP
          (NP
            (ADJP
              (ADJP
                (NP
                  (QP (IN about) (CD 20))
                  (NN %))
                (JJR faster))
              (SBAR
                (WHADVP (WRB when))
                (S
                  (S
                    (NP (PRP it))
                    (VP (VBZ 's)
                      (VP (VBG raining))))
                  (, ,)
                  (CC and)
                  (S
                    (NP (NN fishing))
                    (VP (MD will) (RB occasionally)
                      (VP (VB get)
                        (NP (PRP you))))))))
            (NX
              (NX (NNS saddles))
              (CC and)
              (NX
                (NX (NN name) (NNS tags))
                (PRN (-LRB- -LRB-)
                  (ADVP (RB otherwise))
                  (ADJP (RB quite) (JJ hard)
                    (S
                      (VP (TO to)
                        (VP (VB find)))))
                  (-RRB- -RRB-)))))
          (, ,)
          (ADVP (IN along)
            (PP (IN with)
              (NP
                (NP
                  (NP (JJ extra) (NNS bits))
                  (PP (IN of)
                    (NP (NN leather)
                      (CC and)
                      (NN string))))
                (: ...)
                (S (RB not)
                  (VP (TO to)
                    (VP (VB mention)
                      (NP (JJ enchanted) (NN fishing) (NNS rods)))))))))))
    (. .) (-RRB- -RRB-)))

nsubj(saddles-19, Fishing-1)
aux(saddles-19, will-2)
cop(saddles-19, be-3)
quantmod(20-5, about-4)
num(%-6, 20-5)
measure(faster-7, %-6)
amod(saddles-19, faster-7)
advmod(raining-11, when-8)
nsubj(raining-11, it-9)
aux(raining-11, 's-10)
dep(faster-7, raining-11)
nsubj(get-17, fishing-14)
aux(get-17, will-15)
advmod(get-17, occasionally-16)
dep(faster-7, get-17)
conj_and(raining-11, get-17)
dobj(get-17, you-18)
dep(tags-22, name-21)
conj_and(saddles-19, tags-22)
dep(hard-26, otherwise-24)
advmod(hard-26, quite-25)
dep(tags-22, hard-26)
aux(find-28, to-27)
xcomp(hard-26, find-28)
amod(bits-34, extra-33)
prep_along_with(saddles-19, bits-34)
prep_of(bits-34, leather-36)
prep_of(bits-34, string-38)
conj_and(leather-36, string-38)
neg(mention-42, not-40)
aux(mention-42, to-41)
infmod(bits-34, mention-42)
amod(rods-45, enchanted-43)
nn(rods-45, fishing-44)
dobj(mention-42, rods-45)

(ROOT
  (S
    (S
      (VP (VB Add)
        (NP (DT a) (JJ few) (NNS fences))
        (PP (IN for)
          (NP
            (NP (NN safety))
            (, ,) (RB optionally)
            (NP
              (NP (DT a) (NN roof))
              (PRN (-LRB- -LRB-)
                (S
                  (S
                    (NP (NN lightning))
                    (VP (VBZ is)
                      (ADJP (JJ unlikely)
                        (S
                          (VP (TO to)
                            (VP (VB hit)
                              (NP (PRP you))))))))
                  (, ,)
                  (CC but)
                  (S
                    (NP (PRP it))
                    (VP (VBZ does)
                      (VP (VB happen)))))
                (-RRB- -RRB-)))))))
    (, ,)
    (CC and)
    (S
      (NP (PRP you))
      (VP (VBP have)
        (NP
          (NP (DT a) (JJ nice) (JJ secure) (NN spot))
          (PP (TO to)
            (NP (NN fish))))
        (PP
          (PP (IN from))
          (, ,)
          (PP
            (ADVP (RB even))
            (IN during)
            (NP (NNS thunderstorms)))
          (CC and)
          (PP (IN at)
            (NP (NN night))))))
    (. .)))

det(fences-4, a-2)
amod(fences-4, few-3)
dobj(Add-1, fences-4)
prep_for(Add-1, safety-6)
advmod(safety-6, optionally-8)
det(roof-10, a-9)
dep(safety-6, roof-10)
nsubj(unlikely-14, lightning-12)
cop(unlikely-14, is-13)
dep(roof-10, unlikely-14)
aux(hit-16, to-15)
xcomp(unlikely-14, hit-16)
dobj(hit-16, you-17)
nsubj(happen-22, it-20)
aux(happen-22, does-21)
dep(roof-10, happen-22)
conj_but(unlikely-14, happen-22)
nsubj(have-27, you-26)
conj_and(Add-1, have-27)
det(spot-31, a-28)
amod(spot-31, nice-29)
amod(spot-31, secure-30)
dobj(have-27, spot-31)
prep_to(spot-31, fish-33)
prep(have-27, from-34)
dep(during-37, even-36)
prep(have-27, during-37)
conj_and(from-34, during-37)
pobj(during-37, thunderstorms-38)
prep(have-27, at-40)
conj_and(from-34, at-40)
pobj(at-40, night-41)

(ROOT
  (S
    (S
      (S
        (NP (NNP Food))
        (VP
          (VP (VBZ is)
            (ADVP (RB not))
            (VP (VBN required)))
          (, ,)
          (CC but)
          (VP (MD can)
            (VP (VB help)))))
      (, ,)
      (CC and)
      (S
        (NP
          (NP (DT any))
          (PP (IN of)
            (NP (JJ several) (NNS foods))))
        (VP (MD will)
          (VP (VB do)))))
    (, ,)
    (CC but)
    (S
      (NP (NN wheat)
        (CC or)
        (NN bread))
      (VP (VBZ is) (RB probably)
        (ADJP (JJS easiest))))
    (. .)))

nsubjpass(required-4, Food-1)
nsubj(help-8, Food-1)
auxpass(required-4, is-2)
neg(required-4, not-3)
aux(help-8, can-7)
conj_but(required-4, help-8)
nsubj(do-16, any-11)
amod(foods-14, several-13)
prep_of(any-11, foods-14)
aux(do-16, will-15)
conj_and(required-4, do-16)
nsubj(easiest-24, wheat-19)
conj_or(wheat-19, bread-21)
nsubj(easiest-24, bread-21)
cop(easiest-24, is-22)
advmod(easiest-24, probably-23)
conj_but(required-4, easiest-24)

(ROOT
  (S
    (VP (VBN Begin)
      (PP (IN by)
        (S
          (VP (VBG mining)
            (NP (DT some) (NN stone))
            (PP (IN with)
              (NP (PRP$ your) (NN pickaxe)))))))
    (. .)))

prepc_by(Begin-1, mining-3)
det(stone-5, some-4)
dobj(mining-3, stone-5)
poss(pickaxe-8, your-7)
prep_with(mining-3, pickaxe-8)

(ROOT
  (S
    (NP (PRP You))
    (VP (MD should)
      (VP (VB craft)
        (NP (DT a) (NN stone) (NN pickaxe))
        (SBAR (IN because)
          (S
            (NP (PRP it))
            (ADVP
              (NP (NNS mines))
              (RBR faster))
            (VP (CC and)
              (VP (VBZ has)
                (NP (JJR more) (NN durability))))))))
    (. .)))

nsubj(craft-3, You-1)
aux(craft-3, should-2)
det(pickaxe-6, a-4)
nn(pickaxe-6, stone-5)
dobj(craft-3, pickaxe-6)
mark(has-12, because-7)
nsubj(has-12, it-8)
dep(faster-10, mines-9)
advmod(has-12, faster-10)
cc(has-12, and-11)
advcl(craft-3, has-12)
amod(durability-14, more-13)
dobj(has-12, durability-14)

(ROOT
  (S
    (SBAR
      (WHADVP (WRB When))
      (S
        (NP (PRP you))
        (VP (VBP mine)
          (NP (DT a) (NN stone) (NN block)))))
    (, ,)
    (NP (PRP it))
    (VP (MD should)
      (VP (VB drop)
        (NP (DT a) (NN crumbly))
        (S
          (VP (VB block)
            (VP (VBN called)
              (ADJP (JJ cobblestone)))))))
    (. .)))

advmod(mine-3, When-1)
nsubj(mine-3, you-2)
dep(drop-10, mine-3)
det(block-6, a-4)
nn(block-6, stone-5)
dobj(mine-3, block-6)
nsubj(drop-10, it-8)
aux(drop-10, should-9)
det(crumbly-12, a-11)
dobj(drop-10, crumbly-12)
dep(drop-10, block-13)
dep(block-13, called-14)
acomp(called-14, cobblestone-15)

(ROOT
  (S
    (NP (PRP You))
    (VP (MD can) (RB also)
      (VP (VB use)
        (NP (NN cobblestone))
        (S
          (VP (TO to)
            (VP (VB make)
              (NP (NN stone) (NNS weapons)
                (CC and)
                (NNS tools)))))))
    (. .)))

nsubj(use-4, You-1)
aux(use-4, can-2)
advmod(use-4, also-3)
dobj(use-4, cobblestone-5)
aux(make-7, to-6)
xcomp(use-4, make-7)
nn(weapons-9, stone-8)
dobj(make-7, weapons-9)
dobj(make-7, tools-11)
conj_and(weapons-9, tools-11)

(ROOT
  (S
    (NP (PRP You))
    (VP (MD can)
      (VP (VB make)
        (NP (DT a) (NN stone) (NN pickaxe))
        (PP (IN by)
          (S
            (VP (VBG replacing)
              (NP (DT the) (JJ wooden) (NNS planks))
              (PP (IN with)
                (NP (NN cobblestone))))))
        (SBAR
          (WHADVP (WRB when))
          (S
            (VP (VBG making)
              (NP (DT a) (NN pickaxe)))))))
    (. .)))

nsubj(make-3, You-1)
aux(make-3, can-2)
det(pickaxe-6, a-4)
nn(pickaxe-6, stone-5)
dobj(make-3, pickaxe-6)
prepc_by(make-3, replacing-8)
det(planks-11, the-9)
amod(planks-11, wooden-10)
dobj(replacing-8, planks-11)
prep_with(replacing-8, cobblestone-13)
advmod(making-15, when-14)
advcl(make-3, making-15)
det(pickaxe-17, a-16)
dobj(making-15, pickaxe-17)

(ROOT
  (S
    (ADVP (RB Also))
    (, ,)
    (NP (PRP it))
    (VP (VBZ 's)
      (NP (DT a) (JJ good) (NN idea)
        (S
          (VP (TO to)
            (VP (VB bring)
              (NP
                (NP (NN iron) (NNS pickaxes))
                (PP (RB instead) (IN of)
                  (NP (NN stone) (NNS pickaxes))))))))
      (, ,)
      (SBAR (IN if)
        (S
          (NP (PRP you))
          (VP (MD can)
            (VP (VB spare)
              (NP (DT the) (NN iron)))))))
    (. .)))

advmod(idea-7, Also-1)
nsubj(idea-7, it-3)
cop(idea-7, 's-4)
det(idea-7, a-5)
amod(idea-7, good-6)
aux(bring-9, to-8)
infmod(idea-7, bring-9)
nn(pickaxes-11, iron-10)
dobj(bring-9, pickaxes-11)
nn(pickaxes-15, stone-14)
prep_instead_of(pickaxes-11, pickaxes-15)
mark(spare-20, if-17)
nsubj(spare-20, you-18)
aux(spare-20, can-19)
advcl(idea-7, spare-20)
det(iron-22, the-21)
dobj(spare-20, iron-22)

(ROOT
  (S
    (SBAR (IN With)
      (S
        (NP
          (NP (DT the) (JJ vast) (NN amount))
          (PP (IN of)
            (NP
              (NP (NN iron))
              (SBAR
                (WHNP (WDT that))
                (S
                  (VP (VBZ is)
                    (PP (IN in)
                      (NP (DT the) (NN world)))
                    (, ,)
                    (SBAR
                      (S
                        (NP (PRP you))
                        (VP (VBP are)
                          (ADJP (JJ likely)
                            (S
                              (VP (TO to)
                                (VP (VB find)
                                  (NP (DT an) (NN iron) (NN pickaxe)))))))))))))))
        (VP (MD will)
          (ADVP (RBR more) (IN than))
          (VP (VB make)
            (PRT (RP up))
            (PP (IN for)
              (NP (PRP itself)))
            (PP (IN in)
              (NP
                (NP (NNS terms))
                (PP (IN of)
                  (NP (NN iron) (NN mined)))))))))
    (, ,)
    (SBAR (IN if)
      (S
        (NP (PRP you))
        (VP (VBP use)
          (NP (DT a) (NN stone) (NN pickaxe))
          (SBAR
            (S
              (NP (PRP it))
              (VP (VBZ goes)
                (PP (IN by)
                  (ADVP (RB slowly)))))))))
    (, ,)
    (ADVP (RB so))
    (PP (IN in)
      (NP (NN theory)))
    (NP (PRP you))
    (VP (VBP are)
      (VP (VBG wasting)
        (NP (NN iron))
        (SBAR (IN if)
          (S
            (NP (PRP you))
            (VP (VBP do) (RB n't)
              (VP (VB use)
                (NP (DT an) (NN iron) (NN pickaxe))))))))
    (. .)))

mark(make-24, With-1)
det(amount-4, the-2)
amod(amount-4, vast-3)
nsubj(make-24, amount-4)
prep_of(amount-4, iron-6)
nsubj(is-8, iron-6)
rcmod(iron-6, is-8)
det(world-11, the-10)
prep_in(is-8, world-11)
nsubj(likely-15, you-13)
cop(likely-15, are-14)
ccomp(is-8, likely-15)
aux(find-17, to-16)
xcomp(likely-15, find-17)
det(pickaxe-20, an-18)
nn(pickaxe-20, iron-19)
dobj(find-17, pickaxe-20)
aux(make-24, will-21)
advmod(make-24, more-22)
dep(more-22, than-23)
advcl(wasting-50, make-24)
prt(make-24, up-25)
prep_for(make-24, itself-27)
prep_in(make-24, terms-29)
nn(mined-32, iron-31)
prep_of(terms-29, mined-32)
mark(use-36, if-34)
nsubj(use-36, you-35)
dep(wasting-50, use-36)
det(pickaxe-39, a-37)
nn(pickaxe-39, stone-38)
dobj(use-36, pickaxe-39)
nsubj(goes-41, it-40)
dep(use-36, goes-41)
prep(goes-41, by-42)
dep(by-42, slowly-43)
advmod(wasting-50, so-45)
prep_in(wasting-50, theory-47)
nsubj(wasting-50, you-48)
aux(wasting-50, are-49)
dobj(wasting-50, iron-51)
mark(use-56, if-52)
nsubj(use-56, you-53)
aux(use-56, do-54)
neg(use-56, n't-55)
advcl(wasting-50, use-56)
det(pickaxe-59, an-57)
nn(pickaxe-59, iron-58)
dobj(use-56, pickaxe-59)

(ROOT
  (S
    (SBAR
      (WHADVP (WRB When))
      (S
        (NP (PRP you))
        (VP (VB obtain)
          (NP (DT a) (NN diamond) (NN pickaxe)))))
    (NP (PRP you))
    (VP (MD should)
      (VP (VB use)
        (NP (PRP it))
        (SBAR (IN till)
          (S
            (NP (PRP it))
            (VP (VBZ breaks) (, ,)
              (NP (PRP$ its)
                (ADJP (DT the) (JJ same))
                (NN argument))
              (PP (IN as)
                (NP (NN iron))))))))
    (. .)))

advmod(obtain-3, When-1)
nsubj(obtain-3, you-2)
dep(use-9, obtain-3)
det(pickaxe-6, a-4)
nn(pickaxe-6, diamond-5)
dobj(obtain-3, pickaxe-6)
nsubj(use-9, you-7)
aux(use-9, should-8)
dobj(use-9, it-10)
mark(breaks-13, till-11)
nsubj(breaks-13, it-12)
advcl(use-9, breaks-13)
poss(argument-18, its-15)
dep(same-17, the-16)
amod(argument-18, same-17)
dobj(breaks-13, argument-18)
prep_as(breaks-13, iron-20)

(ROOT
  (S
    (SBAR (IN If)
      (S
        (NP (PRP you))
        (VP (VBP keep)
          (VP (VBG losing)
            (NP (PRP$ your) (NN way))))))
    (, ,)
    (VP (VB try)
      (S
        (VP (VBG marking)
          (NP (PRP$ your) (NN path))
          (PP (IN with)
            (NP
              (NP
                (NP (NNS torches))
                (CC or)
                (NP (DT a) (JJ unique) (NN entity)))
              (, ,)
              (PP (JJ such) (IN as)
                (NP
                  (NP (NNS signs))
                  (CC or)
                  (NP (JJ birch) (NNS planks)))))))))
    (. .)))

mark(keep-3, If-1)
nsubj(keep-3, you-2)
advcl(try-8, keep-3)
dep(keep-3, losing-4)
poss(way-6, your-5)
dobj(losing-4, way-6)
xcomp(try-8, marking-9)
poss(path-11, your-10)
dobj(marking-9, path-11)
prep_with(marking-9, torches-13)
det(entity-17, a-15)
amod(entity-17, unique-16)
prep_with(marking-9, entity-17)
conj_or(torches-13, entity-17)
prep_such_as(torches-13, signs-21)
amod(planks-24, birch-23)
prep_such_as(torches-13, planks-24)
conj_or(signs-21, planks-24)

(ROOT
  (S
    (S
      (VP (VBG Carving)
        (PRT (RP out))
        (NP
          (NP (DT a) (JJ safe) (NN room))
          (PP (VBG containing)
            (NP
              (NP (NNS furnaces))
              (, ,)
              (NP (DT a) (VBG crafting) (NN table)))))))
    (, ,)
    (NP
      (NP (DT a) (NN bed))
      (CC and)
      (NP (DT a) (NN chest)))
    (VP (MD might)
      (VP (VB be)
        (PP (JJ worth)
          (NP (PRP$ your) (NN time)))))
    (. .)))

dep(be-19, Carving-1)
prt(Carving-1, out-2)
det(room-5, a-3)
amod(room-5, safe-4)
dobj(Carving-1, room-5)
prep_containing(room-5, furnaces-7)
det(table-11, a-9)
amod(table-11, crafting-10)
appos(furnaces-7, table-11)
det(bed-14, a-13)
nsubj(be-19, bed-14)
det(chest-17, a-16)
conj_and(bed-14, chest-17)
nsubj(be-19, chest-17)
aux(be-19, might-18)
prep(be-19, worth-20)
poss(time-22, your-21)
dep(worth-20, time-22)

(ROOT
  (S
    (VP (VB Be)
      (ADJP (JJ careful))
      (SBAR
        (WHADVP (WRB where))
        (S
          (S
            (NP (PRP you))
            (VP (VBP place)
              (NP (NNS rails))))
          (, ,)
          (CC and)
          (S
            (NP (PRP you))
            (VP (MD may)
              (VP (VB want)
                (S
                  (VP (TO to)
                    (VP (VB protect)
                      (NP
                        (NP (DT some))
                        (PP (IN of)
                          (NP (PRP them))))
                      (PP (IN with)
                        (NP
                          (NP (NNS fences))
                          (CC or)
                          (RB even)
                          (NP (NN stone)))))))))))))
    (. .)))

cop(careful-2, Be-1)
advmod(place-5, where-3)
nsubj(place-5, you-4)
advcl(careful-2, place-5)
dobj(place-5, rails-6)
dobj(want-11, rails-6)
nsubj(want-11, you-9)
xsubj(protect-13, you-9)
aux(want-11, may-10)
advcl(careful-2, want-11)
conj_and(place-5, want-11)
aux(protect-13, to-12)
xcomp(want-11, protect-13)
dobj(protect-13, some-14)
prep_of(some-14, them-16)
prep_with(protect-13, fences-18)
prep_with(protect-13, even-20)
advmod(fences-18, even-20)
conj_or(fences-18, even-20)
dep(fences-18, stone-21)

(ROOT
  (S
    (NP (NNS Caves))
    (VP (VBP offer)
      (NP
        (NP (DT the) (NN advantage))
        (SBAR (IN that)
          (S
            (NP
              (NP (DT a) (JJ great) (NN deal))
              (PP (IN of)
                (NP (NN stone))))
            (VP (VBZ has) (RB already)
              (VP (VBN been)
                (VP (VBN excavated)
                  (PP (IN for)
                    (NP (PRP you)))
                  (, ,)
                  (S
                    (VP (VBG exposing)
                      (NP (JJ many) (NN ore) (NNS veins)))))))))))
    (. .)))

nsubj(offer-2, Caves-1)
det(advantage-4, the-3)
dobj(offer-2, advantage-4)
complm(excavated-14, that-5)
det(deal-8, a-6)
amod(deal-8, great-7)
nsubjpass(excavated-14, deal-8)
prep_of(deal-8, stone-10)
aux(excavated-14, has-11)
advmod(excavated-14, already-12)
auxpass(excavated-14, been-13)
dep(advantage-4, excavated-14)
prep_for(excavated-14, you-16)
xcomp(excavated-14, exposing-18)
amod(veins-21, many-19)
nn(veins-21, ore-20)
dobj(exposing-18, veins-21)

(ROOT
  (S
    (NP (PRP It))
    (VP (VBZ is)
      (NP
        (NP (DT a) (JJ good) (NN idea))
        (PP (TO to)
          (NP (JJ mine) (NN everything))))
      (PP (IN out)
        (S
          (VP (VBG including)
            (NP (NN coal)))))
      (SBAR (IN as)
        (S
          (NP (PRP you))
          (ADVP (RB never))
          (VP
            (VP (VBP know)
              (SBAR
                (WHADVP (WRB when))
                (S
                  (NP (PRP you))
                  (VP (MD might)
                    (VP (VB be)
                      (VP (VBN lost)))))))
            (CC and)
            (VP (VBP need)
              (NP (JJR more) (NNS torches)))))))
    (. .)))

nsubj(idea-5, It-1)
cop(idea-5, is-2)
det(idea-5, a-3)
amod(idea-5, good-4)
amod(everything-8, mine-7)
prep_to(idea-5, everything-8)
prepc_out(idea-5, including-10)
dobj(including-10, coal-11)
mark(know-15, as-12)
nsubj(know-15, you-13)
nsubj(need-22, you-13)
neg(know-15, never-14)
advcl(idea-5, know-15)
advmod(lost-20, when-16)
nsubjpass(lost-20, you-17)
aux(lost-20, might-18)
auxpass(lost-20, be-19)
advcl(know-15, lost-20)
advcl(idea-5, need-22)
conj_and(know-15, need-22)
amod(torches-24, more-23)
dobj(need-22, torches-24)

(ROOT
  (S
    (NP (NNP Cave) (NN mining))
    (VP (VBZ has)
      (NP
        (NP (DT a) (JJ high) (NN return))
        (PP (IN on)
          (NP (NN investment)))
        (, ,)
        (VP
          (VP (VBG yielding)
            (NP
              (NP (JJR more) (NN ore))
              (PP (IN per)
                (NP
                  (NP (NN time))
                  (VP (VBN spent))))))
          (CC and)
          (VP (VBG requiring)
            (NP (JJR fewer) (NNS tools)))))
      (PRN (-LRB- -LRB-)
        (S
          (NP
            (NP (JJR less) (NN pickaxe))
            (CC and)
            (NP (NN shovel) (NN durability)))
          (VP (VBZ is)
            (VP (VBN lost)
              (NP
                (NP (NN mining) (NN stone))
                (, ,)
                (NP (NN dirt))
                (, ,)
                (CC and)
                (NP (NN gravel))))))
        (-RRB- -RRB-))
      (PP (IN than)
        (NP (JJ other) (NNS approaches))))
    (. .)))

nn(mining-2, Cave-1)
nsubj(return-6, mining-2)
dep(return-6, has-3)
det(return-6, a-4)
amod(return-6, high-5)
prep_on(return-6, investment-8)
dep(return-6, yielding-10)
amod(ore-12, more-11)
dobj(yielding-10, ore-12)
prep_per(ore-12, time-14)
partmod(time-14, spent-15)
dep(return-6, requiring-17)
conj_and(yielding-10, requiring-17)
amod(tools-19, fewer-18)
dobj(requiring-17, tools-19)
amod(pickaxe-22, less-21)
nsubjpass(lost-27, pickaxe-22)
nn(durability-25, shovel-24)
conj_and(pickaxe-22, durability-25)
nsubjpass(lost-27, durability-25)
auxpass(lost-27, is-26)
parataxis(return-6, lost-27)
nn(stone-29, mining-28)
dobj(lost-27, stone-29)
dobj(lost-27, dirt-31)
conj_and(stone-29, dirt-31)
dobj(lost-27, gravel-34)
conj_and(stone-29, gravel-34)
amod(approaches-38, other-37)
prep_than(return-6, approaches-38)

(ROOT
  (S
    (NP
      (NP (DT A) (NN bucket))
      (PP (IN of)
        (NP (NN water))))
    (VP (VBZ serves)
      (PP (IN as)
        (NP (PDT both) (DT a) (NN fire) (NN extinguisher)))
      (, ,)
      (SBAR (IN if)
        (S
          (NP (PRP you))
          (VP (VBP fall)
            (PP
              (PP (IN in))
              (: ;)
              (CC and)
              (PP (IN as)
                (NP (DT a) (NN way)
                  (S
                    (VP (TO to)
                      (VP (VB form)
                        (NP (NN obsidian) (NNS surfaces))
                        (PP (IN over)
                          (NP (NN lava) (NNS pools)))
                        (PRN (-LRB- -LRB-)
                          (S
                            (VP (VB pour)
                              (NP (NN water))
                              (PP (IN onto)
                                (NP
                                  (NP (DT a) (JJ solid) (NN block))
                                  (ADJP (JJ adjacent)
                                    (PP (TO to)
                                      (NP
                                        (NP (DT a) (NN lava) (NN pool))
                                        (: ;)
                                        (SBAR
                                          (S
                                            (VP (VBP do) (RB not)
                                              (VP (VB stand)
                                                (PP (IN between)
                                                  (NP
                                                    (NP (DT that) (NN spot))
                                                    (CC and)
                                                    (NP (DT the) (NN lava)))))))))))))))
                          (-RRB- -RRB-))))))))))))
    (. .)))

det(bucket-2, A-1)
nsubj(serves-5, bucket-2)
prep_of(bucket-2, water-4)
predet(extinguisher-10, both-7)
det(extinguisher-10, a-8)
nn(extinguisher-10, fire-9)
prep_as(serves-5, extinguisher-10)
mark(fall-14, if-12)
nsubj(fall-14, you-13)
advcl(serves-5, fall-14)
prep(fall-14, in-15)
prep(fall-14, as-18)
conj_and(in-15, as-18)
det(way-20, a-19)
pobj(as-18, way-20)
aux(form-22, to-21)
infmod(way-20, form-22)
nn(surfaces-24, obsidian-23)
dobj(form-22, surfaces-24)
nn(pools-27, lava-26)
prep_over(form-22, pools-27)
parataxis(form-22, pour-29)
dobj(pour-29, water-30)
det(block-34, a-32)
amod(block-34, solid-33)
prep_onto(pour-29, block-34)
amod(block-34, adjacent-35)
det(pool-39, a-37)
nn(pool-39, lava-38)
prep_to(adjacent-35, pool-39)
aux(stand-43, do-41)
neg(stand-43, not-42)
rcmod(pool-39, stand-43)
det(spot-46, that-45)
prep_between(stand-43, spot-46)
det(lava-49, the-48)
prep_between(stand-43, lava-49)
conj_and(spot-46, lava-49)

(ROOT
  (S
    (SBAR (IN If)
      (S
        (NP (PRP it))
        (VP (VBZ is)
          (NP (PRP$ your) (JJ first) (NN mining) (NN trip)))))
    (, ,)
    (NP (PRP mine))
    (VP
      (VP
        (ADVP (DT some))
        (VBP cobblestone))
      (CC and)
      (VP (VB make)
        (NP (DT a) (NN stone) (NN pickaxe))))
    (. .)))

mark(trip-7, If-1)
nsubj(trip-7, it-2)
cop(trip-7, is-3)
poss(trip-7, your-4)
amod(trip-7, first-5)
nn(trip-7, mining-6)
advcl(cobblestone-11, trip-7)
nsubj(cobblestone-11, mine-9)
nsubj(make-13, mine-9)
advmod(cobblestone-11, some-10)
conj_and(cobblestone-11, make-13)
det(pickaxe-16, a-14)
nn(pickaxe-16, stone-15)
dobj(make-13, pickaxe-16)

(ROOT
  (S
    (SBAR (IN If)
      (S
        (NP (PRP you))
        (VP (VBP are)
          (ADVP (RBR further) (RB along))
          (PP (IN in)
            (NP (DT the) (NN game))))))
    (, ,)
    (NP (CC and))
    (VP (VBP expect)
      (PP (TO to)
        (NP (NN mine)))
      (PP (IN for)
        (NP (DT a) (NN while)))
      (, ,)
      (S
        (VP (VB bring)
          (NP
            (NP (CD two) (NN iron) (NNS pickaxes))
            (CC and)
            (NP
              (QP (IN at) (JJS least) (CD 12))
              (NN stone) (NNS pickaxes))))))
    (. .)))

mark(are-3, If-1)
nsubj(are-3, you-2)
advcl(expect-11, are-3)
advmod(along-5, further-4)
advmod(are-3, along-5)
det(game-8, the-7)
prep_in(are-3, game-8)
nsubj(expect-11, and-10)
prep_to(expect-11, mine-13)
det(while-16, a-15)
prep_for(expect-11, while-16)
ccomp(expect-11, bring-18)
num(pickaxes-21, two-19)
nn(pickaxes-21, iron-20)
dobj(bring-18, pickaxes-21)
quantmod(12-25, at-23)
dep(at-23, least-24)
num(pickaxes-27, 12-25)
nn(pickaxes-27, stone-26)
dobj(bring-18, pickaxes-27)
conj_and(pickaxes-21, pickaxes-27)

(ROOT
  (S
    (SBAR (IN If)
      (S
        (NP (PRP you))
        (VP (VBP prefer)
          (S
            (VP (TO to)
              (VP
                (VP (VB save)
                  (NP (JJ valuable) (NNS materials)))
                (, ,)
                (VP (VB take)
                  (NP (DT a) (JJ few) (NN stone)))))))))
    (NP
      (NP (NNS pickaxes))
      (PP (IN for)
        (NP
          (NP (NN mining) (NN stone))
          (CC and)
          (NP (CD one) (NN iron)))))
    (VP (VBP pickaxe)
      (ADVP (RB only))
      (PP (IN for)
        (NP (NN mining) (NNS ores))))
    (. .)))

mark(prefer-3, If-1)
nsubj(prefer-3, you-2)
xsubj(save-5, you-2)
advcl(pickaxe-20, prefer-3)
aux(save-5, to-4)
xcomp(prefer-3, save-5)
amod(materials-7, valuable-6)
dobj(save-5, materials-7)
dep(save-5, take-9)
det(stone-12, a-10)
amod(stone-12, few-11)
dobj(take-9, stone-12)
nsubj(pickaxe-20, pickaxes-13)
nn(stone-16, mining-15)
prep_for(pickaxes-13, stone-16)
num(iron-19, one-18)
prep_for(pickaxes-13, iron-19)
conj_and(stone-16, iron-19)
advmod(pickaxe-20, only-21)
nn(ores-24, mining-23)
prep_for(pickaxe-20, ores-24)

(ROOT
  (S
    (S
      (VP (VBG Having)
        (NP
          (QP (IN at) (JJS least) (CD one))
          (NN iron) (NN shovel))))
    (VP (MD can)
      (VP (VB get)
        (PP (IN through)
          (NP
            (NP (JJ cumbersome) (NNS patches))
            (PP (IN of)
              (NP (NN dirt)
                (CC and)
                (NN gravel)))))
        (ADVP (RB quickly))
        (PP (IN without)
          (S
            (VP (VBG using)
              (NP (PRP$ your) (NNS hands)))))))
    (. .)))

csubj(get-8, Having-1)
quantmod(one-4, at-2)
dep(at-2, least-3)
num(shovel-6, one-4)
nn(shovel-6, iron-5)
dobj(Having-1, shovel-6)
aux(get-8, can-7)
amod(patches-11, cumbersome-10)
prep_through(get-8, patches-11)
prep_of(patches-11, dirt-13)
prep_of(patches-11, gravel-15)
conj_and(dirt-13, gravel-15)
advmod(get-8, quickly-16)
prepc_without(get-8, using-18)
poss(hands-20, your-19)
dobj(using-18, hands-20)

(ROOT
  (S
    (NP
      (QP (RB Just) (CD one)
        (CC or)
        (CD two))
      (NN stone) (NNS shovels))
    (ADVP (RB also))
    (VP (VBZ works)
      (SBAR (IN if)
        (S
          (NP (PRP you))
          (VP (VBP want)
            (S
              (VP (TO to)
                (VP (VB use)
                  (NP (PRP$ your) (NN iron))
                  (PP (IN for)
                    (NP (JJ other) (NNS things))))))))))
    (. .)))

quantmod(one-2, Just-1)
num(shovels-6, one-2)
conj_or(one-2, two-4)
num(shovels-6, two-4)
nn(shovels-6, stone-5)
nsubj(works-8, shovels-6)
advmod(works-8, also-7)
mark(want-11, if-9)
nsubj(want-11, you-10)
xsubj(use-13, you-10)
advcl(works-8, want-11)
aux(use-13, to-12)
xcomp(want-11, use-13)
poss(iron-15, your-14)
dobj(use-13, iron-15)
amod(things-18, other-17)
prep_for(use-13, things-18)

(ROOT
  (S
    (S
      (SBAR (IN If)
        (S
          (NP (PRP you))
          (VP (VBP run)
            (PRT (RP out))
            (PP (IN of)
              (NP (NNS tools)
                (CC or)
                (NNS torches))))))
      (, ,)
      (NP (PRP you))
      (VP
        (VP (MD can)
          (VP (VB make)
            (NP (DT a) (VBG crafting) (NN table))))
        (CC and)
        (VP (VBZ sticks)
          (S
            (VP (TO to)
              (VP (VB replenish)
                (NP
                  (NP (PRP$ your) (NNS supplies))
                  (PP (IN of)
                    (NP
                      (NP (NNS pickaxes))
                      (, ,)
                      (NP (NNS shovels))
                      (, ,)
                      (CC and)
                      (NP (NNS torches)))))))))))
    (PRN (-LRB- -LRB-)
      (S
        (NP (PRP you))
        (VP (MD can)
          (VP (VB get)
            (NP (JJR more) (NN coal))
            (PP (IN for)
              (NP (PRP them)))
            (PP (IN from)
              (NP (NN mining))))))
      (-RRB- -RRB-))
    (. .)))

mark(run-3, If-1)
nsubj(run-3, you-2)
advcl(make-12, run-3)
prep_out_of(run-3, tools-6)
prep_out_of(run-3, torches-8)
conj_or(tools-6, torches-8)
nsubj(make-12, you-10)
nsubj(sticks-17, you-10)
xsubj(replenish-19, you-10)
aux(make-12, can-11)
det(table-15, a-13)
amod(table-15, crafting-14)
dobj(make-12, table-15)
dobj(sticks-17, table-15)
conj_and(make-12, sticks-17)
aux(replenish-19, to-18)
xcomp(sticks-17, replenish-19)
poss(supplies-21, your-20)
dobj(replenish-19, supplies-21)
prep_of(supplies-21, pickaxes-23)
prep_of(supplies-21, shovels-25)
conj_and(pickaxes-23, shovels-25)
prep_of(supplies-21, torches-28)
conj_and(pickaxes-23, torches-28)
nsubj(get-32, you-30)
aux(get-32, can-31)
dep(make-12, get-32)
amod(coal-34, more-33)
dobj(get-32, coal-34)
prep_for(get-32, them-36)
prep_from(get-32, mining-38)

(ROOT
  (S
    (S
      (NP (DT A) (JJ spare) (NN bucket))
      (VP (VBZ is)
        (ADJP (JJ useful)
          (PP (IN for)
            (S
              (VP (VBG collecting)
                (NP (NN lava))
                (S
                  (VP (TO to)
                    (VP (VB use)
                      (PP (IN as)
                        (NP (NN fuel)))
                      (PP (IN in)
                        (NP (DT a) (NN furnace)))
                      (, ,)
                      (S
                        (VP (TO to)
                          (VP (VB block)
                            (PP (CC or)
                              (NP (NN slaughter) (NNS monsters)))))))))))))
        (PRN (-LRB- -LRB-)
          (S
            (NP (PRP you))
            (VP (MD 'll)
              (VP (VB lose)
                (NP
                  (NP (JJS most))
                  (PP (IN of)
                    (NP (PRP$ their) (NNS drops)))))))
          (-RRB- -RRB-))))
    (, ,)
    (CC or)
    (S (RB just)
      (VP (TO to)
        (VP (VB get)
          (NP (DT the) (NN lava))
          (PRT (RP out))
          (PP (IN of)
            (NP (PRP$ your) (NN way))))))
    (. .)))

det(bucket-3, A-1)
amod(bucket-3, spare-2)
nsubj(useful-5, bucket-3)
nsubj(get-35, bucket-3)
cop(useful-5, is-4)
prepc_for(useful-5, collecting-7)
dobj(collecting-7, lava-8)
aux(use-10, to-9)
xcomp(collecting-7, use-10)
prep_as(use-10, fuel-12)
det(furnace-15, a-14)
prep_in(use-10, furnace-15)
aux(block-18, to-17)
xcomp(use-10, block-18)
prep(block-18, or-19)
nn(monsters-21, slaughter-20)
dep(or-19, monsters-21)
nsubj(lose-25, you-23)
aux(lose-25, 'll-24)
parataxis(useful-5, lose-25)
dobj(lose-25, most-26)
poss(drops-29, their-28)
prep_of(most-26, drops-29)
advmod(get-35, just-33)
aux(get-35, to-34)
conj_or(useful-5, get-35)
det(lava-37, the-36)
dobj(get-35, lava-37)
poss(way-41, your-40)
prep_out_of(get-35, way-41)

(ROOT
  (S
    (SBAR (IN If)
      (S
        (NP (EX there))
        (VP (VBP are)
          (S
            (NP (NNS mushrooms))
            (ADJP (JJ present))))))
    (, ,)
    (NP (PRP you))
    (VP (MD might)
      (VP
        (VP (VB carry))
        (CC or)
        (VP (VB make)
          (NP (DT a) (NN bowl)
            (S
              (VP (TO to)
                (VP (VB make)
                  (NP (NN mushroom) (NN stew)))))))))
    (. .)))

mark(are-3, If-1)
expl(are-3, there-2)
advcl(carry-9, are-3)
nsubj(present-5, mushrooms-4)
xcomp(are-3, present-5)
nsubj(carry-9, you-7)
nsubj(make-11, you-7)
aux(carry-9, might-8)
conj_or(carry-9, make-11)
det(bowl-13, a-12)
dobj(make-11, bowl-13)
aux(make-15, to-14)
infmod(bowl-13, make-15)
nn(stew-17, mushroom-16)
dobj(make-15, stew-17)

(ROOT
  (S
    (S
      (PP (IN In)
        (ADJP (JJ general)))
      (, ,)
      (NP (PRP you))
      (VP (VBP want)
        (NP
          (QP (IN at) (JJS least) (NN iron))
          (NN armor))))
    (: --)
    (S
      (SBAR (IN if)
        (FRAG
          (ADJP (JJ necessary))))
      (, ,)
      (NP (PRP you))
      (VP (MD can)
        (VP (VBN smelt)
          (S
            (VP (NN ore)
              (CC and)
              (NN craft)
              (NP (PRP$ your) (NN armor))))
          (PP (IN in)
            (NP (DT the) (NNS caves))))))
    (. .)))

prep_in(want-5, general-2)
nsubj(want-5, you-4)
quantmod(iron-8, at-6)
quantmod(iron-8, least-7)
num(armor-9, iron-8)
dobj(want-5, armor-9)
mark(necessary-12, if-11)
advcl(smelt-16, necessary-12)
nsubj(smelt-16, you-14)
aux(smelt-16, can-15)
parataxis(want-5, smelt-16)
ccomp(smelt-16, ore-17)
ccomp(smelt-16, craft-19)
conj_and(ore-17, craft-19)
poss(armor-21, your-20)
dobj(ore-17, armor-21)
det(caves-24, the-23)
prep_in(smelt-16, caves-24)

(ROOT
  (S
    (NP (NNS Chests))
    (VP (VBP are)
      (ADJP (JJ invaluable))
      (SBAR
        (SBAR
          (WHADVP (WRB when))
          (S
            (S
              (VP (VBG exploring)
                (NP
                  (NP
                    (NP (NN lava) (NNS caves))
                    (SBAR (IN since)
                      (S
                        (NP (PRP you))
                        (VP (MD can)
                          (VP (VB store)
                            (NP (PRP$ your) (NNS items))
                            (PP (IN in)
                              (NP (NN case)))
                            (SBAR
                              (S
                                (NP (PRP you))
                                (VP (VB die) (: ;)
                                  (ADVP (RB instead))))))))))
                  (PP (IN of)
                    (S
                      (VP (VBG losing)
                        (S
                          (NP
                            (NP (DT a) (NN whole) (VB stack))
                            (PP (IN of)
                              (NP
                                (NP (NN iron))
                                (CC and)
                                (NP (PDT half) (DT a)))))
                          (VP (VB stack))))))
                  (PP (IN of)
                    (NP (NN gold))))
                (PRT (RP along))
                (PP (IN with)
                  (NP
                    (NP (PDT all))
                    (PP (IN of)
                      (NP (PRP$ your) (NN food)
                        (CC and)
                        (NNS weapons)))))))
            (, ,)
            (NP (PRP you))
            (VP (MD can)
              (VP
                (VP (VB drop)
                  (NP
                    (NP (DT a) (NN chest))
                    (CC and)
                    (NP (DT a) (VBG crafting) (NN table)))
                  (ADVP (RB nearby)))
                (, ,)
                (CC and)
                (VP (VB lose)
                  (NP (RB only) (PRP$ your) (JJ current) (NNS tools)))))))
        (CC and)
        (SBAR
          (WHNP (WDT whatever))
          (S
            (NP (PRP you))
            (VP (VBD had) (RB n't)
              (VP (VBD stashed)
                (ADVP (RB yet))))))))
    (. .)))

nsubj(invaluable-3, Chests-1)
cop(invaluable-3, are-2)
advmod(drop-44, when-4)
dep(drop-44, exploring-5)
nn(caves-7, lava-6)
dobj(exploring-5, caves-7)
mark(store-11, since-8)
nsubj(store-11, you-9)
aux(store-11, can-10)
dep(caves-7, store-11)
poss(items-13, your-12)
dobj(store-11, items-13)
prep_in(store-11, case-15)
nsubj(die-17, you-16)
dep(store-11, die-17)
advmod(die-17, instead-19)
prepc_of(caves-7, losing-21)
det(whole-23, a-22)
nsubj(stack-30, whole-23)
dep(whole-23, stack-24)
prep_of(whole-23, iron-26)
predet(a-29, half-28)
prep_of(whole-23, a-29)
conj_and(iron-26, a-29)
ccomp(losing-21, stack-30)
prep_of(caves-7, gold-32)
prep_along_with(exploring-5, all-35)
poss(food-38, your-37)
prep_of(all-35, food-38)
prep_of(all-35, weapons-40)
conj_and(food-38, weapons-40)
nsubj(drop-44, you-42)
nsubj(lose-54, you-42)
aux(drop-44, can-43)
dep(invaluable-3, drop-44)
det(chest-46, a-45)
dobj(drop-44, chest-46)
det(table-50, a-48)
amod(table-50, crafting-49)
dobj(drop-44, table-50)
conj_and(chest-46, table-50)
advmod(drop-44, nearby-51)
dep(invaluable-3, lose-54)
conj_and(drop-44, lose-54)
advmod(tools-58, only-55)
poss(tools-58, your-56)
amod(tools-58, current-57)
dobj(lose-54, tools-58)
dobj(stashed-64, whatever-60)
nsubj(stashed-64, you-61)
aux(stashed-64, had-62)
neg(stashed-64, n't-63)
dep(invaluable-3, stashed-64)
conj_and(drop-44, stashed-64)
advmod(stashed-64, yet-65)

(ROOT
  (S
    (NP (PRP You))
    (VP (MD can)
      (VP (VB create)
        (NP (DT an) (JJ underground) (NN tree) (NN farm))
        (S
          (VP (TO to)
            (VP (VB replenish)
              (NP
                (NP (PRP$ your) (NN supply))
                (PP (IN of)
                  (NP
                    (NP (NN wood))
                    (CC and)
                    (NP (DT a) (JJ small) (NN wheat) (NN farm)))))
              (S
                (VP (TO to)
                  (VP
                    (ADVP (RB continuously))
                    (VB grow)
                    (NP
                      (NP (NN wheat))
                      (PP (IN for)
                        (NP (NN bread)))
                      (, ,)
                      (VP (VBG allowing)
                        (S
                          (NP (PRP you))
                          (VP (TO to)
                            (VP (VB stay)
                              (ADVP (RB underground))
                              (PP (IN for)
                                (NP
                                  (NP (DT an) (JJ infinite) (NN period))
                                  (PP (IN of)
                                    (NP (NN time))))))))))))))))))
    (. .)))

nsubj(create-3, You-1)
aux(create-3, can-2)
det(farm-7, an-4)
amod(farm-7, underground-5)
nn(farm-7, tree-6)
dobj(create-3, farm-7)
aux(replenish-9, to-8)
xcomp(create-3, replenish-9)
poss(supply-11, your-10)
dobj(replenish-9, supply-11)
prep_of(supply-11, wood-13)
det(farm-18, a-15)
amod(farm-18, small-16)
nn(farm-18, wheat-17)
prep_of(supply-11, farm-18)
conj_and(wood-13, farm-18)
aux(grow-21, to-19)
advmod(grow-21, continuously-20)
xcomp(replenish-9, grow-21)
dobj(grow-21, wheat-22)
prep_for(wheat-22, bread-24)
partmod(wheat-22, allowing-26)
nsubj(stay-29, you-27)
aux(stay-29, to-28)
xcomp(allowing-26, stay-29)
advmod(stay-29, underground-30)
det(period-34, an-32)
amod(period-34, infinite-33)
prep_for(stay-29, period-34)
prep_of(period-34, time-36)

(ROOT
  (S
    (NP
      (NP (DT The) (VBG crafting) (NN recipe))
      (PP (IN for)
        (NP (JJ wooden) (NNS doors))))
    (VP (VBZ creates)
      (NP
        (NP (CD three) (NNS doors))
        (PP
          (PP (IN from)
            (NP
              (NP (CD six) (NN wood) (NNS planks))
              (, ,)
              (SBAR
                (S
                  (NP (RB hence) (DT each) (NN door))
                  (VP (VBZ uses)
                    (NP
                      (NP (CD two) (NN wood) (NNS planks))
                      (: -)
                      (NP (DT the)
                        (ADJP (JJ same)
                          (PP (IN as)
                            (SBAR
                              (WHNP (WP what))
                              (S
                                (VP (MD would)
                                  (VP (VB be)
                                    (VP (VBN required)
                                      (S
                                        (VP (TO to)
                                          (VP (VB block)
                                            (NP
                                              (NP
                                                (QP (DT a) (CD 2)))
                                              (X (SYM x))))))))))))
                          (NP (CD 1)))
                        (NN hole))))))))
          (CC but)
          (PP (IN with)
            (NP (DT the) (NN ability)
              (S
                (VP (TO to)
                  (VP
                    (VP (VB pass)
                      (PRT (RP through))
                      (PP (IN with)
                        (NP (VB ease))))
                    (, ,)
                    (CC and)
                    (VP (VB return)
                      (PP (IN in)
                        (NP (DT a) (NN hurry)))
                      (SBAR (IN if)
                        (S
                          (NP (EX there))
                          (VP (VBP are)
                            (NP
                              (NP (DT a) (JJ large) (NN number))
                              (PP (IN of)
                                (NP
                                  (NP (NNS mobs))
                                  (PP (IN on)
                                    (NP (DT the) (JJ other) (NN side))))))))))))))))))
    (. .)))

det(recipe-3, The-1)
amod(recipe-3, crafting-2)
nsubj(creates-7, recipe-3)
amod(doors-6, wooden-5)
prep_for(recipe-3, doors-6)
num(doors-9, three-8)
dobj(creates-7, doors-9)
dobj(creates-7, doors-9')
conj_but(doors-9, doors-9')
num(planks-13, six-11)
nn(planks-13, wood-12)
prep_from(doors-9, planks-13)
advmod(door-17, hence-15)
det(door-17, each-16)
nsubj(uses-18, door-17)
rcmod(planks-13, uses-18)
num(planks-21, two-19)
nn(planks-21, wood-20)
dobj(uses-18, planks-21)
det(hole-36, the-23)
amod(hole-36, same-24)
nsubjpass(required-29, what-26)
aux(required-29, would-27)
auxpass(required-29, be-28)
prepc_as(same-24, required-29)
aux(block-31, to-30)
purpcl(required-29, block-31)
quantmod(2-33, a-32)
dobj(block-31, 2-33)
dep(2-33, x-34)
dep(same-24, 1-35)
dep(planks-21, hole-36)
det(ability-40, the-39)
prep_with(doors-9', ability-40)
aux(pass-42, to-41)
infmod(ability-40, pass-42)
prt(pass-42, through-43)
prep_with(pass-42, ease-45)
infmod(ability-40, return-48)
conj_and(pass-42, return-48)
det(hurry-51, a-50)
prep_in(return-48, hurry-51)
mark(are-54, if-52)
expl(are-54, there-53)
advcl(return-48, are-54)
det(number-57, a-55)
amod(number-57, large-56)
nsubj(are-54, number-57)
prep_of(number-57, mobs-59)
det(side-63, the-61)
amod(side-63, other-62)
prep_on(mobs-59, side-63)

