(ROOT
  (S
    (NP (NNS axes))
    (VP (VBP are)
      (NP
        (NP (NNS tools))
        (SBAR
          (S
            (VP
              (VP (VBD used)
                (S
                  (VP (TO to)
                    (VP (VB ease)
                      (NP
                        (NP (DT the) (NN process))
                        (PP (IN of)
                          (S
                            (VP (VBG collecting)
                              (NP (NNS woods) (, ,) (NNS planks) (, ,) (NNS chests)
                                (CC and)
                                (NNS bookcases))))))))))
              (, ,)
              (CC but)
              (VP (VBP are) (RB not)
                (VP (VBN required)
                  (S
                    (VP (TO to)
                      (VP (VB gather)
                        (NP (PRP them))))))))))))
    (. .)))

nsubj(tools-3, axes-1)
cop(tools-3, are-2)
rcmod(tools-3, used-4)
aux(ease-6, to-5)
xcomp(used-4, ease-6)
det(process-8, the-7)
dobj(ease-6, process-8)
prepc_of(process-8, collecting-10)
dobj(collecting-10, woods-11)
dobj(collecting-10, planks-13)
conj_and(woods-11, planks-13)
dobj(collecting-10, chests-15)
conj_and(woods-11, chests-15)
dobj(collecting-10, bookcases-17)
conj_and(woods-11, bookcases-17)
auxpass(required-22, are-20)
neg(required-22, not-21)
rcmod(tools-3, required-22)
conj_but(used-4, required-22)
aux(gather-24, to-23)
xcomp(required-22, gather-24)
dobj(gather-24, them-25)

(ROOT
  (S
    (NP (DT the) (NN axe))
    (VP (VBZ is)
      (VP (VBN used)
        (S
          (VP (TO to)
            (VP (VB break)
              (NP (NN wood)
                (CC and)
                (JJ wooden) (NNS items))
              (ADVP (RBR faster)))))))
    (. .)))

det(axe-2, the-1)
nsubjpass(used-4, axe-2)
xsubj(break-6, axe-2)
auxpass(used-4, is-3)
aux(break-6, to-5)
xcomp(used-4, break-6)
nn(items-10, wood-7)
conj_and(wood-7, wooden-9)
nn(items-10, wooden-9)
dobj(break-6, items-10)
advmod(break-6, faster-11)

(ROOT
  (S
    (ADVP (RB however))
    (, ,)
    (S
      (S
        (VP (VBN given)))
      (NP (JJS most) (NNS players))
      (VP (VBD expend)
        (NP
          (NP
            (ADJP (RB fairly) (JJ large))
            (NNS quantities))
          (PP (IN of)
            (NP (NN wood))))
        (PP (IN through)
          (NP (NN gameplay)))))
    (CC and)
    (S
      (NP
        (NP (DT the) (NN use))
        (PP (IN of)
          (NP
            (NP (NNS axes))
            (PP (IN for)
              (NP (VBG logging)
                (CC and)
                (NN renovation))))))
      (VP (MD will)
        (VP (VB save)
          (NP
            (NP (DT a) (JJ great) (NN deal))
            (PP (IN of)
              (NP (NN time))))
          (PP (IN in)
            (NP (DT the) (JJ long) (NN run))))))
    (. .)))

advmod(expend-6, however-1)
dep(expend-6, given-3)
amod(players-5, most-4)
nsubj(expend-6, players-5)
advmod(large-8, fairly-7)
amod(quantities-9, large-8)
dobj(expend-6, quantities-9)
prep_of(quantities-9, wood-11)
prep_through(expend-6, gameplay-13)
det(use-16, the-15)
nsubj(save-24, use-16)
prep_of(use-16, axes-18)
prep_for(axes-18, logging-20)
prep_for(axes-18, renovation-22)
conj_and(logging-20, renovation-22)
aux(save-24, will-23)
conj_and(expend-6, save-24)
det(deal-27, a-25)
amod(deal-27, great-26)
dobj(save-24, deal-27)
prep_of(deal-27, time-29)
det(run-33, the-31)
amod(run-33, long-32)
prep_in(save-24, run-33)

(ROOT
  (S
    (NP (NNS axes))
    (VP (VBP are)
      (VP (VBN crafted)
        (S
          (VP (VBG using)
            (NP
              (NP (CD 2) (NNS sticks))
              (CC and)
              (NP
                (NP (CD 3) (NNS units))
                (PP (IN of)
                  (NP (DT a) (NN tool) (NN material)))))))))
    (: :) (. .)))

nsubjpass(crafted-3, axes-1)
auxpass(crafted-3, are-2)
xcomp(crafted-3, using-4)
num(sticks-6, 2-5)
dobj(using-4, sticks-6)
num(units-9, 3-8)
dobj(using-4, units-9)
conj_and(sticks-6, units-9)
det(material-13, a-11)
nn(material-13, tool-12)
prep_of(units-9, material-13)

(ROOT
  (S
    (NP (NNS beds))
    (ADVP (RB also))
    (VP (VBD set)
      (NP (PRP$ your) (JJ spawn) (NN point))
      (PP (TO to)
        (NP
          (NP (DT the) (NN location))
          (PP (IN of)
            (NP (DT the) (NN bed))))))
    (. .)))

nsubj(set-3, beds-1)
advmod(set-3, also-2)
poss(point-6, your-4)
amod(point-6, spawn-5)
dobj(set-3, point-6)
det(location-9, the-8)
prep_to(set-3, location-9)
det(bed-12, the-11)
prep_of(location-9, bed-12)

(ROOT
  (S
    (S
      (NP (PRP you))
      (VP (MD can)
        (ADVP (RB even))
        (VP (VB use)
          (NP
            (NP (JJ multiple) (NNS colors))
            (PP (IN of)
              (NP (NN wool)))))))
    (, ,)
    (CC but)
    (S
      (NP (DT the) (NN bed))
      (VP (MD will)
        (VP (VB remain)
          (ADJP (JJ red)))))
    (. .)))

nsubj(use-4, you-1)
aux(use-4, can-2)
advmod(use-4, even-3)
amod(colors-6, multiple-5)
dobj(use-4, colors-6)
prep_of(colors-6, wool-8)
det(bed-12, the-11)
nsubj(red-15, bed-12)
aux(red-15, will-13)
cop(red-15, remain-14)
conj_but(use-4, red-15)

(ROOT
  (S
    (PP (IN like)
      (NP (JJ certain) (JJ other) (NNS blocks)))
    (, ,)
    (NP (NNS beds))
    (VP (MD can) (RB not)
      (VP (VB be)
        (VP (VBN placed)
          (PP (IN on)
            (NP (NN snow)
              (CC or)
              (NN glass))))))
    (. .)))

amod(blocks-4, certain-2)
amod(blocks-4, other-3)
prep_like(placed-10, blocks-4)
nsubjpass(placed-10, beds-6)
aux(placed-10, can-7)
neg(placed-10, not-8)
auxpass(placed-10, be-9)
prep_on(placed-10, snow-12)
prep_on(placed-10, glass-14)
conj_or(snow-12, glass-14)

(ROOT
  (S
    (NP (DT the) (VBG floating) (NN bed) (NN method))
    (VP (VBZ allows)
      (S
        (NP (NNS beds))
        (VP (TO to)
          (VP (VB be)
            (VP (VBN placed)
              (PP
                (PP (IN over)
                  (NP
                    (NP (DT each) (JJ other))
                    (PP (JJ like) (IN with)
                      (NP (NNS fences)))))
                (, ,)
                (CC or)
                (PP (IN for)
                  (NP (NNS beds))))
              (S
                (VP (TO to)
                  (VP (VB be)
                    (VP (VBN placed)
                      (PP (IN on)
                        (NP (NNS blocks)))
                      (SBAR (IN that)
                        (S
                          (NP (PRP they))
                          (VP (MD can) (RB not)
                            (VP (VB be)
                              (ADJP (RB directly) (VBN placed)
                                (PRT (RP upon))))))))))))))))
    (. .)))

det(method-4, the-1)
amod(method-4, floating-2)
nn(method-4, bed-3)
nsubj(allows-5, method-4)
nsubjpass(placed-9, beds-6)
nsubjpass(placed-9', beds-6)
aux(placed-9, to-7)
auxpass(placed-9, be-8)
xcomp(allows-5, placed-9)
xcomp(allows-5, placed-9')
conj_or(placed-9, placed-9')
det(other-12, each-11)
prep_over(placed-9, other-12)
dep(other-12, like-13)
prep_with(other-12, fences-15)
prep_for(placed-9', beds-19)
aux(placed-22, to-20)
auxpass(placed-22, be-21)
purpcl(placed-9, placed-22)
prep_on(placed-22, blocks-24)
complm(placed-31, that-25)
nsubjpass(placed-31, they-26)
aux(placed-31, can-27)
neg(placed-31, not-28)
auxpass(placed-31, be-29)
advmod(placed-31, directly-30)
ccomp(placed-22, placed-31)
dep(placed-31, upon-32)

(ROOT
  (S
    (NP (NNS beds))
    (VP (VBP are)
      (VP (VBN used)
        (PP (IN by)
          (S
            (ADVP (RB right))
            (VP (VBG clicking)
              (NP (DT the) (NN bed))
              (PP (IN during)
                (NP (DT the) (NN night))))))))
    (. .)))

nsubjpass(used-3, beds-1)
auxpass(used-3, are-2)
advmod(clicking-6, right-5)
agent(used-3, clicking-6)
det(bed-8, the-7)
dobj(clicking-6, bed-8)
det(night-11, the-10)
prep_during(clicking-6, night-11)

(ROOT
  (S
    (SBAR (IN if)
      (S
        (NP (PRP you))
        (ADVP (RB ever))
        (VP (VB get)
          (VP (VBN lost)
            (PP (IN in)
              (NP (DT the) (NNS woods)))
            (SBAR
              (WHADVP (WRB when))
              (S
                (NP (PRP it))
                (VP (VBZ turns)
                  (ADJP (JJ dark)))))))))
    (, ,)
    (NP (PRP you))
    (VP (MD can)
      (ADVP (RB safely))
      (VP (VB sleep)
        (PP (IN in)
          (NP (DT a) (NN bed)))
        (PP (IN without)
          (S
            (VP (VBG building)
              (NP (DT a) (NN shelter))
              (ADVP (RB first)))))))
    (. .)))

mark(lost-5, if-1)
nsubjpass(lost-5, you-2)
advmod(lost-5, ever-3)
auxpass(lost-5, get-4)
advcl(sleep-17, lost-5)
det(woods-8, the-7)
prep_in(lost-5, woods-8)
advmod(turns-11, when-9)
nsubj(turns-11, it-10)
advcl(lost-5, turns-11)
acomp(turns-11, dark-12)
nsubj(sleep-17, you-14)
aux(sleep-17, can-15)
advmod(sleep-17, safely-16)
det(bed-20, a-19)
prep_in(sleep-17, bed-20)
prepc_without(sleep-17, building-22)
det(shelter-24, a-23)
dobj(building-22, shelter-24)
advmod(building-22, first-25)

(ROOT
  (S
    (NP (PRP you))
    (VP (MD will)
      (VP (VB need)
        (NP
          (NP
            (NP
              (NP
                (QP (IN at) (JJS least) (CD 5))
                (NN dirt))
              (, ,)
              (NP (CD 1) (NN bed)))
            (: ;)
            (NP
              (NP
                (QP (CC or)
                  (RB as)))
              (VP (VBN described)
                (ADVP (RB earlier)
                  (NP (CD 3) (NN wool))))))
          (CC and)
          (NP
            (NP (CD 3) (JJ wooden) (NNS planks))
            (CC and)
            (NP (CD 1) (JJ crafting) (NN table))))))
    (. .)))

nsubj(need-3, you-1)
aux(need-3, will-2)
quantmod(5-6, at-4)
dep(at-4, least-5)
num(dirt-7, 5-6)
dobj(need-3, dirt-7)
num(bed-10, 1-9)
appos(dirt-7, bed-10)
cc(as-13, or-12)
dep(dirt-7, as-13)
partmod(as-13, described-14)
advmod(described-14, earlier-15)
num(wool-17, 3-16)
dep(earlier-15, wool-17)
num(planks-21, 3-19)
amod(planks-21, wooden-20)
dobj(need-3, planks-21)
conj_and(dirt-7, planks-21)
num(table-25, 1-23)
amod(table-25, crafting-24)
conj_and(dirt-7, table-25)
conj_and(planks-21, table-25)

(ROOT
  (S
    (NP
      (NP (NNS blocks))
      (PP (IN of)
        (NP (NN iron))))
    (VP (VBP are)
      (NP
        (NP (NNS blocks))
        (PP (IN for)
          (S
            (VP (VBG storing)
              (NP
                (NP (NN iron) (NNS ingots))
                (SBAR
                  (WHNP (WDT that))
                  (S
                    (VP (VBP do) (RB not)
                      (VP (VB appear)
                        (PP (IN in)
                          (ADVP (RB normally)))
                        (ADVP
                          (NP (CD generated) (NNS maps))
                          (RB anywhere))))))))))))
    (. .)))

nsubj(blocks-5, blocks-1)
prep_of(blocks-1, iron-3)
cop(blocks-5, are-4)
prepc_for(blocks-5, storing-7)
nn(ingots-9, iron-8)
dobj(storing-7, ingots-9)
nsubj(appear-13, ingots-9)
aux(appear-13, do-11)
neg(appear-13, not-12)
rcmod(ingots-9, appear-13)
prep(appear-13, in-14)
dep(in-14, normally-15)
num(maps-17, generated-16)
dep(anywhere-18, maps-17)
advmod(appear-13, anywhere-18)

(ROOT
  (S
    (NP (NN iron) (NNS blocks))
    (VP (MD can)
      (VP (VB be)
        (VP (VBN made)
          (PP (IN by)
            (S
              (VP (VBG placing)
                (NP (CD 9) (NN iron) (NNS ingots))
                (PP (IN in)
                  (NP (DT a) (JJ crafting) (NN bench)))))))))
    (. .)))

nn(blocks-2, iron-1)
nsubjpass(made-5, blocks-2)
aux(made-5, can-3)
auxpass(made-5, be-4)
agent(made-5, placing-7)
num(ingots-10, 9-8)
nn(ingots-10, iron-9)
dobj(placing-7, ingots-10)
det(bench-14, a-12)
amod(bench-14, crafting-13)
prep_in(placing-7, bench-14)

(ROOT
  (S
    (NP (NN iron) (NNS blocks))
    (VP (MD can)
      (VP (VB be)
        (VP (VBN mined)
          (PP (IN with)
            (NP
              (NP (DT a) (NN stone))
              (, ,)
              (NP (NN iron))
              (, ,)
              (CC or)
              (NP (NN diamond) (NN pickaxe))))
          (, ,)
          (S
            (VP (VBG taking)
              (NP
                (QP (RB about) (CD 2))
                (NNS seconds))
              (S
                (VP (TO to)
                  (VP (VB destroy)))))))))
    (. .)))

nn(blocks-2, iron-1)
nsubjpass(mined-5, blocks-2)
aux(mined-5, can-3)
auxpass(mined-5, be-4)
det(stone-8, a-7)
prep_with(mined-5, stone-8)
prep_with(mined-5, iron-10)
conj_or(stone-8, iron-10)
nn(pickaxe-14, diamond-13)
prep_with(mined-5, pickaxe-14)
conj_or(stone-8, pickaxe-14)
xcomp(mined-5, taking-16)
quantmod(2-18, about-17)
num(seconds-19, 2-18)
dobj(taking-16, seconds-19)
aux(destroy-21, to-20)
xcomp(taking-16, destroy-21)

(ROOT
  (S
    (SBAR (IN if)
      (S
        (NP (DT an) (NN iron) (NN block))
        (VP (VBZ is)
          (VP (VBN broken)
            (PP (IN without)
              (NP (PDT such) (DT a) (NN tool)))))))
    (, ,)
    (NP (PRP it))
    (VP (VBZ drops)
      (NP (NN nothing))
      (, ,)
      (S
        (VP (VBG wasting)
          (NP (DT all) (CD 9) (NNS ingots)))))
    (. .)))

mark(broken-6, if-1)
det(block-4, an-2)
nn(block-4, iron-3)
nsubjpass(broken-6, block-4)
auxpass(broken-6, is-5)
advcl(drops-13, broken-6)
predet(tool-10, such-8)
det(tool-10, a-9)
prep_without(broken-6, tool-10)
nsubj(drops-13, it-12)
dobj(drops-13, nothing-14)
xcomp(drops-13, wasting-16)
det(ingots-19, all-17)
num(ingots-19, 9-18)
dobj(wasting-16, ingots-19)

(ROOT
  (S
    (NP (NN bone) (NN meal))
    (VP
      (VP (VBZ is)
        (VP (VBN crafted)
          (PRT (RP out))
          (PP (IN of)
            (NP (NN skeleton) (NN bone)))))
      (CC and)
      (VP (VBZ is)
        (VP (VBN used)
          (PP (IN for)
            (NP
              (NP (VBG dying) (NN wool))
              (CC and)
              (NP (RB as) (DT a) (NN fertilizer)))))))
    (. .)))

nn(meal-2, bone-1)
nsubjpass(crafted-4, meal-2)
nsubjpass(used-11, meal-2)
auxpass(crafted-4, is-3)
nn(bone-8, skeleton-7)
prep_out_of(crafted-4, bone-8)
auxpass(used-11, is-10)
conj_and(crafted-4, used-11)
amod(wool-14, dying-13)
prep_for(used-11, wool-14)
advmod(fertilizer-18, as-16)
det(fertilizer-18, a-17)
prep_for(used-11, fertilizer-18)
conj_and(wool-14, fertilizer-18)

(ROOT
  (S
    (SBAR
      (WHADVP (WRB when))
      (S
        (VP (VBN applied)
          (PP (TO to)
            (NP (JJ planted) (NN wheat)
              (CC or)
              (NNS saplings))))))
    (, ,)
    (S
      (NP
        (NP (CD one) (NN unit))
        (PP (IN of)
          (NP (NN bone) (NN meal))))
      (VP (VBZ is)
        (VP (VBN consumed))))
    (CC and)
    (S
      (NP (DT the) (NN wheat)
        (CC or)
        (NN sapling))
      (VP (MD will)
        (VP (VB grow)
          (PP (TO to)
            (NP (PRP$ their) (JJ full) (NN size)))
          (ADVP (RB instantly)))))
    (. .)))

advmod(applied-2, when-1)
dep(consumed-15, applied-2)
amod(wheat-5, planted-4)
prep_to(applied-2, wheat-5)
prep_to(applied-2, saplings-7)
conj_or(wheat-5, saplings-7)
num(unit-10, one-9)
nsubjpass(consumed-15, unit-10)
nn(meal-13, bone-12)
prep_of(unit-10, meal-13)
auxpass(consumed-15, is-14)
det(wheat-18, the-17)
nsubj(grow-22, wheat-18)
conj_or(wheat-18, sapling-20)
nsubj(grow-22, sapling-20)
aux(grow-22, will-21)
conj_and(consumed-15, grow-22)
poss(size-26, their-24)
amod(size-26, full-25)
prep_to(grow-22, size-26)
advmod(grow-22, instantly-27)

(ROOT
  (S
    (NP (NNP bowls))
    (VP (VBP are)
      (NP
        (NP (NNS containers))
        (VP (VBN made)
          (PP (IN from)
            (NP
              (NP (JJ wooden) (NNS planks))
              (SBAR
                (WHNP
                  (NP (WP$ whose) (JJ only) (NN use))
                  (PRN (, ,)
                    (ADVP (RB currently))
                    (, ,)))
                (S
                  (VP (VBZ is)
                    (S
                      (VP (TO to)
                        (VP (VB hold)
                          (NP (NN mushroom) (NN stew)))))))))))))
    (. .)))

nsubj(containers-3, bowls-1)
cop(containers-3, are-2)
partmod(containers-3, made-4)
amod(planks-7, wooden-6)
prep_from(made-4, planks-7)
poss(use-10, planks-7)
amod(use-10, only-9)
nsubj(is-14, use-10)
dep(use-10, currently-12)
rcmod(planks-7, is-14)
aux(hold-16, to-15)
xcomp(is-14, hold-16)
nn(stew-18, mushroom-17)
dobj(hold-16, stew-18)

(ROOT
  (S
    (S
      (S
        (NP
          (NP (DT the) (NN bowl))
          (SBAR
            (WHNP (WDT that))
            (S
              (VP (VBZ contains)
                (NP (DT the) (NN mushroom) (NN stew))))))
        (VP (VBZ is)
          (VP (VBN returned)
            (SBAR
              (WHADVP (WRB when))
              (S
                (NP (DT the) (NN stew))
                (VP (VBZ is)
                  (VP (VBN consumed))))))))
      (, ,)
      (CC and)
      (S
        (NP
          (NP (CD 3) (NNS planks))
          (NP (NN craft) (CD 4)))
        (VP (VBZ bowls))))
    (: ;)
    (S
      (ADVP (RB therefore))
      (, ,)
      (NP (PRP they))
      (VP (MD can)
        (VP (VB be)
          (VP
            (VP (VBN crafted)
              (PP (IN in)
                (NP (JJ small) (NNS quantities))))
            (CC and)
            (VP (VBN reused))))))
    (. .)))

det(bowl-2, the-1)
nsubj(contains-4, bowl-2)
nsubjpass(returned-9, bowl-2)
rcmod(bowl-2, contains-4)
det(stew-7, the-5)
nn(stew-7, mushroom-6)
dobj(contains-4, stew-7)
auxpass(returned-9, is-8)
advmod(consumed-14, when-10)
det(stew-12, the-11)
nsubjpass(consumed-14, stew-12)
auxpass(consumed-14, is-13)
advcl(returned-9, consumed-14)
num(planks-18, 3-17)
nsubj(bowls-21, planks-18)
dep(planks-18, craft-19)
num(craft-19, 4-20)
conj_and(returned-9, bowls-21)
advmod(crafted-28, therefore-23)
nsubjpass(crafted-28, they-25)
nsubjpass(reused-33, they-25)
aux(crafted-28, can-26)
auxpass(crafted-28, be-27)
parataxis(returned-9, crafted-28)
amod(quantities-31, small-30)
prep_in(crafted-28, quantities-31)
parataxis(returned-9, reused-33)
conj_and(crafted-28, reused-33)

(ROOT
  (S
    (S
      (NP (PRP it))
      (VP (VBZ is)
        (VP (VBN recommended)
          (S
            (VP (TO to)
              (VP (VB take)
                (NP
                  (NP (NNS stacks))
                  (PP (IN of)
                    (NP (NNS bowls)
                      (CC and)
                      (NNS mushrooms))))
                (PP (IN with)
                  (NP (DT a) (NN workbench)))
                (SBAR (IN as)
                  (S
                    (NP (NNS mushrooms)
                      (CC and)
                      (NNS bowls))
                    (VP (MD can)
                      (VP (VB be)
                        (VP (VBN stacked))))))))))))
    (, ,)
    (CC but)
    (S
      (NP (NN mushroom) (NN stew))
      (VP (MD can) (RB not)))
    (. .)))

nsubjpass(recommended-3, it-1)
xsubj(take-5, it-1)
auxpass(recommended-3, is-2)
aux(take-5, to-4)
xcomp(recommended-3, take-5)
dobj(take-5, stacks-6)
prep_of(stacks-6, bowls-8)
prep_of(stacks-6, mushrooms-10)
conj_and(bowls-8, mushrooms-10)
det(workbench-13, a-12)
prep_with(take-5, workbench-13)
mark(stacked-20, as-14)
nsubjpass(stacked-20, mushrooms-15)
conj_and(mushrooms-15, bowls-17)
nsubjpass(stacked-20, bowls-17)
aux(stacked-20, can-18)
auxpass(stacked-20, be-19)
advcl(take-5, stacked-20)
nn(stew-24, mushroom-23)
nsubj(can-25, stew-24)
conj_but(recommended-3, can-25)
neg(can-25, not-26)

(ROOT
  (S
    (NP (DT the) (NN bowl))
    (VP (VBZ is)
      (VP (VBN used)
        (S
          (VP (TO to)
            (VP (VB hold)
              (NP (NN mushroom) (NN stew)))))))
    (. .)))

det(bowl-2, the-1)
nsubjpass(used-4, bowl-2)
xsubj(hold-6, bowl-2)
auxpass(used-4, is-3)
aux(hold-6, to-5)
xcomp(used-4, hold-6)
nn(stew-8, mushroom-7)
dobj(hold-6, stew-8)

(ROOT
  (S
    (NP (NNP bowls))
    (VP (MD can) (RB not)
      (VP (VB be)
        (VP (VBN used)
          (PP (IN as)
            (NP (NNS buckets)))
          (S
            (VP (TO to)
              (VP
                (VP (VB pick)
                  (PRT (RP up)))
                (, ,)
                (VP (VB place))
                (, ,)
                (CC or)
                (VP (VB hold)
                  (NP (NN water)
                    (CC and)
                    (NN lava)))))))))
    (. .)))

nsubjpass(used-5, bowls-1)
aux(used-5, can-2)
neg(used-5, not-3)
auxpass(used-5, be-4)
prep_as(used-5, buckets-7)
aux(pick-9, to-8)
purpcl(used-5, pick-9)
prt(pick-9, up-10)
purpcl(used-5, place-12)
conj_or(pick-9, place-12)
purpcl(used-5, hold-15)
conj_or(pick-9, hold-15)
dobj(hold-15, water-16)
dobj(hold-15, lava-18)
conj_and(water-16, lava-18)

(ROOT
  (S
    (ADVP (RB however))
    (, ,)
    (NP (DT the) (NN player))
    (VP (VBZ is)
      (VP (VBN allowed)
        (S
          (VP (TO to)
            (VP
              (VP (`` ``) (VB milk) ('' '')
                (NP (NNS mooshrooms)))
              (CC and)
              (VP (VB fill)
                (NP (DT the) (NN bowl))
                (PP (IN with)
                  (NP (NN mushroom) (NN stew)))))))))
    (. .)))

advmod(allowed-6, however-1)
det(player-4, the-3)
nsubjpass(allowed-6, player-4)
xsubj(milk-9, player-4)
auxpass(allowed-6, is-5)
aux(milk-9, to-7)
xcomp(allowed-6, milk-9)
dobj(milk-9, mooshrooms-11)
xcomp(allowed-6, fill-13)
conj_and(milk-9, fill-13)
det(bowl-15, the-14)
dobj(fill-13, bowl-15)
nn(stew-18, mushroom-17)
prep_with(fill-13, stew-18)

(ROOT
  (S
    (NP (NN bread))
    (VP (VBZ has)
      (NP
        (NP (DT the) (NN advantage))
        (PP (IN of)
          (S (RB not)
            (VP (VBG requiring)
              (NP (DT a) (NN furnace)
                (CC or)
                (NN fuel))))))
      (, ,)
      (SBAR (IN although)
        (S
          (S
            (VP (VBG lighting)
              (NP (DT the) (NN farm))
              (PRT (RP up))
              (PP (TO to)
                (NP
                  (NP (DT the) (VBN required) (JJ light) (NN level))
                  (PP (IN of)
                    (NP (CD 9)))
                  (PP (IN for)
                    (NP (JJ constant) (NN crop) (NN growth)))))))
          (VP (MD will)
            (VP (VB consume)
              (NP
                (NP (DT some) (NN amount))
                (PP (IN of)
                  (NP (NN coal)
                    (CC or)
                    (NN charcoal)))))))))
    (. .)))

nsubj(has-2, bread-1)
det(advantage-4, the-3)
dobj(has-2, advantage-4)
neg(requiring-7, not-6)
prepc_of(advantage-4, requiring-7)
det(furnace-9, a-8)
dobj(requiring-7, furnace-9)
dobj(requiring-7, fuel-11)
conj_or(furnace-9, fuel-11)
mark(consume-30, although-13)
csubj(consume-30, lighting-14)
det(farm-16, the-15)
dobj(lighting-14, farm-16)
prt(lighting-14, up-17)
det(level-22, the-19)
amod(level-22, required-20)
amod(level-22, light-21)
prep_to(lighting-14, level-22)
prep_of(level-22, 9-24)
amod(growth-28, constant-26)
nn(growth-28, crop-27)
prep_for(level-22, growth-28)
aux(consume-30, will-29)
advcl(has-2, consume-30)
det(amount-32, some-31)
dobj(consume-30, amount-32)
prep_of(amount-32, coal-34)
prep_of(amount-32, charcoal-36)
conj_or(coal-34, charcoal-36)

(ROOT
  (S
    (NP
      (NP (DT a) (JJ single) (NN application))
      (PP (IN of)
        (NP (NN bonemeal))))
    (VP (VBZ produces)
      (NP (RB only) (DT a) (JJ single) (NN wheat))
      (PRN (: -)
        (NP
          (NP
            (QP (JJ several) (NNS tens)))
          (PP (IN of)
            (NP
              (NP (NNS times))
              (ADJP (RBR less) (JJ efficient))))))
      (PP (IN than)
        (S
          (VP (VBG using)
            (NP (DT that) (NN bonemeal))
            (PP (IN on)
              (NP (DT a) (NN mushroom)))))))
    (. .)))

det(application-3, a-1)
amod(application-3, single-2)
nsubj(produces-6, application-3)
prep_of(application-3, bonemeal-5)
advmod(wheat-10, only-7)
det(wheat-10, a-8)
amod(wheat-10, single-9)
dobj(produces-6, wheat-10)
quantmod(tens-13, several-12)
dep(produces-6, tens-13)
prep_of(tens-13, times-15)
advmod(efficient-17, less-16)
amod(times-15, efficient-17)
prepc_than(produces-6, using-19)
det(bonemeal-21, that-20)
dobj(using-19, bonemeal-21)
det(mushroom-24, a-23)
prep_on(using-19, mushroom-24)

(ROOT
  (S
    (NP (NNS bricks))
    (VP (VBP are)
      (NP
        (NP (NNS items))
        (VP (VBN used)
          (S
            (VP (TO to)
              (VP (VB craft)
                (NP (NN brick) (NNS blocks))))))))
    (. .)))

nsubj(items-3, bricks-1)
cop(items-3, are-2)
xsubj(craft-6, items-3)
partmod(items-3, used-4)
aux(craft-6, to-5)
xcomp(used-4, craft-6)
nn(blocks-8, brick-7)
dobj(craft-6, blocks-8)

(ROOT
  (S
    (NP (NNS bricks))
    (VP (VBD were)
      (VP (VBN added)
        (PP (IN into)
          (NP
            (NP (DT the) (NN game))
            (PP (IN in)
              (NP (NN alpha) (CD 1.0.11)))))
        (PP (IN on)
          (NP
            (UCP
              (NP (NN july) (CD 23))
              (, ,)
              (NP (CD 2010))
              (, ,)
              (PP
                (ADVP (RB along))
                (IN with)
                (NP (JJ clay) (NNS blocks)))
              (CC and)
              (ADVP (RB clay)))
            (NNS balls)))))
    (. .)))

nsubjpass(added-3, bricks-1)
auxpass(added-3, were-2)
det(game-6, the-5)
prep_into(added-3, game-6)
prep_in(game-6, alpha-8)
num(alpha-8, 1.0.11-9)
nn(balls-22, july-11)
num(july-11, 23-12)
conj_and(july-11, 2010-14)
nn(balls-22, 2010-14)
conj_and(july-11, with-17)
nn(balls-22, with-17)
amod(blocks-19, clay-18)
prep_along_with(july-11, blocks-19)
advmod(july-11, clay-21)
conj_and(july-11, clay-21)
nn(balls-22, clay-21)
prep_on(added-3, balls-22)

(ROOT
  (S
    (NP (NNS bricks))
    (VP (VBP are)
      (VP (VBN created)
        (PP (IN from)
          (NP
            (NP (VBG smelting) (NNS pieces))
            (PP (IN of)
              (NP (JJ clay) (NNS balls)))))))
    (. .)))

nsubjpass(created-3, bricks-1)
auxpass(created-3, are-2)
amod(pieces-6, smelting-5)
prep_from(created-3, pieces-6)
amod(balls-9, clay-8)
prep_of(pieces-6, balls-9)

(ROOT
  (S
    (NP (CD four) (NNS bricks))
    (VP (VBP are)
      (VP (VBN required)
        (S
          (VP (TO to)
            (VP (VB make)
              (NP (CD one) (NN brick) (NN block)))))))
    (. .)))

num(bricks-2, four-1)
nsubjpass(required-4, bricks-2)
xsubj(make-6, bricks-2)
auxpass(required-4, are-3)
aux(make-6, to-5)
xcomp(required-4, make-6)
num(block-9, one-7)
nn(block-9, brick-8)
dobj(make-6, block-9)

(ROOT
  (S
    (NP (NN milk))
    (VP (VBZ is)
      (VP (VBN obtained)
        (PP (IN by)
          (S
            (VP (VBG using)
              (NP (DT a) (NN bucket))
              (PP (IN on)
                (NP (DT a) (NN cow))))))))
    (. .)))

nsubjpass(obtained-3, milk-1)
auxpass(obtained-3, is-2)
agent(obtained-3, using-5)
det(bucket-7, a-6)
dobj(using-5, bucket-7)
det(cow-10, a-9)
prep_on(using-5, cow-10)

(ROOT
  (S
    (NP (NNS buckets))
    (VP (VBP are)
      (NP
        (NP (NNS tools))
        (VP (VBN used)
          (PP (IN for)
            (S
              (VP (VBG carrying)
                (NP (NN water) (, ,) (NN lava)
                  (CC or)
                  (NN milk))))))))
    (. .)))

nsubj(tools-3, buckets-1)
cop(tools-3, are-2)
partmod(tools-3, used-4)
prepc_for(used-4, carrying-6)
dobj(carrying-6, water-7)
dobj(carrying-6, lava-9)
conj_or(water-7, lava-9)
dobj(carrying-6, milk-11)
conj_or(water-7, milk-11)

(ROOT
  (S
    (S
      (NP (NN water)
        (CC and)
        (NN lava) (NNS buckets))
      (VP (MD can)
        (ADVP (RB only))
        (VP (VB be)
          (VP (VBN obtained)
            (PP (IN by)
              (S
                (VP (VBG using)
                  (NP (DT the) (NN bucket))
                  (PP (IN on)
                    (NP (DT a) (NN source) (NN block))))))))))
    (: ;)
    (S
      (NP (NN shallow) (, ,) (JJ running) (NNS fluids))
      (VP (MD can) (RB not)
        (VP (VB be)
          (VP (VBN collected)))))
    (. .)))

nn(buckets-4, water-1)
conj_and(water-1, lava-3)
nn(buckets-4, lava-3)
nsubjpass(obtained-8, buckets-4)
aux(obtained-8, can-5)
advmod(obtained-8, only-6)
auxpass(obtained-8, be-7)
agent(obtained-8, using-10)
det(bucket-12, the-11)
dobj(using-10, bucket-12)
det(block-16, a-14)
nn(block-16, source-15)
prep_on(using-10, block-16)
nn(fluids-21, shallow-18)
amod(fluids-21, running-20)
nsubjpass(collected-25, fluids-21)
aux(collected-25, can-22)
neg(collected-25, not-23)
auxpass(collected-25, be-24)
parataxis(obtained-8, collected-25)

(ROOT
  (S
    (NP (NN milk) (NNS buckets))
    (VP (VBP are)
      (VP (VBN collected)
        (PP (IN by)
          (S
            (VP (VBG using)
              (NP (DT the) (NN bucket))
              (PP (IN on)
                (NP (DT a) (NN cow))))))))
    (. .)))

nn(buckets-2, milk-1)
nsubjpass(collected-4, buckets-2)
auxpass(collected-4, are-3)
agent(collected-4, using-6)
det(bucket-8, the-7)
dobj(using-6, bucket-8)
det(cow-11, a-10)
prep_on(using-6, cow-11)

(ROOT
  (S
    (NP (NNS buckets))
    (VP (MD can)
      (VP (VB be)
        (VP
          (VP (VBN crafted)
            (PP (IN from)
              (NP (NN iron))))
          (, ,)
          (CC or)
          (VP (VBN found)
            (PP (IN in)
              (NP (NNS dungeons)))))))
    (. .)))

nsubjpass(crafted-4, buckets-1)
nsubjpass(found-9, buckets-1)
aux(crafted-4, can-2)
auxpass(crafted-4, be-3)
prep_from(crafted-4, iron-6)
conj_or(crafted-4, found-9)
prep_in(found-9, dungeons-11)

(ROOT
  (S
    (NP (EX there))
    (VP (VBZ is)
      (NP
        (NP (DT an)
          (ADJP (CD 80) (NN %))
          (NN chance))
        (PP (IN of)
          (S
            (VP (VBG finding)
              (NP
                (NP (CD one) (NN bucket))
                (PP (IN in)
                  (NP (DT a) (NN dungeon) (NN chest) (NN block)))))))))
    (. .)))

expl(is-2, there-1)
det(chance-6, an-3)
dep(%-5, 80-4)
amod(chance-6, %-5)
nsubj(is-2, chance-6)
prepc_of(chance-6, finding-8)
num(bucket-10, one-9)
dobj(finding-8, bucket-10)
det(block-15, a-12)
nn(block-15, dungeon-13)
nn(block-15, chest-14)
prep_in(bucket-10, block-15)

(ROOT
  (S
    (NP (DT a) (`` ``) (NN bucket) ('' ''))
    (VP (VBZ is)
      (NP
        (NP (DT a) (NN tool))
        (SBAR
          (WHNP (WDT that))
          (S
            (VP (MD can)
              (VP (VB be)
                (VP (VBN used)
                  (PP (IN for)
                    (S
                      (VP (VBG transporting)
                        (CC or)
                        (VBG storing)
                        (NP
                          (NP (NN water))
                          (, ,)
                          (NP (NN milk))
                          (, ,)
                          (CC or)
                          (NP (NN lava)))))))))))))
    (. .)))

det(bucket-3, a-1)
nsubj(tool-7, bucket-3)
cop(tool-7, is-5)
det(tool-7, a-6)
nsubjpass(used-11, tool-7)
aux(used-11, can-9)
auxpass(used-11, be-10)
rcmod(tool-7, used-11)
prepc_for(used-11, transporting-13)
prepc_for(used-11, storing-15)
conj_or(transporting-13, storing-15)
dobj(transporting-13, water-16)
dobj(storing-15, water-16)
dobj(transporting-13, milk-18)
conj_or(water-16, milk-18)
dobj(transporting-13, lava-21)
conj_or(water-16, lava-21)

(ROOT
  (S
    (S
      (NP (DT a) (JJ large) (NN chest))
      (VP (VBZ is)
        (VP (VBN created)
          (PP (IN by)
            (NP
              (NP (NN placement))
              (PP (IN of)
                (NP (CD two) (JJ adjacent) (NN chest) (NNS blocks))))))))
    (, ,)
    (ADVP (RB however))
    (S
      (NP (JJ large) (NNS chests))
      (VP (MD can) (RB not)
        (VP (VB be)
          (VP (VBN created)
            (ADVP (RB directly))
            (PP (IN beside)
              (NP (DT each) (JJ other)))))))
    (. .)))

det(chest-3, a-1)
amod(chest-3, large-2)
nsubjpass(created-5, chest-3)
auxpass(created-5, is-4)
agent(created-5, placement-7)
num(blocks-12, two-9)
amod(blocks-12, adjacent-10)
nn(blocks-12, chest-11)
prep_of(placement-7, blocks-12)
advmod(created-5, however-14)
amod(chests-16, large-15)
nsubjpass(created-20, chests-16)
aux(created-20, can-17)
neg(created-20, not-18)
auxpass(created-20, be-19)
ccomp(created-5, created-20)
advmod(created-20, directly-21)
det(other-24, each-23)
prep_beside(created-20, other-24)

(ROOT
  (S
    (NP (JJ large) (NNS chests))
    (VP
      (VP (VBP have)
        (NP (CD 54) (NN storage) (NNS slots)))
      (CC and)
      (VP (JJ open)
        (PP (IN as)
          (NP
            (NP (DT a) (JJ single) (NN chest))
            (PP (IN with)
              (NP
                (NP (CD six) (NNS rows))
                (PP (IN of)
                  (NP (NNS slots)))))))))
    (. .)))

amod(chests-2, large-1)
nsubj(have-3, chests-2)
nsubj(open-8, chests-2)
num(slots-6, 54-4)
nn(slots-6, storage-5)
dobj(have-3, slots-6)
conj_and(have-3, open-8)
det(chest-12, a-10)
amod(chest-12, single-11)
prep_as(open-8, chest-12)
num(rows-15, six-14)
prep_with(chest-12, rows-15)
prep_of(rows-15, slots-17)

(ROOT
  (S
    (NP (DT these)
      (ADJP (RB naturally) (VBG occurring))
      (NNS chests))
    (VP (VBP are)
      (ADVP (RB currently))
      (NP (DT the) (JJ only) (NN way)
        (S
          (VP (TO to)
            (VP (VB find)
              (NP
                (NP (DT the) (JJ rare) (NNS items) (NNS saddles))
                (, ,)
                (NP (NN cocoa) (NNS beans))
                (, ,)
                (NP (JJ red) (NNS apples))
                (, ,)
                (NP (JJ golden) (NNS apples))
                (, ,)
                (NP (NN melon) (NNS seeds))
                (CC and)
                (NP (NN pumpkin) (NNS seeds))))))))
    (. .)))

det(chests-4, these-1)
advmod(occurring-3, naturally-2)
amod(chests-4, occurring-3)
nsubj(way-9, chests-4)
cop(way-9, are-5)
advmod(way-9, currently-6)
det(way-9, the-7)
amod(way-9, only-8)
aux(find-11, to-10)
infmod(way-9, find-11)
det(saddles-15, the-12)
amod(saddles-15, rare-13)
nn(saddles-15, items-14)
dobj(find-11, saddles-15)
nn(beans-18, cocoa-17)
dobj(find-11, beans-18)
conj_and(saddles-15, beans-18)
amod(apples-21, red-20)
dobj(find-11, apples-21)
conj_and(saddles-15, apples-21)
amod(apples-24, golden-23)
dobj(find-11, apples-24)
conj_and(saddles-15, apples-24)
nn(seeds-27, melon-26)
dobj(find-11, seeds-27)
conj_and(saddles-15, seeds-27)
nn(seeds-30, pumpkin-29)
dobj(find-11, seeds-30)
conj_and(saddles-15, seeds-30)

(ROOT
  (S
    (SBAR (RB even) (IN though)
      (S
        (NP (NNS chests))
        (ADVP (RB often))
        (VP (VB change)
          (PP (IN in)
            (NP (NN appearance)))
          (SBAR
            (WHADVP (WRB when))
            (S
              (NP (VBG surrounding) (NNS blocks))
              (VP (VBP are)
                (VP (VBN added)
                  (CC or)
                  (VBN modified))))))))
    (, ,)
    (NP (DT this))
    (VP (VBZ does) (RB not)
      (VP (VB affect)
        (NP
          (NP (DT the) (NN use))
          (PP (IN of)
            (NP (DT the) (NN chest))))))
    (. .)))

advmod(change-5, even-1)
dep(change-5, though-2)
nsubj(change-5, chests-3)
advmod(change-5, often-4)
advcl(affect-19, change-5)
prep_in(change-5, appearance-7)
advmod(added-12, when-8)
amod(blocks-10, surrounding-9)
nsubjpass(added-12, blocks-10)
nsubjpass(modified-14, blocks-10)
auxpass(added-12, are-11)
advcl(change-5, added-12)
advcl(change-5, modified-14)
conj_or(added-12, modified-14)
nsubj(affect-19, this-16)
aux(affect-19, does-17)
neg(affect-19, not-18)
det(use-21, the-20)
dobj(affect-19, use-21)
det(chest-24, the-23)
prep_of(use-21, chest-24)

(ROOT
  (S
    (NP (DT a) (NN chest))
    (VP (VBZ is)
      (VP (VBN crafted)
        (PP (IN from)
          (NP
            (NP (CD eight) (JJ wooden) (NNS planks))
            (, ,)
            (SBAR (IN as)
              (S
                (VP (VBN shown)
                  (ADVP (RB below)))))))))
    (: :) (. .)))

det(chest-2, a-1)
nsubjpass(crafted-4, chest-2)
auxpass(crafted-4, is-3)
num(planks-8, eight-6)
amod(planks-8, wooden-7)
prep_from(crafted-4, planks-8)
mark(shown-11, as-10)
dep(planks-8, shown-11)
advmod(shown-11, below-12)

(ROOT
  (S
    (NP (NN clay))
    (VP (MD can)
      (VP (VB be)
        (VP (VBN found)
          (PP (IN on)
            (NP
              (NP (DT the) (NN surface))
              (PP (IN in)
                (NP
                  (NP (NNS groups))
                  (PP (IN of)
                    (NP
                      (NP (VBG varying) (NN number))
                      (VP
                        (ADVP (RB usually))
                        (VBN surrounded)
                        (PP (IN by)
                          (NP (NN sand)))))))))))))
    (. .)))

nsubjpass(found-4, clay-1)
aux(found-4, can-2)
auxpass(found-4, be-3)
det(surface-7, the-6)
prep_on(found-4, surface-7)
prep_in(surface-7, groups-9)
amod(number-12, varying-11)
prep_of(groups-9, number-12)
advmod(surrounded-14, usually-13)
partmod(number-12, surrounded-14)
agent(surrounded-14, sand-16)

(ROOT
  (S
    (NP
      (NP (JJ previous))
      (PP (TO to)
        (NP (CD 1.8))))
    (, ,)
    (NP
      (NP (NN clay) (POS 's))
      (NN spawning))
    (VP
      (VP (VBD was) (RB not)
        (VP (VBN tied)
          (PP
            (PP (TO to)
              (NP (NN water)
                (CC and)
                (NN sand)))
            (, ,)
            (CC but)
            (RB just)
            (PP (TO to)
              (NP (NN sand))))))
      (, ,)
      (CC and)
      (VP (MD could)
        (VP (VB spawn)
          (PP (IN in)
            (NP
              (NP (DT the) (NN middle))
              (PP (IN of)
                (NP (NNS deserts))))))))
    (. .)))

nsubjpass(tied-10, previous-1)
nsubj(spawn-23, previous-1)
prep_to(previous-1, 1.8-3)
poss(spawning-7, clay-5)
nsubjpass(tied-10, spawning-7)
auxpass(tied-10, was-8)
neg(tied-10, not-9)
prep(tied-10, to-11)
pobj(to-11, water-12)
pobj(to-11, sand-14)
conj_and(water-12, sand-14)
prep(tied-10, just-17)
conj_but(to-11, just-17)
dep(to-11, to-18)
pobj(to-18, sand-19)
aux(spawn-23, could-22)
conj_and(tied-10, spawn-23)
det(middle-26, the-25)
prep_in(spawn-23, middle-26)
prep_of(middle-26, deserts-28)

(ROOT
  (SINV
    (VP (VBG destroying)
      (NP (JJ clay) (NNS blocks)))
    (VP (MD will)
      (VP (VB yield)
        (NP
          (NP (CD 4) (NNS balls))
          (PP (IN of)
            (NP (NN clay))))))
    (NP
      (NP (DT each))
      (, ,)
      (SBAR
        (WHNP (WDT which))
        (S
          (VP (MD can)
            (VP (VB be)
              (VP
                (VP (VBN crafted)
                  (PRT (RP back))
                  (PP (IN into)
                    (NP (DT a) (JJ clay) (NN block))))
                (CC or)
                (VP (VBN smelted)
                  (PP (IN into)
                    (NP (NN brick))))))))))
    (. .)))

amod(blocks-3, clay-2)
dobj(destroying-1, blocks-3)
aux(yield-5, will-4)
dep(destroying-1, yield-5)
num(balls-7, 4-6)
dobj(yield-5, balls-7)
prep_of(balls-7, clay-9)
nsubj(destroying-1, each-10)
nsubjpass(crafted-15, each-10)
nsubjpass(smelted-22, each-10)
aux(crafted-15, can-13)
auxpass(crafted-15, be-14)
rcmod(each-10, crafted-15)
prt(crafted-15, back-16)
det(block-20, a-18)
amod(block-20, clay-19)
prep_into(crafted-15, block-20)
rcmod(each-10, smelted-22)
conj_or(crafted-15, smelted-22)
prep_into(smelted-22, brick-24)

(ROOT
  (S
    (SBAR (IN if)
      (S
        (NP (PRP you))
        (VP (VBP are)
          (VP (VBG having)
            (NP (NN trouble))
            (S
              (VP (VBG seeing)
                (SBAR (IN if)
                  (S
                    (NP (DT a) (NN block))
                    (VP (VBZ is)
                      (NP (NN clay)
                        (CC or)
                        (NN stone)))))))))))
    (, ,)
    (VP (VB check)
      (PP (IN for)
        (NP
          (NP (DT the) (JJ characteristic) (NNS lines))
          (PP (IN of)
            (NP (NN stone))))))
    (. .)))

mark(having-4, if-1)
nsubj(having-4, you-2)
aux(having-4, are-3)
advcl(check-15, having-4)
dobj(having-4, trouble-5)
xcomp(having-4, seeing-6)
mark(clay-11, if-7)
det(block-9, a-8)
nsubj(clay-11, block-9)
cop(clay-11, is-10)
advcl(seeing-6, clay-11)
advcl(seeing-6, stone-13)
conj_or(clay-11, stone-13)
det(lines-19, the-17)
amod(lines-19, characteristic-18)
prep_for(check-15, lines-19)
prep_of(lines-19, stone-21)

(ROOT
  (S
    (S
      (NP (NN clay))
      (VP (VBZ is)
        (ADVP (RB usually))
        (NP
          (NP (DT a) (JJR lighter) (NN color))
          (PP (IN than)
            (NP (NN stone))))))
    (CC and)
    (S
      (NP (DT the) (NN texture))
      (VP (VBZ is) (RB not)
        (ADJP (JJ linear))))
    (. .)))

nsubj(color-6, clay-1)
cop(color-6, is-2)
advmod(color-6, usually-3)
det(color-6, a-4)
amod(color-6, lighter-5)
prep_than(color-6, stone-8)
det(texture-11, the-10)
nsubj(linear-14, texture-11)
cop(linear-14, is-12)
neg(linear-14, not-13)
conj_and(color-6, linear-14)

(ROOT
  (S
    (NP (NN coal) (NNS lumps))
    (VP (VBP are)
      (ADJP (VBN harvested) (RB directly)
        (PP (IN from)
          (NP
            (NP (NN coal) (NN ore) (NNS blocks))
            (, ,)
            (SBAR
              (WHNP (WDT which))
              (S
                (VP (MD must)
                  (VP (VB be)
                    (VP (VBN destroyed)
                      (S
                        (VP (VBG using)
                          (NP
                            (NP (DT any) (NN level))
                            (PP (IN of)
                              (NP (NN pickaxe)))))))))))))))
    (. .)))

nn(lumps-2, coal-1)
nsubjpass(harvested-4, lumps-2)
auxpass(harvested-4, are-3)
advmod(harvested-4, directly-5)
nn(blocks-9, coal-7)
nn(blocks-9, ore-8)
prep_from(harvested-4, blocks-9)
nsubjpass(destroyed-14, blocks-9)
aux(destroyed-14, must-12)
auxpass(destroyed-14, be-13)
rcmod(blocks-9, destroyed-14)
purpcl(destroyed-14, using-15)
xcomp(destroyed-14, using-15)
det(level-17, any-16)
dobj(using-15, level-17)
prep_of(level-17, pickaxe-19)

(ROOT
  (S
    (NP (PRP they))
    (VP (VBP are)
      (ADJP (RB quite) (JJ efficient)
        (PP (IN as)
          (NP
            (NP (DT a) (NN source))
            (PP (IN of)
              (NP
                (NP (NN fuel))
                (PP (IN for)
                  (NP (NNS furnaces))))))))
      (, ,)
      (S
        (VP (VBG being)
          (ADJP (JJ able)
            (S
              (VP (TO to)
                (VP (VB smelt)
                  (NP
                    (NP (CD eight) (NNS units))
                    (PP (IN of)
                      (NP
                        (NP (NN ore))
                        (PP (IN per)
                          (NP
                            (NP (NN lump))
                            (PP (IN of)
                              (NP (NN coal)))))))))))))))
    (. .)))

nsubj(efficient-4, they-1)
cop(efficient-4, are-2)
advmod(efficient-4, quite-3)
det(source-7, a-6)
prep_as(efficient-4, source-7)
prep_of(source-7, fuel-9)
prep_for(fuel-9, furnaces-11)
cop(able-14, being-13)
xcomp(efficient-4, able-14)
aux(smelt-16, to-15)
xcomp(able-14, smelt-16)
num(units-18, eight-17)
dobj(smelt-16, units-18)
prep_of(units-18, ore-20)
prep_per(ore-20, lump-22)
prep_of(lump-22, coal-24)

(ROOT
  (S
    (S
      (NP
        (NP (DT the) (JJ only) (NN purpose))
        (SBAR
          (WHPP (IN for)
            (WHNP (WDT which)))
          (S
            (NP (NN coal))
            (VP (MD could)
              (VP (VB be)
                (VP (VBN considered)
                  (S
                    (VP (VBN required)))))))))
      (VP (VBZ is)
        (NP
          (NP (DT the) (NN creation))
          (PP (IN of)
            (NP
              (NP (NNS torches))
              (, ,)
              (SBAR
                (WHNP (WDT which))
                (S
                  (VP (VBP are)
                    (ADJP (JJ essential)
                      (PP (IN for)
                        (NP (VBN prolonged) (JJ underground) (NN exploration))))))))))))
    (: -)
    (S
      (SBAR (IN although)
        (S
          (NP (EX there))
          (VP (VBP are)
            (NP (JJ other) (JJ permanent) (NN light) (NNS sources)))))
      (, ,)
      (NP (NN none))
      (VP (VBP come)
        (ADJP (JJ close))
        (PP (IN in)
          (NP
            (NP (NNS terms))
            (PP (IN of)
              (NP (NN convenience)
                (CC and)
                (NN availability)))))))
    (. .)))

det(purpose-3, the-1)
amod(purpose-3, only-2)
nsubj(creation-13, purpose-3)
rel(considered-9, which-5)
nsubjpass(considered-9, coal-6)
aux(considered-9, could-7)
auxpass(considered-9, be-8)
rcmod(purpose-3, considered-9)
ccomp(considered-9, required-10)
cop(creation-13, is-11)
det(creation-13, the-12)
prep_of(creation-13, torches-15)
nsubj(essential-19, torches-15)
cop(essential-19, are-18)
rcmod(torches-15, essential-19)
amod(exploration-23, prolonged-21)
amod(exploration-23, underground-22)
prep_for(essential-19, exploration-23)
mark(are-27, although-25)
expl(are-27, there-26)
advcl(come-34, are-27)
amod(sources-31, other-28)
amod(sources-31, permanent-29)
nn(sources-31, light-30)
nsubj(are-27, sources-31)
nsubj(come-34, none-33)
parataxis(creation-13, come-34)
acomp(come-34, close-35)
prep_in(come-34, terms-37)
prep_of(terms-37, convenience-39)
prep_of(terms-37, availability-41)
conj_and(convenience-39, availability-41)

(ROOT
  (S
    (NP (NN coal))
    (VP (MD can)
      (VP (VB be)
        (VP (VBN found)
          (ADVP (RB anywhere))
          (PP (IN in)
            (NP (DT the) (NN map)))
          (, ,)
          (ADJP (JJ similar)
            (PP (TO to)
              (NP (NN iron) (NN ore.)))))))
    (. .)))

nsubjpass(found-4, coal-1)
aux(found-4, can-2)
auxpass(found-4, be-3)
advmod(found-4, anywhere-5)
det(map-8, the-7)
prep_in(found-4, map-8)
acomp(found-4, similar-10)
nn(ore.-13, iron-12)
prep_to(similar-10, ore.-13)

(ROOT
  (SINV
    (VP (VBG smelting)
      (NP
        (NP (NN wood))
        (PP (IN in)
          (NP (DT a) (NN furnace)))))
    (VP (VBZ creates))
    (NP
      (NP (NN charcoal))
      (, ,)
      (SBAR
        (WHNP (WDT which))
        (S
          (VP (MD can)
            (VP (VB be)
              (VP (VBN substituted)
                (PP (IN for)
                  (NP (NN coal)))
                (PP (IN in)
                  (NP (DT all) (NNS uses)))
                (, ,)
                (PP (VBG including)
                  (NP
                    (NP (VBG making) (NNS torches))
                    (, ,)
                    (NP (VBG powering) (NNS minecarts))
                    (, ,)
                    (CC and)
                    (NP (VBG smelting) (NNS objects))))))))))
    (. .)))

dobj(smelting-1, wood-2)
det(furnace-5, a-4)
prep_in(wood-2, furnace-5)
dep(smelting-1, creates-6)
nsubj(smelting-1, charcoal-7)
nsubjpass(substituted-12, charcoal-7)
aux(substituted-12, can-10)
auxpass(substituted-12, be-11)
rcmod(charcoal-7, substituted-12)
prep_for(substituted-12, coal-14)
det(uses-17, all-16)
prep_in(substituted-12, uses-17)
amod(torches-21, making-20)
prep_including(substituted-12, torches-21)
amod(minecarts-24, powering-23)
prep_including(substituted-12, minecarts-24)
conj_and(torches-21, minecarts-24)
amod(objects-28, smelting-27)
prep_including(substituted-12, objects-28)
conj_and(torches-21, objects-28)

(ROOT
  (S
    (NP (DT this))
    (VP (MD will)
      (ADVP (RB undoubtedly))
      (VP (VB make)
        (S
          (NP (PRP it))
          (ADJP (JJR easier)
            (S
              (VP (TO to)
                (VP (VB survive)
                  (NP (PRP$ your) (JJ first) (NN night))
                  (SBAR (IN as)
                    (S
                      (NP (PRP it))
                      (VP (VBZ allows)
                        (NP (DT the) (NN player)
                          (S
                            (VP (TO to)
                              (VP (VB make)
                                (NP (NNS torches))
                                (ADVP (RB much) (RBR more) (RB easily))
                                (, ,)
                                (SBAR (IN as)
                                  (S
                                    (NP (DT no) (NN coal))
                                    (VP (VBZ needs)
                                      (S
                                        (VP (TO to)
                                          (VP (VB be)
                                            (VP (VBN mined)
                                              (PP (IN in)
                                                (NP (NN order)))
                                              (S
                                                (VP (TO to)
                                                  (VP (VB craft)
                                                    (NP (NNS torches))
                                                    (ADVP (DT any) (RBR more))))))))))))))))))))))))))
    (. .)))

nsubj(make-4, this-1)
aux(make-4, will-2)
advmod(make-4, undoubtedly-3)
nsubj(easier-6, it-5)
xcomp(make-4, easier-6)
aux(survive-8, to-7)
xcomp(easier-6, survive-8)
poss(night-11, your-9)
amod(night-11, first-10)
tmod(survive-8, night-11)
mark(allows-14, as-12)
nsubj(allows-14, it-13)
advcl(survive-8, allows-14)
det(player-16, the-15)
dobj(allows-14, player-16)
aux(make-18, to-17)
infmod(player-16, make-18)
dobj(make-18, torches-19)
advmod(easily-22, much-20)
advmod(easily-22, more-21)
advmod(make-18, easily-22)
mark(needs-27, as-24)
det(coal-26, no-25)
nsubj(needs-27, coal-26)
xsubj(mined-30, coal-26)
advcl(make-18, needs-27)
aux(mined-30, to-28)
auxpass(mined-30, be-29)
xcomp(needs-27, mined-30)
prep_in(mined-30, order-32)
aux(craft-34, to-33)
purpcl(mined-30, craft-34)
dobj(craft-34, torches-35)
dep(more-37, any-36)
advmod(craft-34, more-37)

(ROOT
  (S
    (S
      (SBAR
        (ADVP (RB also))
        (IN if)
        (S
          (NP (PRP you))
          (VP (VBP are)
            (VP (VBG playing)
              (PP (IN on)
                (NP (NN survival)))))))
      (ADVP (RB then))
      (NP (PRP you))
      (VP (MD can)
        (ADVP (RB just))
        (VP (VB make)
          (NP
            (NP (CD 1) (NN lump))
            (PP (IN of)
              (NP
                (NP (JJ charcoal) (JJ then) (NN use))
                (SBAR
                  (WHNP
                    (WHNP (WDT that))
                    (PP (IN on)
                      (NP (CD 8) (NN wood) (NN block))))
                  (S
                    (VP (TO to)
                      (VP (VB turn)
                        (NP (CD 1) (NN lump))
                        (PP (IN into)
                          (NP (CD 8)))))))))
            (S
              (ADVP (RB again))
              (VP (VBG making)
                (S
                  (NP (PRP it))
                  (ADJP (JJR easier)
                    (S
                      (VP (TO to)
                        (VP (VB survive)
                          (PP (IN by)
                            (S
                              (VP (VBG multiplying)
                                (NP
                                  (NP (DT the) (NN amount))
                                  (PP (IN of)
                                    (NP
                                      (NP (NNS torches))
                                      (SBAR
                                        (WHNP (WDT that))
                                        (S
                                          (VP (MD can)
                                            (VP (VB be)
                                              (VP (VBN made)
                                                (NP
                                                  (NP (JJ and\) (NN amount))
                                                  (PP (IN of)
                                                    (NP (NNS items))))))))))))))))))))))))))
    (NP (PRP you))
    (VP (MD can)
      (VP (VB smelt)))
    (. .)))

advmod(playing-5, also-1)
dep(playing-5, if-2)
nsubj(playing-5, you-3)
aux(playing-5, are-4)
advcl(make-12, playing-5)
prep_on(playing-5, survival-7)
advmod(make-12, then-8)
nsubj(make-12, you-9)
aux(make-12, can-10)
advmod(make-12, just-11)
dep(smelt-52, make-12)
num(lump-14, 1-13)
dobj(make-12, lump-14)
amod(use-18, charcoal-16)
amod(use-18, then-17)
prep_of(lump-14, use-18)
nsubj(turn-25, use-18)
num(block-23, 8-21)
nn(block-23, wood-22)
prep_on(that-19, block-23)
aux(turn-25, to-24)
infmod(use-18, turn-25)
rcmod(use-18, turn-25)
num(lump-27, 1-26)
dobj(turn-25, lump-27)
prep_into(turn-25, 8-29)
advmod(making-31, again-30)
dep(lump-14, making-31)
nsubj(easier-33, it-32)
xcomp(making-31, easier-33)
aux(survive-35, to-34)
xcomp(easier-33, survive-35)
prepc_by(survive-35, multiplying-37)
det(amount-39, the-38)
dobj(multiplying-37, amount-39)
prep_of(amount-39, torches-41)
nsubjpass(made-45, torches-41)
aux(made-45, can-43)
auxpass(made-45, be-44)
rcmod(torches-41, made-45)
amod(amount-47, and\-46)
dobj(made-45, amount-47)
prep_of(amount-47, items-49)
nsubj(smelt-52, you-50)
aux(smelt-52, can-51)

(ROOT
  (S
    (ADVP (RB ordinarily))
    (, ,)
    (S
      (NP (DT a) (NN wood) (NN block))
      (VP (VBZ smelts)
        (NP (CD six) (NNS items))
        (SBAR (IN if)
          (S
            (VP (VBN broken)
              (PP (IN into)
                (NP (NNS planks))))))))
    (: :)
    (S
      (NP (DT each) (NN wood) (NN block))
      (VP (VBZ makes)
        (NP (CD four) (JJ wooden) (NNS planks))))
    (, ,)
    (CC and)
    (S
      (NP (DT each) (JJ wooden) (NN plank))
      (VP (VBZ smelts)
        (NP (CD 1.5) (NNS items))))
    (. .)))

advmod(smelts-6, ordinarily-1)
det(block-5, a-3)
nn(block-5, wood-4)
nsubj(smelts-6, block-5)
num(items-8, six-7)
dobj(smelts-6, items-8)
mark(broken-10, if-9)
advcl(smelts-6, broken-10)
prep_into(broken-10, planks-12)
det(block-16, each-14)
nn(block-16, wood-15)
nsubj(makes-17, block-16)
parataxis(smelts-6, makes-17)
num(planks-20, four-18)
amod(planks-20, wooden-19)
dobj(makes-17, planks-20)
det(plank-25, each-23)
amod(plank-25, wooden-24)
nsubj(smelts-26, plank-25)
conj_and(smelts-6, smelts-26)
num(items-28, 1.5-27)
dobj(smelts-26, items-28)

(ROOT
  (S
    (ADVP (RB however))
    (, ,)
    (NP (CD one) (NN wood) (NN block))
    (VP (MD can)
      (VP (VB be)
        (VP (VBN smelted)
          (PP (IN into)
            (NP
              (NP (CD one) (JJ charcoal) (NN block))
              (, ,)
              (CC and)
              (NP
                (NP
                  (NP (DT each) (NN piece))
                  (PP (IN of)
                    (NP (JJ charcoal) (NNS smelts))))
                (NP (CD eight) (NNS items)))
              (, ,)
              (ADVP (RB just))))
          (PP (IN like)
            (NP (NN coal))))))
    (. .)))

advmod(smelted-8, however-1)
num(block-5, one-3)
nn(block-5, wood-4)
nsubjpass(smelted-8, block-5)
aux(smelted-8, can-6)
auxpass(smelted-8, be-7)
num(block-12, one-10)
amod(block-12, charcoal-11)
prep_into(smelted-8, block-12)
det(piece-16, each-15)
prep_into(smelted-8, piece-16)
conj_and(block-12, piece-16)
amod(smelts-19, charcoal-18)
prep_of(piece-16, smelts-19)
num(items-21, eight-20)
dep(piece-16, items-21)
prep_into(smelted-8, just-23)
advmod(block-12, just-23)
conj_and(block-12, just-23)
prep_like(smelted-8, coal-25)

(ROOT
  (S
    (ADVP (RB therefore))
    (, ,)
    (NP (PRP it))
    (VP (VBZ is)
      (ADJP (RBR more) (JJ efficient)
        (S
          (VP (TO to)
            (VP
              (VP (VB take)
                (NP (CD seven) (NN wood) (NNS blocks)))
              (, ,)
              (VP (VB turn)
                (NP (CD one) (NN wood) (NN block))
                (PP (IN into)
                  (NP (NNS planks))))
              (, ,)
              (CC and)
              (VP (VB use)
                (S
                  (NP (DT those) (CD four) (NNS planks))
                  (VP (TO to)
                    (VP (VB smelt)
                      (NP (DT the) (JJ other) (CD six) (JJ unbroken) (NN wood) (NNS blocks))
                      (PP (IN into)
                        (NP (NN charcoal))))))))))))
    (. .)))

advmod(efficient-6, therefore-1)
nsubj(efficient-6, it-3)
cop(efficient-6, is-4)
advmod(efficient-6, more-5)
aux(take-8, to-7)
xcomp(efficient-6, take-8)
num(blocks-11, seven-9)
nn(blocks-11, wood-10)
dobj(take-8, blocks-11)
dobj(use-21, blocks-11)
xcomp(efficient-6, turn-13)
conj_and(take-8, turn-13)
num(block-16, one-14)
nn(block-16, wood-15)
dobj(turn-13, block-16)
prep_into(turn-13, planks-18)
xcomp(efficient-6, use-21)
conj_and(take-8, use-21)
det(planks-24, those-22)
num(planks-24, four-23)
nsubj(smelt-26, planks-24)
aux(smelt-26, to-25)
xcomp(use-21, smelt-26)
det(blocks-32, the-27)
amod(blocks-32, other-28)
num(blocks-32, six-29)
amod(blocks-32, unbroken-30)
nn(blocks-32, wood-31)
dobj(smelt-26, blocks-32)
prep_into(smelt-26, charcoal-34)

(ROOT
  (S
    (ADVP (RB ordinarily))
    (, ,)
    (NP (CD seven) (NN wood) (NNS blocks))
    (VP (MD would)
      (ADVP (RB only))
      (VP (VB smelt)
        (NP (CD 42) (NNS items))
        (, ,)
        (SBAR (IN since)
          (S
            (NP (CD seven) (NN wood) (NNS blocks))
            (VP (VBZ makes)
              (NP (CD 28) (NNS planks)))))))
    (. .)))

advmod(smelt-8, ordinarily-1)
num(blocks-5, seven-3)
nn(blocks-5, wood-4)
nsubj(smelt-8, blocks-5)
aux(smelt-8, would-6)
advmod(smelt-8, only-7)
num(items-10, 42-9)
dobj(smelt-8, items-10)
mark(makes-16, since-12)
num(blocks-15, seven-13)
nn(blocks-15, wood-14)
nsubj(makes-16, blocks-15)
advcl(smelt-8, makes-16)
num(planks-18, 28-17)
dobj(makes-16, planks-18)

(ROOT
  (S
    (ADVP (RB moreover))
    (, ,)
    (SBAR (IN if)
      (S
        (NP (PRP you))
        (VP (VBP begin)
          (PP (IN with)
            (NP
              (NP (DT a) (JJ single) (NN coal))
              (CC or)
              (NP (NN charcoal)))))))
    (, ,)
    (ADVP (RB then))
    (NP (PRP you))
    (VP (MD can)
      (VP
        (VP (VB smelt)
          (NP (CD 8) (NN wood) (NNS blocks)))
        (CC and)
        (VP (VB make)
          (NP (CD 8) (NN charcoal)))
        (, ,)
        (VP (VB replace)
          (NP (PRP$ your) (JJ starting) (NN charcoal)))
        (CC and)
        (VP (VB keep)
          (NP (DT the) (JJ other) (CD 7)))
        (, ,)
        (S
          (VP (VBG making)
            (PP (IN for)
              (NP
                (NP (DT a) (NN total))
                (PP (IN of)
                  (NP (CD 56) (NNS smelts)))))
            (PP (IN from)
              (NP
                (NP (DT those) (CD 8) (NN wood) (NNS blocks))
                (, ,)
                (SBAR (IN though)
                  (S
                    (NP (EX there))
                    (VP (VBZ is)
                      (ADVP (RB even))
                      (NP
                        (NP (JJR more) (NN time))
                        (VP (VBN required)
                          (PP (IN for)
                            (S
                              (VP (VBG smelting)
                                (NP (DT the) (NN wood))))))))))))))))
    (. .)))

advmod(smelt-16, moreover-1)
mark(begin-5, if-3)
nsubj(begin-5, you-4)
dep(smelt-16, begin-5)
det(coal-9, a-7)
amod(coal-9, single-8)
prep_with(begin-5, coal-9)
prep_with(begin-5, charcoal-11)
conj_or(coal-9, charcoal-11)
advmod(smelt-16, then-13)
nsubj(smelt-16, you-14)
nsubj(make-21, you-14)
nsubj(replace-25, you-14)
nsubj(keep-30, you-14)
nsubj(making-35, you-14)
aux(smelt-16, can-15)
num(blocks-19, 8-17)
nn(blocks-19, wood-18)
dobj(smelt-16, blocks-19)
dobj(making-35, blocks-19)
conj_and(smelt-16, make-21)
num(charcoal-23, 8-22)
dobj(make-21, charcoal-23)
conj_and(smelt-16, replace-25)
poss(charcoal-28, your-26)
amod(charcoal-28, starting-27)
dobj(replace-25, charcoal-28)
conj_and(smelt-16, keep-30)
det(7-33, the-31)
amod(7-33, other-32)
dobj(keep-30, 7-33)
conj_and(smelt-16, making-35)
xcomp(smelt-16, making-35)
det(total-38, a-37)
prep_for(making-35, total-38)
num(smelts-41, 56-40)
prep_of(total-38, smelts-41)
det(blocks-46, those-43)
num(blocks-46, 8-44)
nn(blocks-46, wood-45)
prep_from(making-35, blocks-46)
mark(is-50, though-48)
expl(is-50, there-49)
dep(blocks-46, is-50)
advmod(is-50, even-51)
amod(time-53, more-52)
nsubj(is-50, time-53)
partmod(time-53, required-54)
prepc_for(required-54, smelting-56)
det(wood-58, the-57)
dobj(smelting-56, wood-58)

(ROOT
  (FRAG
    (NP
      (NP (NN use) (CD one) (NN wood) (NN block))
      (: -)
      (NP (JJ -rrb-) (NNS planks)))
    (: -)
    (S
      (S
        (S
          (VP (VBG -rrb-)
            (NP
              (NP (CD 1) (NN set))
              (PP (IN of)
                (NP
                  (NP (JJ sticks) (NN use) (CD 2))
                  (PP (IN of)
                    (NP (DT the) (NN sticks)
                      (S
                        (VP (TO to)
                          (VP (VB smelt)
                            (NP (PRP$ your) (VBG remaining) (JJ raw) (NN wood))))))))))))
        (, ,)
        (NP (DT this))
        (VP (MD will)
          (VP (VB give)
            (NP (PRP you))
            (NP
              (NP (CD one) (NN piece))
              (PP (IN of)
                (NP (NN charcoal)))))))
      (, ,)
      (CC and)
      (S
        (NP (PRP you))
        (VP (MD can)
          (VP (VB use)
            (SBAR (IN that)
              (S
                (VP (TO to)
                  (VP (VB smelt)))))))))
    (. .)))

nn(block-4, use-1)
num(block-4, one-2)
nn(block-4, wood-3)
dep(give-28, block-4)
amod(planks-7, -rrb--6)
dep(block-4, planks-7)
dep(give-28, -rrb--9)
num(set-11, 1-10)
dobj(-rrb--9, set-11)
amod(use-14, sticks-13)
prep_of(set-11, use-14)
num(use-14, 2-15)
det(sticks-18, the-17)
prep_of(use-14, sticks-18)
aux(smelt-20, to-19)
infmod(sticks-18, smelt-20)
poss(wood-24, your-21)
amod(wood-24, remaining-22)
amod(wood-24, raw-23)
dobj(smelt-20, wood-24)
nsubj(give-28, this-26)
aux(give-28, will-27)
iobj(give-28, you-29)
num(piece-31, one-30)
dobj(give-28, piece-31)
dobj(use-38, piece-31)
prep_of(piece-31, charcoal-33)
nsubj(use-38, you-36)
aux(use-38, can-37)
conj_and(give-28, use-38)
complm(smelt-41, that-39)
aux(smelt-41, to-40)
ccomp(use-38, smelt-41)
xcomp(use-38, smelt-41)

(ROOT
  (S
    (NP (NN cobblestone))
    (VP (VBZ is)
      (VP (VBN obtained)
        (PP (IN by)
          (NP (NN mining) (NN stone)))))
    (. .)))

nsubjpass(obtained-3, cobblestone-1)
auxpass(obtained-3, is-2)
nn(stone-6, mining-5)
agent(obtained-3, stone-6)

(ROOT
  (S
    (S
      (NP (NN cobblestone))
      (VP (VBZ is)
        (ADJP
          (ADJP (RB slightly) (JJR harder))
          (PP (TO to)
            (NP
              (NP (NN mine))
              (PP (IN than)
                (NP (JJ normal) (NN stone))))))))
    (, ,)
    (CC and)
    (S
      (NP (EX there))
      (VP (VBZ is)
        (NP
          (NP (DT an) (JJ alternative) (NN version))
          (PP (IN of)
            (NP
              (NP (DT the) (NN block))
              (VP (VBN known)
                (PP (IN as)
                  (NP
                    (NP (JJ moss) (NN stone))
                    (, ,)
                    (SBAR
                      (WHNP (WDT which))
                      (S
                        (VP (MD can)
                          (ADVP (RB only))
                          (VP (VB be)
                            (VP (VBN obtained)
                              (PP (IN from)
                                (NP (NNS dungeons))))))))))))))))
    (. .)))

nsubj(harder-4, cobblestone-1)
cop(harder-4, is-2)
advmod(harder-4, slightly-3)
prep_to(harder-4, mine-6)
amod(stone-9, normal-8)
prep_than(mine-6, stone-9)
expl(is-13, there-12)
conj_and(harder-4, is-13)
det(version-16, an-14)
amod(version-16, alternative-15)
nsubj(is-13, version-16)
det(block-19, the-18)
prep_of(version-16, block-19)
partmod(block-19, known-20)
amod(stone-23, moss-22)
prep_as(known-20, stone-23)
nsubjpass(obtained-29, stone-23)
aux(obtained-29, can-26)
advmod(obtained-29, only-27)
auxpass(obtained-29, be-28)
rcmod(stone-23, obtained-29)
prep_from(obtained-29, dungeons-31)

(ROOT
  (S
    (NP (NN cobblestone))
    (VP (VBZ is)
      (VP (VBN required)
        (S
          (VP (TO to)
            (VP (VB craft)
              (NP
                (NP (NNS furnaces))
                (, ,)
                (NP (JJ cobblestone) (NNS slabs))
                (, ,)
                (NP (NN stone) (NNS stairs))
                (, ,)
                (NP (NN stone) (NNS tools))
                (CC and)
                (NP (NNS weapons) (, ,) (NNS levers) (, ,) (NNS pistons) (, ,) (NNS dispensers)
                  (CC and)
                  (NN brewing) (NNS stands))))))))
    (. .)))

nsubjpass(required-3, cobblestone-1)
xsubj(craft-5, cobblestone-1)
auxpass(required-3, is-2)
aux(craft-5, to-4)
xcomp(required-3, craft-5)
dobj(craft-5, furnaces-6)
amod(slabs-9, cobblestone-8)
dobj(craft-5, slabs-9)
conj_and(furnaces-6, slabs-9)
nn(stairs-12, stone-11)
dobj(craft-5, stairs-12)
conj_and(furnaces-6, stairs-12)
nn(tools-15, stone-14)
dobj(craft-5, tools-15)
conj_and(furnaces-6, tools-15)
nn(dispensers-23, weapons-17)
dep(dispensers-23, levers-19)
dep(dispensers-23, pistons-21)
dobj(craft-5, dispensers-23)
conj_and(furnaces-6, dispensers-23)
nn(stands-26, brewing-25)
conj_and(furnaces-6, stands-26)
conj_and(dispensers-23, stands-26)

(ROOT
  (S
    (PP (RB because)
      (PP (IN of)
        (NP
          (NP (DT the) (NN abundance))
          (PP (IN of)
            (NP (NN stone))))))
    (, ,)
    (NP (NN cobblestone))
    (VP (VBZ is)
      (NP (DT a) (JJ commonly-used) (NN building) (NN material)))
    (. .)))

advcl(material-13, of-2)
det(abundance-4, the-3)
prep_because_of(material-13, abundance-4)
prep_of(abundance-4, stone-6)
nsubj(material-13, cobblestone-8)
cop(material-13, is-9)
det(material-13, a-10)
amod(material-13, commonly-used-11)
nn(material-13, building-12)

(ROOT
  (S
    (NP (NN cobblestone))
    (VP (MD can)
      (VP (VB be)
        (VP (VBN smelted)
          (PRT (RP back))
          (PP (IN into)
            (NP
              (NP (JJ smooth) (NN stone))
              (PP (IN in)
                (NP (DT a) (NN furnace))))))))
    (. .)))

nsubjpass(smelted-4, cobblestone-1)
aux(smelted-4, can-2)
auxpass(smelted-4, be-3)
prt(smelted-4, back-5)
amod(stone-8, smooth-7)
prep_into(smelted-4, stone-8)
det(furnace-11, a-10)
prep_in(stone-8, furnace-11)

(ROOT
  (S
    (SBAR
      (WHADVP (WRB when))
      (S
        (NP (NN cobweb))
        (VP (VBZ is)
          (VP (VBN destroyed)
            (PP (IN by)
              (NP
                (NP (NNS shears))
                (, ,)
                (NP (NNS pistons))
                (, ,)
                (NP (JJ running) (NN water))
                (, ,)
                (CC or)
                (NP (DT a) (NN sword))))))))
    (, ,)
    (NP (PRP it))
    (VP (VBZ drops)
      (NP (CD 1) (NN string)))
    (. .)))

advmod(destroyed-4, when-1)
nsubjpass(destroyed-4, cobweb-2)
auxpass(destroyed-4, is-3)
dep(drops-18, destroyed-4)
agent(destroyed-4, shears-6)
agent(destroyed-4, pistons-8)
conj_or(shears-6, pistons-8)
amod(water-11, running-10)
agent(destroyed-4, water-11)
conj_or(shears-6, water-11)
det(sword-15, a-14)
agent(destroyed-4, sword-15)
conj_or(shears-6, sword-15)
nsubj(drops-18, it-17)
num(string-20, 1-19)
dobj(drops-18, string-20)

(ROOT
  (S
    (NP (JJ cooked) (NN fish))
    (VP (VBZ is)
      (NP
        (NP (DT a) (NN type))
        (PP (IN of)
          (NP
            (NP (NN food))
            (ADJP (JJ available)
              (PP (IN in)
                (NP
                  (NP (NN beta))
                  (SBAR
                    (WHNP (WDT that))
                    (S
                      (VP (VBZ is)
                        (VP (VBN obtained)
                          (SBAR
                            (WHADVP (WRB when))
                            (S
                              (NP (JJ raw) (NN fish))
                              (VP (VBZ is)
                                (VP (VBN cooked)
                                  (PP (IN in)
                                    (NP (DT a) (NN furnace))))))))))))))))))
    (. .)))

amod(fish-2, cooked-1)
nsubj(type-5, fish-2)
cop(type-5, is-3)
det(type-5, a-4)
prep_of(type-5, food-7)
amod(food-7, available-8)
prep_in(available-8, beta-10)
nsubjpass(obtained-13, beta-10)
auxpass(obtained-13, is-12)
rcmod(beta-10, obtained-13)
advmod(cooked-18, when-14)
amod(fish-16, raw-15)
nsubjpass(cooked-18, fish-16)
auxpass(cooked-18, is-17)
advcl(obtained-13, cooked-18)
det(furnace-21, a-20)
prep_in(cooked-18, furnace-21)

(ROOT
  (S
    (NP (JJ raw) (NN fish))
    (VP (MD must)
      (ADVP (RB first))
      (VP (VB be)
        (VP (VBN caught)
          (PP (IN with)
            (NP (DT a) (NN fishing) (NN rod))))))
    (. .)))

amod(fish-2, raw-1)
nsubjpass(caught-6, fish-2)
aux(caught-6, must-3)
advmod(caught-6, first-4)
auxpass(caught-6, be-5)
det(rod-10, a-8)
nn(rod-10, fishing-9)
prep_with(caught-6, rod-10)

(ROOT
  (S
    (S
      (NP (NNS doors))
      (VP (VBP come)
        (PP (IN in)
          (NP
            (NP (CD two) (NNS varieties))
            (: :)
            (NP
              (NP (JJ wooden) (NNS doors))
              (VP (VBN made)
                (PP (IN from)
                  (NP (NNS planks)))))))))
    (, ,)
    (CC and)
    (S
      (NP (NN iron) (NNS doors))
      (VP (VBD made)
        (PP (IN from)
          (NP (NN iron) (NNS ingots)))))
    (. .)))

nsubj(come-2, doors-1)
num(varieties-5, two-4)
prep_in(come-2, varieties-5)
amod(doors-8, wooden-7)
dep(varieties-5, doors-8)
partmod(doors-8, made-9)
prep_from(made-9, planks-11)
nn(doors-15, iron-14)
nsubj(made-16, doors-15)
conj_and(come-2, made-16)
nn(ingots-19, iron-18)
prep_from(made-16, ingots-19)

(ROOT
  (S
    (S
      (NP (DT this))
      (VP (VBZ creates)
        (NP (DT the) (NN possibility)
          (S
            (VP (TO to)
              (VP (VB make)
                (NP
                  (NP (NNS doors))
                  (SBAR
                    (WHNP (WDT that))
                    (S
                      (VP (VBP are)
                        (ADJP (RB only) (JJ controllable)
                          (PP (IN from)
                            (NP
                              (NP (JJ remote) (NNS locations))
                              (VP (VBG using)
                                (NP (DT a) (NN switch)
                                  (CC and)
                                  (NN redstone))))))))))))))))
    (: ;)
    (S
      (ADVP (RB otherwise))
      (S
        (VP (VBG putting)
          (NP (DT a) (JJ redstone) (NN torch))
          (PP (IN in)
            (NP
              (NP (NN front))
              (PP (IN of)
                (NP (DT the) (NN door)))))))
      (VP (MD will)
        (VP (VB open)
          (NP (PRP it)))))
    (. .)))

nsubj(creates-2, this-1)
det(possibility-4, the-3)
dobj(creates-2, possibility-4)
aux(make-6, to-5)
infmod(possibility-4, make-6)
dobj(make-6, doors-7)
nsubj(controllable-11, doors-7)
cop(controllable-11, are-9)
advmod(controllable-11, only-10)
rcmod(doors-7, controllable-11)
amod(locations-14, remote-13)
prep_from(controllable-11, locations-14)
partmod(locations-14, using-15)
det(switch-17, a-16)
dobj(using-15, switch-17)
dobj(using-15, redstone-19)
conj_and(switch-17, redstone-19)
advmod(open-32, otherwise-21)
csubj(open-32, putting-22)
det(torch-25, a-23)
amod(torch-25, redstone-24)
dobj(putting-22, torch-25)
det(door-30, the-29)
prep_in_front_of(putting-22, door-30)
aux(open-32, will-31)
parataxis(creates-2, open-32)
dobj(open-32, it-33)

(ROOT
  (S
    (NP (NN iron) (NNS doors))
    (VP (MD can)
      (VP (VB take)
        (NP
          (NP (RB quite) (DT a) (NN bit))
          (PP (IN of)
            (NP (NN time))))
        (S
          (VP (TO to)
            (VP (VB destroy)
              (ADVP (RB even))
              (PP (IN with)
                (NP (DT a) (NN pickaxe))))))))
    (. .)))

nn(doors-2, iron-1)
nsubj(take-4, doors-2)
aux(take-4, can-3)
advmod(bit-7, quite-5)
det(bit-7, a-6)
dobj(take-4, bit-7)
prep_of(bit-7, time-9)
aux(destroy-11, to-10)
xcomp(take-4, destroy-11)
advmod(destroy-11, even-12)
det(pickaxe-15, a-14)
prep_with(destroy-11, pickaxe-15)

(ROOT
  (S
    (SBAR (IN if)
      (S
        (NP (CD two) (NNS doors))
        (VP (VBP are)
          (VP (VBN placed)
            (ADVP (JJ adjacent))
            (PP (TO to)
              (NP (DT each) (JJ other)))))))
    (, ,)
    (NP (PRP they))
    (VP (MD will)
      (VP (VB orient)
        (PP (IN with)
          (NP (PRP$ their) (JJ handles) (NN inward)))
        (, ,)
        (S
          (VP (VBG creating)
            (NP (DT a) (JJ double) (NN door))))))
    (. .)))

mark(placed-5, if-1)
num(doors-3, two-2)
nsubjpass(placed-5, doors-3)
auxpass(placed-5, are-4)
advcl(orient-13, placed-5)
advmod(placed-5, adjacent-6)
det(other-9, each-8)
prep_to(placed-5, other-9)
nsubj(orient-13, they-11)
aux(orient-13, will-12)
poss(inward-17, their-15)
amod(inward-17, handles-16)
prep_with(orient-13, inward-17)
xcomp(orient-13, creating-19)
det(door-22, a-20)
amod(door-22, double-21)
dobj(creating-19, door-22)

(ROOT
  (S
    (SBAR (IN if)
      (S
        (NP (CD one) (NN door))
        (VP (VBZ is) (`` ``)
          (PP (IN on))
          ('' ''))))
    (, ,)
    (NP (DT the) (JJ other) (NN door))
    (VP (MD must)
      (VP (VB be) (`` ``)
        (ADJP (RP off))
        ('' '')
        (PP (IN in)
          (NP
            (NP (NN order))
            (PP (IN for)
              (NP (DT both) (NNS doors)))
            (S
              (VP (TO to)
                (VP (VB be)
                  (ADJP (JJ open\)))))))))
    (. .)))

mark(is-4, if-1)
num(door-3, one-2)
nsubj(is-4, door-3)
advcl(off-15, is-4)
prep(is-4, on-6)
det(door-11, the-9)
amod(door-11, other-10)
nsubj(off-15, door-11)
aux(off-15, must-12)
cop(off-15, be-13)
prep_in(off-15, order-18)
det(doors-21, both-20)
prep_for(order-18, doors-21)
aux(open\-24, to-22)
cop(open\-24, be-23)
infmod(order-18, open\-24)

(ROOT
  (S
    (S
      (NP
        (NP (DT a) (JJ reliable) (NN redstone) (NN mechanism))
        (PP (IN for)
          (S
            (VP (VBG accomplishing)
              (NP (DT this) (JJ involves) (NN redstone) (NN wire))
              (PP (IN on)
                (NP
                  (NP (DT a) (NN block))
                  (PP (IN underneath)
                    (NP (DT the) (NN pressure)))))))))
      (VP (VBD plated)
        (NP (NN block))
        (PP (IN in)
          (NP
            (NP (NN front))
            (PP (IN of)
              (NP (DT the) (JJ right) (NN hand) (NN door)))))))
    (, ,)
    (CC and)
    (S
      (NP (DT a) (JJ redstone) (NN torch))
      (VP (VBG hanging)
        (PRT (RP off))
        (NP (DT a) (NN block))
        (PP (IN under)
          (NP
            (NP (DT that) (NN door))
            (PP (IN underneath)
              (NP (DT the) (JJ left) (NN hand) (NN door) (NN block)))))))
    (. .)))

det(mechanism-4, a-1)
amod(mechanism-4, reliable-2)
nn(mechanism-4, redstone-3)
nsubj(plated-17, mechanism-4)
prepc_for(mechanism-4, accomplishing-6)
det(wire-10, this-7)
amod(wire-10, involves-8)
nn(wire-10, redstone-9)
dobj(accomplishing-6, wire-10)
det(block-13, a-12)
prep_on(accomplishing-6, block-13)
det(pressure-16, the-15)
prep_underneath(block-13, pressure-16)
dobj(plated-17, block-18)
det(door-25, the-22)
amod(door-25, right-23)
nn(door-25, hand-24)
prep_in_front_of(plated-17, door-25)
det(torch-30, a-28)
amod(torch-30, redstone-29)
nsubj(hanging-31, torch-30)
conj_and(plated-17, hanging-31)
prt(hanging-31, off-32)
det(block-34, a-33)
dobj(hanging-31, block-34)
det(door-37, that-36)
prep_under(hanging-31, door-37)
det(block-43, the-39)
amod(block-43, left-40)
nn(block-43, hand-41)
nn(block-43, door-42)
prep_underneath(door-37, block-43)

(ROOT
  (S
    (SBAR (IN if)
      (S
        (NP (DT this))
        (VP (VBZ does) (RB n't)
          (VP (VB work)
            (ADVP (RB initially))))))
    (, ,)
    (NP
      (NP (JJ re-place) (DT the) (NNS doors))
      (PP (IN from)
        (NP
          (NP (DT the) (`` ``) (JJ outside) ('' '') (NN starting))
          (PP (IN with)
            (NP (DT the) (NN door))))))
    (VP (VBP adjascent)
      (NP (DT the) (NN pressure) (NNS plates)))
    (. .)))

mark(work-5, if-1)
nsubj(work-5, this-2)
aux(work-5, does-3)
neg(work-5, n't-4)
advcl(adjascent-20, work-5)
advmod(work-5, initially-6)
amod(doors-10, re-place-8)
det(doors-10, the-9)
nsubj(adjascent-20, doors-10)
det(starting-16, the-12)
amod(starting-16, outside-14)
prep_from(doors-10, starting-16)
det(door-19, the-18)
prep_with(starting-16, door-19)
det(plates-23, the-21)
nn(plates-23, pressure-22)
dobj(adjascent-20, plates-23)

(ROOT
  (S
    (NP (DT the) (NN torch))
    (VP (VBZ keeps)
      (S
        (NP (DT the) (JJ opposite) (NN door))
        (`` ``)
        (ADJP (JJ open))
        ('' ''))
      (SBAR (IN until)
        (S
          (NP (DT the) (NN plate))
          (VP (VBZ is)
            (VP (VBN triggered)
              (S
                (VP
                  (VP (VBG powering)
                    (NP (DT the) (JJ underlying) (NN redstone) (NN wire)))
                  (CC and)
                  (VP (VBG turning)
                    (NP (DT the) (NN torch))
                    (PRT (RP off))))))))))
    (. .)))

det(torch-2, the-1)
nsubj(keeps-3, torch-2)
det(door-6, the-4)
amod(door-6, opposite-5)
dep(open-8, door-6)
dep(keeps-3, open-8)
mark(triggered-14, until-10)
det(plate-12, the-11)
nsubjpass(triggered-14, plate-12)
auxpass(triggered-14, is-13)
advcl(keeps-3, triggered-14)
ccomp(triggered-14, powering-15)
det(wire-19, the-16)
amod(wire-19, underlying-17)
nn(wire-19, redstone-18)
dobj(powering-15, wire-19)
ccomp(triggered-14, turning-21)
conj_and(powering-15, turning-21)
det(torch-23, the-22)
dobj(turning-21, torch-23)
prt(turning-21, off-24)

(ROOT
  (S
    (SBAR
      (WHADVP (WRB when))
      (S
        (VP (VBG trying)
          (S
            (VP (TO to)
              (VP (VB sleep)
                (PP (IN in)
                  (NP
                    (NP (DT a) (NN bed))
                    (PP (IN at)
                      (NP (NN night)))))))))))
    (, ,)
    (NP (DT a) (NN monster))
    (VP (MD may)
      (VP
        (VP (VB enter)
          (PP (IN through)
            (NP (DT the) (JJ outside) (JJ right) (JJ hinged) (NN door))))
        (CC and)
        (VP (VB disturb)
          (NP (DT the) (NN player)))))
    (. .)))

advmod(trying-2, when-1)
dep(enter-14, trying-2)
aux(sleep-4, to-3)
xcomp(trying-2, sleep-4)
det(bed-7, a-6)
prep_in(sleep-4, bed-7)
prep_at(bed-7, night-9)
det(monster-12, a-11)
nsubj(enter-14, monster-12)
nsubj(disturb-22, monster-12)
aux(enter-14, may-13)
det(door-20, the-16)
amod(door-20, outside-17)
amod(door-20, right-18)
amod(door-20, hinged-19)
prep_through(enter-14, door-20)
conj_and(enter-14, disturb-22)
det(player-24, the-23)
dobj(disturb-22, player-24)

(ROOT
  (S
    (NP
      (NP (DT a) (JJ new) (NN feature))
      (ADJP (JJ unique)
        (PP (TO to)
          (NP (DT the) (JJ second) (NN release-candidate)))))
    (VP (VBZ is)
      (SBAR (IN that)
        (S
          (S
            (SBAR (IN if)
              (S
                (S
                  (NP (PRP you))
                  (VP (VBP have)
                    (NP
                      (NP (CD two) (JJ wooden) (NNS doors))
                      (PP (IN in)
                        (NP (DT a) (JJ double) (NN door) (NN configuration))))))
                (CC and)
                (S
                  (NP (PRP you))
                  (NP
                    (NP (NN click))
                    (PP (IN on)
                      (NP
                        (NP (CD one))
                        (PP (IN of)
                          (NP (DT the) (NNS doors)))))))))
            (ADVP (RB twice))
            (NP (DT both))
            (VP (MD will)
              (VP (VB open)
                (PRN (, ,)
                  (SBAR (IN if)
                    (S
                      (NP (PRP you))
                      (VP (VBP do)
                        (SBAR
                          (S
                            (NP (PRP it))
                            (ADVP (RB again)
                              (CC both))
                            (VP (MD will)
                              (VP (VB close))))))))
                  (, ,))
                (PP (IN for)
                  (NP (NN example))))))
          (: :)
          (S
            (NP
              (NP (NN click))
              (PP (IN on)
                (NP (DT the) (JJ left) (NN door))))
            (VP
              (ADVP (RB twice))
              (VP
                (ADVP (CC both)
                  (RB left)
                  (CC and)
                  (RB right))
                (MD will)
                (VP (VB be)
                  (ADJP (JJ open))))
              (, ,)
              (VP (VBP do)
                (NP (PRP it))
                (ADVP (RB again)))
              (, ,)
              (S
                (VP (VBG click)
                  (ADVP (RB twice))
                  (PP (CC either)
                    (PP (IN on)
                      (NP (DT the)
                        (ADJP (VBN left)
                          (CC or)
                          (JJ right))
                        (NN door))))))))
          (CC and)
          (S
            (NP (DT both))
            (VP (MD will)
              (VP (VB close)))))))
    (. .)))

det(feature-3, a-1)
amod(feature-3, new-2)
nsubj(is-9, feature-3)
amod(feature-3, unique-4)
det(release-candidate-8, the-6)
amod(release-candidate-8, second-7)
prep_to(unique-4, release-candidate-8)
complm(open-33, that-10)
mark(have-13, if-11)
nsubj(have-13, you-12)
advcl(open-33, have-13)
num(doors-16, two-14)
amod(doors-16, wooden-15)
dobj(have-13, doors-16)
det(configuration-21, a-18)
amod(configuration-21, double-19)
nn(configuration-21, door-20)
prep_in(doors-16, configuration-21)
dep(click-24, you-23)
conj_and(have-13, click-24)
advcl(open-33, click-24)
prep_on(click-24, one-26)
det(doors-29, the-28)
prep_of(one-26, doors-29)
advmod(open-33, twice-30)
nsubj(open-33, both-31)
aux(open-33, will-32)
ccomp(is-9, open-33)
mark(do-37, if-35)
nsubj(do-37, you-36)
parataxis(open-33, do-37)
nsubj(close-42, it-38)
advmod(close-42, again-39)
dep(again-39, both-40)
aux(close-42, will-41)
ccomp(do-37, close-42)
prep_for(open-33, example-45)
nsubj(open-59, click-47)
det(door-51, the-49)
amod(door-51, left-50)
prep_on(click-47, door-51)
advmod(open-59, twice-52)
preconj(left-54, both-53)
advmod(open-59, left-54)
conj_and(left-54, right-56)
advmod(open-59, right-56)
aux(open-59, will-57)
cop(open-59, be-58)
parataxis(open-33, open-59)
dep(open-59, do-61)
dobj(do-61, it-62)
advmod(do-61, again-63)
xcomp(open-59, click-65)
advmod(click-65, twice-66)
dep(click-65, either-67)
det(door-73, the-69)
amod(door-73, left-70)
conj_or(left-70, right-72)
amod(door-73, right-72)
prep_on(click-65, door-73)
nsubj(close-77, both-75)
aux(close-77, will-76)
ccomp(is-9, close-77)
conj_and(open-33, close-77)

(ROOT
  (S
    (VP (VB put)
      (NP (DT the) (NNS switches))
      (PP (IN on)
        (NP
          (NP (DT the) (JJ same) (NNS sides))
          (PP (IN of)
            (NP (DT the) (NN door)))))
      (SBAR (RB so) (IN that)
        (S
          (SBAR
            (WHADVP (WRB when))
            (S
              (VP (VBD pushed)
                (SBAR
                  (S
                    (NP (DT both) (NNS doors))
                    (VP (MD will)
                      (VP (VB open))))))))
          (: ;)
          (NP (PRP you))
          (VP (MD should)
            (VP (VB have)
              (S
                (NP (RB just) (JJ enough) (NN time))
                (VP (TO to)
                  (VP (VB get)
                    (PRT (RP across))))))))))
    (. .)))

det(switches-3, the-2)
dobj(put-1, switches-3)
det(sides-7, the-5)
amod(sides-7, same-6)
prep_on(put-1, sides-7)
det(door-10, the-9)
prep_of(sides-7, door-10)
advmod(have-22, so-11)
dep(have-22, that-12)
advmod(pushed-14, when-13)
dep(have-22, pushed-14)
det(doors-16, both-15)
nsubj(open-18, doors-16)
aux(open-18, will-17)
ccomp(pushed-14, open-18)
nsubj(have-22, you-20)
aux(have-22, should-21)
dep(put-1, have-22)
advmod(time-25, just-23)
amod(time-25, enough-24)
nsubj(get-27, time-25)
aux(get-27, to-26)
xcomp(have-22, get-27)
prt(get-27, across-28)

(ROOT
  (S
    (S
      (NP (NNS eggs))
      (VP (VBP are)
        (NP
          (NP (DT a) (NN component))
          (PP (IN of)
            (NP (NN cake))))))
    (: -)
    (S
      (NP (DT a) (JJ single) (NN egg))
      (VP (VBZ is)
        (VP (VBN required)
          (S
            (VP (TO to)
              (VP (VB craft)
                (NP (DT each) (NN one))))))))
    (. .)))

nsubj(component-4, eggs-1)
cop(component-4, are-2)
det(component-4, a-3)
prep_of(component-4, cake-6)
det(egg-10, a-8)
amod(egg-10, single-9)
nsubjpass(required-12, egg-10)
xsubj(craft-14, egg-10)
auxpass(required-12, is-11)
parataxis(component-4, required-12)
aux(craft-14, to-13)
xcomp(required-12, craft-14)
det(one-16, each-15)
dobj(craft-14, one-16)

(ROOT
  (S
    (SBAR (IN while)
      (S
        (NP
          (NP (DT a)
            (ADJP (RB virtually) (JJ limitless))
            (NN number))
          (PP (IN of)
            (NP (NNS chickens))))
        (VP (MD can)
          (VP (VB be)
            (VP (VBN forced)
              (ADVP (RB anywhere)))))))
    (, ,)
    (NP
      (NP (DT the) (NN benefit))
      (PP (IN of)
        (NP
          (NP
            (ADJP (RB relatively) (JJ quick))
            (NN production))
          (PP (IN of)
            (NP
              (NP (DT a) (JJ large) (NN number))
              (PP (IN of)
                (NP (NNS eggs))))))))
    (VP (VBZ is)
      (VP (VBN offset)
        (PP (IN by)
          (NP
            (NP (DT the) (NN number))
            (PP (IN of)
              (NP
                (NP (NNS eggs))
                (VP (VBN required)
                  (PP (TO to)
                    (NP (JJ prime)))
                  (PP (JJ such)
                    (ADVP
                      (NP (DT a) (NN system))
                      (RB due))
                    (TO to)
                    (NP
                      (NP (DT the) (JJ low) (NN probability))
                      (PP (IN of)
                        (NP (DT a) (JJ thrown) (NN egg)))))
                  (S
                    (VP (VBG spawning)
                      (NP (DT a) (NN chicken)))))))))))
    (. .)))

mark(forced-10, while-1)
det(number-5, a-2)
advmod(limitless-4, virtually-3)
amod(number-5, limitless-4)
nsubjpass(forced-10, number-5)
prep_of(number-5, chickens-7)
aux(forced-10, can-8)
auxpass(forced-10, be-9)
advcl(offset-26, forced-10)
advmod(forced-10, anywhere-11)
det(benefit-14, the-13)
nsubjpass(offset-26, benefit-14)
advmod(quick-17, relatively-16)
amod(production-18, quick-17)
prep_of(benefit-14, production-18)
det(number-22, a-20)
amod(number-22, large-21)
prep_of(production-18, number-22)
prep_of(number-22, eggs-24)
auxpass(offset-26, is-25)
det(number-29, the-28)
agent(offset-26, number-29)
prep_of(number-29, eggs-31)
partmod(eggs-31, required-32)
prep_to(required-32, prime-34)
dep(required-32, such-35)
det(system-37, a-36)
dep(required-32, system-37)
det(probability-42, the-40)
amod(probability-42, low-41)
prep_due_to(required-32, probability-42)
det(egg-46, a-44)
amod(egg-46, thrown-45)
prep_of(probability-42, egg-46)
xcomp(required-32, spawning-47)
det(chicken-49, a-48)
dobj(spawning-47, chicken-49)

(ROOT
  (S (RB all)
    (NP (PRP you))
    (VP (VBP need)
      (S
        (VP (TO to)
          (VP (VB craft)
            (SBAR
              (S
                (NP (NNS shears))
                (VP (VBP are)
                  (NP (CD two) (NN iron) (NNS ingots)))))))))
    (. .)))

advmod(need-3, all-1)
nsubj(need-3, you-2)
xsubj(craft-5, you-2)
aux(craft-5, to-4)
xcomp(need-3, craft-5)
nsubj(ingots-10, shears-6)
cop(ingots-10, are-7)
num(ingots-10, two-8)
nn(ingots-10, iron-9)
ccomp(craft-5, ingots-10)

(ROOT
  (S
    (NP (NN minecraft) (NN beta) (CD 1.7))
    (VP (VBZ has)
      (VP (VBN added)
        (NP (NNS shears))
        (PP (IN for)
          (S
            (VP (VBG cutting)
              (NP (NN wool))
              (PP (IN from)
                (NP (NN sheep))))))))
    (. .)))

nn(beta-2, minecraft-1)
nsubj(added-5, beta-2)
num(beta-2, 1.7-3)
aux(added-5, has-4)
dobj(added-5, shears-6)
prepc_for(added-5, cutting-8)
dobj(cutting-8, wool-9)
prep_from(cutting-8, sheep-11)

(ROOT
  (S
    (ADVP (RB nonetheless))
    (, ,)
    (SBAR (IN if)
      (S
        (NP (EX there))
        (VP (VBZ is)
          (NP
            (NP (NN grass))
            (PP (IN near)
              (NP (DT the) (NNS torches)))))))
    (, ,)
    (NP (DT this))
    (VP (MD could)
      (ADVP (RB also))
      (VP (VB allow)
        (NP (JJ passive) (NNS mobs))
        (S
          (VP (TO to)
            (VP (VB spawn)
              (SBAR
                (WHNP (WDT which))
                (S
                  (VP (MD could) (RB then)
                    (VP (VB destroy)
                      (NP (DT the) (NN wheat))
                      (PP (IN by)
                        (S
                          (VP (VBG walking)
                            (PP (IN on)
                              (NP (PRP it)))))))))))))))
    (. .)))

advmod(allow-14, nonetheless-1)
mark(is-5, if-3)
expl(is-5, there-4)
dep(allow-14, is-5)
nsubj(is-5, grass-6)
det(torches-9, the-8)
prep_near(grass-6, torches-9)
nsubj(allow-14, this-11)
aux(allow-14, could-12)
advmod(allow-14, also-13)
amod(mobs-16, passive-15)
dobj(allow-14, mobs-16)
aux(spawn-18, to-17)
xcomp(allow-14, spawn-18)
nsubj(destroy-22, which-19)
aux(destroy-22, could-20)
advmod(destroy-22, then-21)
ccomp(spawn-18, destroy-22)
det(wheat-24, the-23)
dobj(destroy-22, wheat-24)
prepc_by(destroy-22, walking-26)
prep_on(walking-26, it-28)

(ROOT
  (S
    (NP (NNS fences))
    (VP (VBP are)
      (VP (VBN broken)
        (ADVP (RBS most) (RB quickly))
        (PP (IN with)
          (PP (IN with)
            (NP (DT an) (NN axe))))))
    (. .)))

nsubjpass(broken-3, fences-1)
auxpass(broken-3, are-2)
advmod(quickly-5, most-4)
advmod(broken-3, quickly-5)
prep(broken-3, with-6)
dep(with-6, with-7)
det(axe-9, an-8)
pobj(with-7, axe-9)

(ROOT
  (S
    (NP (NNS fences))
    (VP (MD can)
      (VP (VB be)
        (VP (VBN found)
          (ADVP (RB mainly))
          (PP (IN in)
            (NP (NN npc) (NNS villages)))
          (SBAR
            (WHADVP (WRB where))
            (S
              (NP (PRP they))
              (VP (VBP act)
                (PP (IN as)
                  (NP
                    (NP (JJ small) (NNS enclosures))
                    (PP (IN around)
                      (NP
                        (NP (DT some))
                        (PP (IN of)
                          (NP (DT the) (NNS houses)))))))
                (, ,)
                (PP
                  (PP (IN on)
                    (NP
                      (NP (NNS roofs))
                      (PP (IN of)
                        (NP
                          (NP (DT some) (NNS houses))
                          (, ,)
                          (NP
                            (NP (NNS lampposts))
                            (PP (IN with)
                              (NP
                                (NP (DT a) (NN block))
                                (PP (IN of)
                                  (NP
                                    (NP (JJ black) (NN wool))
                                    (VP (VBN placed)
                                      (PP (IN on)
                                        (NP (PRP it)))))))))))))
                  (CC or)
                  (PP (IN in)
                    (NP
                      (NP (NNS houses))
                      (PP (IN with)
                        (NP
                          (NP (DT a) (JJ wooden) (NN pressure) (NN plate))
                          (VP (VBN placed)
                            (PP (IN on)
                              (NP
                                (NP (NN top))
                                (PP (IN of)
                                  (NP (PRP it)))))))))))
                (, ,)
                (S
                  (VP (VBG forming)
                    (NP (DT a) (JJ table-like) (NN structure))))))))))
    (. .)))

nsubjpass(found-4, fences-1)
aux(found-4, can-2)
auxpass(found-4, be-3)
advmod(found-4, mainly-5)
nn(villages-8, npc-7)
prep_in(found-4, villages-8)
advmod(act-11, where-9)
nsubj(act-11, they-10)
nsubj(act-11', they-10)
advcl(found-4, act-11)
advcl(found-4, act-11')
conj_or(act-11, act-11')
amod(enclosures-14, small-13)
prep_as(act-11, enclosures-14)
prep_around(enclosures-14, some-16)
det(houses-19, the-18)
prep_of(some-16, houses-19)
prep_on(act-11, roofs-22)
det(houses-25, some-24)
prep_of(roofs-22, houses-25)
appos(houses-25, lampposts-27)
det(block-30, a-29)
prep_with(lampposts-27, block-30)
amod(wool-33, black-32)
prep_of(block-30, wool-33)
partmod(wool-33, placed-34)
prep_on(placed-34, it-36)
prep_in(act-11', houses-39)
det(plate-44, a-41)
amod(plate-44, wooden-42)
nn(plate-44, pressure-43)
prep_with(houses-39, plate-44)
partmod(plate-44, placed-45)
prep_on_top_of(placed-45, it-49)
xcomp(act-11, forming-51)
det(structure-54, a-52)
amod(structure-54, table-like-53)
dobj(forming-51, structure-54)

(ROOT
  (S
    (SBAR (IN since)
      (S
        (NP (NNS fences))
        (VP (MD can) (RB not)
          (VP (VB be)
            (VP (VBN jumped)
              (PRT (RP over)))))))
    (, ,)
    (NP (DT this))
    (VP (VBZ keeps)
      (NP (NNS players)
        (CC and)
        (NNS mobs))
      (PP (IN from)
        (S
          (VP (VBG falling)
            (PRT (RP off))
            (SBAR (IN while)
              (S
                (ADVP (RB still))
                (VP (VBG allowing)
                  (S
                    (NP (PRP them))
                    (VP (TO to)
                      (VP
                        (ADVP (RB easily))
                        (VB see)
                        (NP (JJ past) (DT the) (NN fence))))))))))))
    (. .)))

mark(jumped-6, since-1)
nsubjpass(jumped-6, fences-2)
aux(jumped-6, can-3)
neg(jumped-6, not-4)
auxpass(jumped-6, be-5)
advcl(keeps-10, jumped-6)
prt(jumped-6, over-7)
nsubj(keeps-10, this-9)
dobj(keeps-10, players-11)
dobj(keeps-10, mobs-13)
conj_and(players-11, mobs-13)
prepc_from(keeps-10, falling-15)
prt(falling-15, off-16)
mark(allowing-19, while-17)
advmod(allowing-19, still-18)
advcl(falling-15, allowing-19)
nsubj(see-23, them-20)
aux(see-23, to-21)
advmod(see-23, easily-22)
xcomp(allowing-19, see-23)
amod(fence-26, past-24)
det(fence-26, the-25)
dobj(see-23, fence-26)

(ROOT
  (S
    (NP (NNS fences))
    (VP (MD can)
      (ADVP (RB also))
      (VP (VB be)
        (VP (VBN used)
          (S
            (VP (TO to)
              (VP (VB fuel)
                (NP (DT a) (NN furnace)))))
          (, ,)
          (SBAR (IN although)
            (S
              (NP (DT the) (NN player))
              (VP (MD would)
                (VP (VB be)
                  (ADJP (JJR better) (RP off)
                    (S
                      (VP (VBG using)
                        (NP
                          (NP (DT the)
                            (QP (CD one)
                              (CC and)
                              (DT a) (NN half))
                            (JJ wooden) (NNS planks))
                          (VP (VBN used)
                            (S
                              (VP (TO to)
                                (VP (VB create)
                                  (NP (DT each) (NN fence))
                                  (PP (IN for)
                                    (S
                                      (VP (VBG fueling)
                                        (ADVP (RB instead))))))))))))))))))))
    (. .)))

nsubjpass(used-5, fences-1)
aux(used-5, can-2)
advmod(used-5, also-3)
auxpass(used-5, be-4)
aux(fuel-7, to-6)
purpcl(used-5, fuel-7)
det(furnace-9, a-8)
dobj(fuel-7, furnace-9)
mark(better-16, although-11)
det(player-13, the-12)
nsubj(better-16, player-13)
aux(better-16, would-14)
cop(better-16, be-15)
advcl(used-5, better-16)
dep(better-16, off-17)
dep(better-16, using-18)
det(planks-25, the-19)
number(half-23, one-20)
conj_and(half-23, a-22)
quantmod(half-23, a-22)
num(planks-25, a-22)
num(planks-25, half-23)
amod(planks-25, wooden-24)
dobj(using-18, planks-25)
partmod(planks-25, used-26)
aux(create-28, to-27)
xcomp(used-26, create-28)
det(fence-30, each-29)
dobj(create-28, fence-30)
prepc_for(create-28, fueling-32)
advmod(fueling-32, instead-33)

(ROOT
  (S
    (NP (NN fishing) (NNS rods))
    (VP (VBP allow)
      (S
        (NP (PRP you))
        (VP (TO to)
          (VP (VB catch)
            (NP (JJ raw) (NN fish))))))
    (. .)))

nn(rods-2, fishing-1)
nsubj(allow-3, rods-2)
nsubj(catch-6, you-4)
aux(catch-6, to-5)
xcomp(allow-3, catch-6)
amod(fish-8, raw-7)
dobj(catch-6, fish-8)

(ROOT
  (S
    (NP (NN fishing) (NNS rods))
    (VP (VBP are)
      (NP
        (NP (NNS tools))
        (SBAR
          (WHNP (WDT that))
          (S
            (VP (VBP are)
              (VP (VBN used)
                (PP (IN for)
                  (S
                    (VP (VBG obtaining)
                      (NP (NN fish)))))))))))
    (. .)))

nn(rods-2, fishing-1)
nsubj(tools-4, rods-2)
cop(tools-4, are-3)
nsubjpass(used-7, tools-4)
auxpass(used-7, are-6)
rcmod(tools-4, used-7)
prepc_for(used-7, obtaining-9)
dobj(obtaining-9, fish-10)

(ROOT
  (S
    (PP (IN in)
      (NP
        (NP (NN alpha) (CD 1.2.0))
        (, ,)
        (NP (DT the) (NN halloween) (NN update))))
    (, ,)
    (NP (NN fishing) (NNS rods))
    (VP (VBD were)
      (ADJP (JJ updated)
        (S
          (VP (TO to)
            (VP (VB be)
              (ADJP (JJ able)
                (S
                  (VP (TO to)
                    (VP (VB catch)
                      (NP (NN fish))
                      (PP (IN from)
                        (NP
                          (NP (DT any) (NN body))
                          (PP (IN of)
                            (NP (NN water))))))))))))))
    (. .)))

prep_in(updated-12, alpha-2)
num(alpha-2, 1.2.0-3)
det(update-7, the-5)
nn(update-7, halloween-6)
appos(alpha-2, update-7)
nn(rods-10, fishing-9)
nsubj(updated-12, rods-10)
cop(updated-12, were-11)
aux(able-15, to-13)
cop(able-15, be-14)
xcomp(updated-12, able-15)
aux(catch-17, to-16)
xcomp(able-15, catch-17)
dobj(catch-17, fish-18)
det(body-21, any-20)
prep_from(catch-17, body-21)
prep_of(body-21, water-23)

(ROOT
  (S
    (NP (DT a) (NN fishing) (NN rod))
    (VP (MD can)
      (VP (VB be)
        (VP (VBN crafted)
          (PP (IN from)
            (NP
              (NP (CD three) (NNS sticks))
              (CC and)
              (NP
                (NP (CD two) (NNS pieces))
                (PP (IN of)
                  (NP (NN string)))))))))
    (. .)))

det(rod-3, a-1)
nn(rod-3, fishing-2)
nsubjpass(crafted-6, rod-3)
aux(crafted-6, can-4)
auxpass(crafted-6, be-5)
num(sticks-9, three-8)
prep_from(crafted-6, sticks-9)
num(pieces-12, two-11)
prep_from(crafted-6, pieces-12)
conj_and(sticks-9, pieces-12)
prep_of(pieces-12, string-14)

(ROOT
  (S
    (NP (NN glass) (NNS panes))
    (VP (VBP are)
      (NP
        (NP (JJ transparent) (NNS blocks))
        (SBAR
          (WHNP (WDT which))
          (S
            (VP (MD can)
              (VP (VB be)
                (VP (VBN used)
                  (PP (IN as)
                    (NP (DT an) (NN alternative)))
                  (PP (TO to)
                    (NP (NN glass) (NNS blocks))))))))))
    (. .)))

nn(panes-2, glass-1)
nsubj(blocks-5, panes-2)
cop(blocks-5, are-3)
amod(blocks-5, transparent-4)
nsubjpass(used-9, blocks-5)
aux(used-9, can-7)
auxpass(used-9, be-8)
rcmod(blocks-5, used-9)
det(alternative-12, an-11)
prep_as(used-9, alternative-12)
nn(blocks-15, glass-14)
prep_to(used-9, blocks-15)

(ROOT
  (S
    (NP (PRP they))
    (VP (VBP connect)
      (PP (TO to)
        (NP
          (NP (JJ adjacent) (NNS panes))
          (, ,)
          (NP (JJ much) (JJ like) (NN redstone))
          (, ,)
          (NP (NN iron) (NNS bars))
          (, ,)
          (CC and)
          (NP (NNS fences)))))
    (. .)))

nsubj(connect-2, they-1)
amod(panes-5, adjacent-4)
prep_to(connect-2, panes-5)
amod(redstone-9, much-7)
amod(redstone-9, like-8)
prep_to(connect-2, redstone-9)
conj_and(panes-5, redstone-9)
nn(bars-12, iron-11)
prep_to(connect-2, bars-12)
conj_and(panes-5, bars-12)
prep_to(connect-2, fences-15)
conj_and(panes-5, fences-15)

(ROOT
  (S
    (NP (NN glass) (NNS panes))
    (VP (MD can)
      (VP (VB make)
        (NP
          (NP (NNS windows))
          (PP (IN of)
            (NP
              (QP (CD 166) (NN %) (JJR more))
              (NN area))))
        (PP (IN than)
          (NP (NN glass) (NNS blocks)))
        (, ,)
        (SBAR (IN because)
          (S
            (NP (RB only) (CD 6) (NN glass) (NNS blocks))
            (VP (VBP are)
              (VP (VBN required)
                (S
                  (VP (TO to)
                    (VP (VB make)
                      (NP (CD 16) (NN glass) (NNS panes)))))))))))
    (. .)))

nn(panes-2, glass-1)
nsubj(windows-5, panes-2)
aux(windows-5, can-3)
dep(windows-5, make-4)
number(%-8, 166-7)
num(area-10, %-8)
quantmod(%-8, more-9)
prep_of(windows-5, area-10)
nn(blocks-13, glass-12)
prep_than(windows-5, blocks-13)
mark(required-21, because-15)
advmod(blocks-19, only-16)
num(blocks-19, 6-17)
nn(blocks-19, glass-18)
nsubjpass(required-21, blocks-19)
xsubj(make-23, blocks-19)
auxpass(required-21, are-20)
advcl(windows-5, required-21)
aux(make-23, to-22)
xcomp(required-21, make-23)
num(panes-26, 16-24)
nn(panes-26, glass-25)
dobj(make-23, panes-26)

(ROOT
  (S
    (NP (NN glass) (NNS panes))
    (VP (MD can)
      (VP (VB be)
        (VP (VBN crafted)
          (PP (IN by)
            (S
              (VP (VBG placing)
                (PP
                  (NP (CD 6) (NN glass) (NNS blocks))
                  (IN in)
                  (NP (DT a) (JJ 2x3) (JJ horizontal) (NN rectangle)))))))))
    (. .)))

nn(panes-2, glass-1)
nsubjpass(crafted-5, panes-2)
aux(crafted-5, can-3)
auxpass(crafted-5, be-4)
agent(crafted-5, placing-7)
num(blocks-10, 6-8)
nn(blocks-10, glass-9)
dep(placing-7, blocks-10)
det(rectangle-15, a-12)
amod(rectangle-15, 2x3-13)
amod(rectangle-15, horizontal-14)
prep_in(placing-7, rectangle-15)

(ROOT
  (S
    (NP
      (NP (NNS torches))
      (, ,)
      (NP (NN redstone))
      (, ,)
      (NP (NNS jack-o-lanterns))
      (, ,)
      (NP (JJ minecart) (NNS tracks))
      (, ,)
      (NP (NNS doors))
      (, ,)
      (NP (NN pressure) (NNS plates))
      (, ,)
      (NP (NNS beds))
      (CC and)
      (NP (NNS ladders)))
    (VP (MD can) (RB not)
      (VP (VB be)
        (VP (VBN placed)
          (PP (IN on)
            (NP (NN glass))))))
    (. .)))

nsubjpass(placed-21, torches-1)
conj_and(torches-1, redstone-3)
nsubjpass(placed-21, redstone-3)
conj_and(torches-1, jack-o-lanterns-5)
nsubjpass(placed-21, jack-o-lanterns-5)
amod(tracks-8, minecart-7)
conj_and(torches-1, tracks-8)
nsubjpass(placed-21, tracks-8)
conj_and(torches-1, doors-10)
nsubjpass(placed-21, doors-10)
nn(plates-13, pressure-12)
conj_and(torches-1, plates-13)
nsubjpass(placed-21, plates-13)
conj_and(torches-1, beds-15)
nsubjpass(placed-21, beds-15)
conj_and(torches-1, ladders-17)
nsubjpass(placed-21, ladders-17)
aux(placed-21, can-18)
neg(placed-21, not-19)
auxpass(placed-21, be-20)
prep_on(placed-21, glass-23)

(ROOT
  (S
    (NP (NN glass) (NNS blocks))
    (VP (VBP are)
      (VP (VBN crafted)
        (PP (IN by)
          (S
            (VP (VBG smelting)
              (NP
                (NP (DT a) (NN block))
                (PP (IN of)
                  (NP (NN sand)))))))))
    (. .)))

nn(blocks-2, glass-1)
nsubjpass(crafted-4, blocks-2)
auxpass(crafted-4, are-3)
agent(crafted-4, smelting-6)
det(block-8, a-7)
dobj(smelting-6, block-8)
prep_of(block-8, sand-10)

(ROOT
  (S
    (NP (NNS hoes))
    (VP (VBP are)
      (NP
        (NP (NNS tools))
        (VP (VBN used)
          (S
            (VP (TO to)
              (VP (VB till)
                (NP (NN dirt)
                  (CC and)
                  (NN grass) (NNS blocks))
                (PP (IN into)
                  (NP
                    (NP (JJ farmland) (NNS blocks))
                    (, ,)
                    (NP
                      (NP (DT the) (JJ first) (NN step))
                      (PP (IN in)
                        (NP (NN farming) (NN wheat) (, ,) (NNS melons)
                          (CC or)
                          (NNS pumpkins))))))))))))
    (. .)))

nsubj(tools-3, hoes-1)
cop(tools-3, are-2)
xsubj(till-6, tools-3)
partmod(tools-3, used-4)
aux(till-6, to-5)
xcomp(used-4, till-6)
nn(blocks-10, dirt-7)
conj_and(dirt-7, grass-9)
nn(blocks-10, grass-9)
dobj(till-6, blocks-10)
amod(blocks-13, farmland-12)
prep_into(till-6, blocks-13)
det(step-17, the-15)
amod(step-17, first-16)
appos(blocks-13, step-17)
nn(wheat-20, farming-19)
prep_in(step-17, wheat-20)
prep_in(step-17, melons-22)
conj_or(wheat-20, melons-22)
prep_in(step-17, pumpkins-24)
conj_or(wheat-20, pumpkins-24)

(ROOT
  (S
    (NP (DT the) (NN hoe))
    (VP (VBZ is)
      (VP (VBN used)
        (S
          (VP (TO to)
            (VP (VB turn)
              (NP (NN dirt)
                (CC and)
                (NN grass) (NNS blocks))
              (PP (IN into)
                (NP
                  (NP (NN farmland))
                  (PP (IN for)
                    (NP (VBG producing) (NN wheat) (, ,) (NNS melons)
                      (CC or)
                      (NNS pumpkins))))))))))
    (. .)))

det(hoe-2, the-1)
nsubjpass(used-4, hoe-2)
xsubj(turn-6, hoe-2)
auxpass(used-4, is-3)
aux(turn-6, to-5)
xcomp(used-4, turn-6)
nn(blocks-10, dirt-7)
conj_and(dirt-7, grass-9)
nn(blocks-10, grass-9)
dobj(turn-6, blocks-10)
prep_into(turn-6, farmland-12)
amod(wheat-15, producing-14)
prep_for(farmland-12, wheat-15)
prep_for(farmland-12, melons-17)
conj_or(wheat-15, melons-17)
prep_for(farmland-12, pumpkins-19)
conj_or(wheat-15, pumpkins-19)

(ROOT
  (S
    (S
      (NP
        (NP (DT the) (NN material))
        (VP (VBN used)
          (PP (IN in)
            (NP
              (NP (DT the) (NN construction))
              (PP (IN of)
                (NP (DT the) (NN hoe)))))))
      (VP (VBZ has)
        (NP
          (NP (RB almost) (DT no) (NN effect))
          (PP (IN on)
            (NP
              (NP (DT the) (NN utility))
              (PP (IN of)
                (NP (DT the) (NN hoe))))))))
    (: -)
    (S
      (NP
        (NP (DT the) (NN process))
        (PP (IN of)
          (NP (NN tilling))))
      (VP (VBZ is)
        (ADVP (RB effectively))
        (ADJP (JJ instantaneous))
        (S
          (VP
            (ADVP (RB regardless)
              (PP (IN of)
                (NP
                  (NP (NN material))
                  (CC and)
                  (NP (DT all) (NNS hoes)))))
            (VB deal)
            (NP
              (NP (DT the) (JJ same) (NN damage))
              (PP (IN as)
                (NP (NNS fists))))
            (SBAR (IN if)
              (S
                (VP (VBN used)
                  (PP (IN in)
                    (NP (NN combat))))))))))
    (. .)))

det(material-2, the-1)
nsubj(has-10, material-2)
partmod(material-2, used-3)
det(construction-6, the-5)
prep_in(used-3, construction-6)
det(hoe-9, the-8)
prep_of(construction-6, hoe-9)
advmod(effect-13, almost-11)
det(effect-13, no-12)
dobj(has-10, effect-13)
det(utility-16, the-15)
prep_on(effect-13, utility-16)
det(hoe-19, the-18)
prep_of(utility-16, hoe-19)
det(process-22, the-21)
nsubj(instantaneous-27, process-22)
prep_of(process-22, tilling-24)
cop(instantaneous-27, is-25)
advmod(instantaneous-27, effectively-26)
parataxis(has-10, instantaneous-27)
prep_regardless_of(deal-34, material-30)
det(hoes-33, all-32)
conj_and(material-30, hoes-33)
prep_regardless_of(deal-34, hoes-33)
ccomp(instantaneous-27, deal-34)
det(damage-37, the-35)
amod(damage-37, same-36)
dobj(deal-34, damage-37)
prep_as(damage-37, fists-39)
mark(used-41, if-40)
advcl(deal-34, used-41)
prep_in(used-41, combat-43)

(ROOT
  (S
    (NP (NNS hoes))
    (VP (VBP are)
      (VP (VBN crafted)
        (S
          (VP (VBG using)
            (NP
              (NP (CD 2) (NNS sticks))
              (CC and)
              (NP
                (NP (CD 2) (NNS units))
                (PP (IN of)
                  (NP (DT a) (NN tool) (NN material)))))))))
    (: :) (. .)))

nsubjpass(crafted-3, hoes-1)
auxpass(crafted-3, are-2)
xcomp(crafted-3, using-4)
num(sticks-6, 2-5)
dobj(using-4, sticks-6)
num(units-9, 2-8)
dobj(using-4, units-9)
conj_and(sticks-6, units-9)
det(material-13, a-11)
nn(material-13, tool-12)
prep_of(units-9, material-13)

(ROOT
  (S
    (SBAR (IN once)
      (S
        (NP (PRP you))
        (VP (VBP have)
          (VP (VBN identified)
            (NP
              (NP (DT a) (JJ suitable) (NN location))
              (PP (IN for)
                (NP (PRP$ your) (JJ night-one) (NN shelter))))))))
    (, ,)
    (NP (PRP it))
    (VP (VBZ 's)
      (NP (NN time)
        (S
          (VP (TO to)
            (VP (VB convert)
              (NP (PRP$ your) (NN wood))
              (PP (IN into)
                (NP (JJ wooden) (NNS planks))))))))
    (. .)))

mark(identified-4, once-1)
nsubj(identified-4, you-2)
aux(identified-4, have-3)
advcl(time-15, identified-4)
det(location-7, a-5)
amod(location-7, suitable-6)
dobj(identified-4, location-7)
poss(shelter-11, your-9)
amod(shelter-11, night-one-10)
prep_for(location-7, shelter-11)
nsubj(time-15, it-13)
cop(time-15, 's-14)
aux(convert-17, to-16)
infmod(time-15, convert-17)
poss(wood-19, your-18)
dobj(convert-17, wood-19)
amod(planks-22, wooden-21)
prep_into(convert-17, planks-22)

(ROOT
  (S
    (SBAR
      (WHADVP (WRB when))
      (S
        (NP (PRP you))
        (VP (VBP place)
          (NP (NN wood))
          (PP (IN into)
            (NP (DT the) (JJ crafting) (NNS squares))))))
    (, ,)
    (NP
      (NP (DT each) (NN piece))
      (PP (IN of)
        (NP (NN wood))))
    (VP (MD can)
      (VP (VB be)
        (VP (VBN turned)
          (PP (IN into)
            (NP (CD 4) (JJ wooden) (NNS planks))))))
    (. .)))

advmod(place-3, when-1)
nsubj(place-3, you-2)
dep(turned-16, place-3)
dobj(place-3, wood-4)
det(squares-8, the-6)
amod(squares-8, crafting-7)
prep_into(place-3, squares-8)
det(piece-11, each-10)
nsubjpass(turned-16, piece-11)
prep_of(piece-11, wood-13)
aux(turned-16, can-14)
auxpass(turned-16, be-15)
num(planks-20, 4-18)
amod(planks-20, wooden-19)
prep_into(turned-16, planks-20)

(ROOT
  (S
    (VP (VB use)
      (NP (DT the) (NN wood) (NNS blocks))
      (SBAR
        (S
          (NP (PRP you))
          (VP (VBD gathered)
            (S
              (VP (TO to)
                (VP (VB create)
                  (NP (CD 24) (JJ wooden) (NNS planks)))))))))
    (. .)))

det(blocks-4, the-2)
nn(blocks-4, wood-3)
dobj(use-1, blocks-4)
nsubj(gathered-6, you-5)
xsubj(create-8, you-5)
dep(use-1, gathered-6)
aux(create-8, to-7)
xcomp(gathered-6, create-8)
num(planks-11, 24-9)
amod(planks-11, wooden-10)
dobj(create-8, planks-11)

(ROOT
  (SINV
    (S
      (NP (NNP sticks))
      (VP (VBP are)
        (VP (VBN required)
          (S
            (VP (TO to)
              (VP (VB build)
                (NP (NNS tools))))))))
    (, ,)
    (VP
      (ADVP (RB so))
      (VBP place)
      (NP
        (NP (CD two) (JJ wooden) (NNS planks))
        (PP (IN in)
          (NP (DT the) (NN crafting)))))
    (NP
      (NP (NN grid))
      (, ,)
      (NP
        (NP (CD one))
        (PP (IN on)
          (NP
            (NP (NN top))
            (PP (IN of)
              (NP (DT the) (JJ other)))))))
    (. .)))

nsubjpass(required-3, sticks-1)
xsubj(build-5, sticks-1)
auxpass(required-3, are-2)
ccomp(place-9, required-3)
aux(build-5, to-4)
xcomp(required-3, build-5)
dobj(build-5, tools-6)
advmod(place-9, so-8)
num(planks-12, two-10)
amod(planks-12, wooden-11)
dobj(place-9, planks-12)
det(crafting-15, the-14)
prep_in(planks-12, crafting-15)
nsubj(place-9, grid-16)
appos(grid-16, one-18)
det(other-23, the-22)
prep_on_top_of(one-18, other-23)

(ROOT
  (S
    (PP (IN with)
      (NP
        (NP (JJ wooden) (NNS planks)
          (CC and)
          (NNS sticks))
        (PP (IN in)
          (NP (PRP$ your) (NN inventory)))))
    (, ,)
    (NP (PRP you))
    (VP (VBP are)
      (ADJP (JJ ready)
        (S
          (VP (TO to)
            (VP (VB build)
              (S
                (NP (PRP you))
                (NP
                  (NP (JJ first) (NN set))
                  (PP (IN of)
                    (NP
                      (NP (JJ wooden) (NNS tools))
                      (PP (IN with)
                        (NP (PRP$ your) (JJ crafting) (NN table))))))))))))
    (. .)))

amod(planks-3, wooden-2)
prep_with(ready-12, planks-3)
conj_and(planks-3, sticks-5)
prep_with(ready-12, sticks-5)
poss(inventory-8, your-7)
prep_in(planks-3, inventory-8)
nsubj(ready-12, you-10)
cop(ready-12, are-11)
aux(build-14, to-13)
xcomp(ready-12, build-14)
nsubj(set-17, you-15)
amod(set-17, first-16)
xcomp(build-14, set-17)
amod(tools-20, wooden-19)
prep_of(set-17, tools-20)
poss(table-24, your-22)
amod(table-24, crafting-23)
prep_with(tools-20, table-24)

(ROOT
  (S
    (NP
      (NP (DT the) (JJ first) (NNS tools))
      (SBAR
        (S
          (NP (PRP you))
          (VP (MD should)
            (VP (VB create))))))
    (VP (VBP are)
      (NP
        (NP (DT a) (NN pickaxe))
        (, ,)
        (NP (DT an) (NN axe))
        (, ,)
        (NP (DT a) (NN shovel))
        (CC and)
        (NP (DT a) (NN sword))))
    (. .)))

det(tools-3, the-1)
amod(tools-3, first-2)
nsubj(pickaxe-9, tools-3)
nsubj(create-6, you-4)
aux(create-6, should-5)
rcmod(tools-3, create-6)
cop(pickaxe-9, are-7)
det(pickaxe-9, a-8)
det(axe-12, an-11)
conj_and(pickaxe-9, axe-12)
det(shovel-15, a-14)
conj_and(pickaxe-9, shovel-15)
det(sword-18, a-17)
conj_and(pickaxe-9, sword-18)

(ROOT
  (S
    (S
      (VP (VBG using)
        (NP (PRP$ your) (NN wood) (NN shovel))))
    (VP (MD will)
      (VP (VB be)
        (NP (DT the) (JJS quickest) (NN way))
        (S
          (VP (TO to)
            (VP (VB gather)
              (NP (NN dirt))
              (PP (IN for)
                (NP (JJ quick) (NNS walls)))
              (, ,)
              (ADVP (RB however)))))
        (SBAR (IN if)
          (S
            (NP (PRP you))
            (VP (VBP have)
              (VP (VBN stone)
                (ADJP (JJ available)
                  (SBAR
                    (S
                      (NP (PRP you))
                      (VP (MD can)
                        (VP (VB use)
                          (NP (PRP$ your) (NN wood) (NN pickaxe))
                          (S
                            (VP (TO to)
                              (VP (VB gather)
                                (NP (PRP it))
                                (PP (IN for)
                                  (NP (DT a) (RBR more) (JJ durable) (NN barrier)))))))))))))))))
    (. .)))

csubj(way-9, using-1)
poss(shovel-4, your-2)
nn(shovel-4, wood-3)
dobj(using-1, shovel-4)
aux(way-9, will-5)
cop(way-9, be-6)
det(way-9, the-7)
amod(way-9, quickest-8)
aux(gather-11, to-10)
xcomp(way-9, gather-11)
dobj(gather-11, dirt-12)
amod(walls-15, quick-14)
prep_for(gather-11, walls-15)
advmod(gather-11, however-17)
mark(stone-21, if-18)
nsubj(stone-21, you-19)
aux(stone-21, have-20)
advcl(way-9, stone-21)
acomp(stone-21, available-22)
nsubj(use-25, you-23)
aux(use-25, can-24)
ccomp(available-22, use-25)
poss(pickaxe-28, your-26)
nn(pickaxe-28, wood-27)
dobj(use-25, pickaxe-28)
aux(gather-30, to-29)
xcomp(use-25, gather-30)
dobj(gather-30, it-31)
det(barrier-36, a-33)
advmod(barrier-36, more-34)
amod(barrier-36, durable-35)
prep_for(gather-30, barrier-36)

(ROOT
  (S
    (NP
      (NP (DT the) (JJ last)
        (CC and)
        (JJ final) (NN step))
      (PP (TO to)
        (NP (DT a)
          (ADJP (JJ safe)
            (CC and)
            (JJ sound))
          (JJ first) (NN night))))
    (, ,)
    (VP (VBZ is)
      (VP (VBG finding)
        (NP
          (NP (NN cobblestone))
          (PP (IN for)
            (NP (DT a) (NN furnace))))))
    (. .)))

det(step-5, the-1)
amod(step-5, last-2)
conj_and(last-2, final-4)
amod(step-5, final-4)
nsubj(finding-15, step-5)
det(night-12, a-7)
amod(night-12, safe-8)
conj_and(safe-8, sound-10)
amod(night-12, sound-10)
amod(night-12, first-11)
prep_to(step-5, night-12)
aux(finding-15, is-14)
dobj(finding-15, cobblestone-16)
det(furnace-19, a-18)
prep_for(cobblestone-16, furnace-19)

(ROOT
  (S
    (SBAR (IN if)
      (S
        (NP (PRP you))
        (VP (MD ca) (RB n't)
          (VP (VB find)
            (NP (DT any) (JJ visible) (NN stone))))))
    (, ,)
    (VP (VB use)
      (NP (PRP$ your) (NN wood) (NN shovel))
      (S
        (VP (TO to)
          (VP (VB dig)
            (PP (IN through)
              (NP
                (NP (DT a) (JJ few) (NNS layers))
                (PP (IN of)
                  (NP (NN dirt)
                    (CC or)
                    (NN grass)))))
            (SBAR (IN until)
              (S
                (NP (PRP you))
                (VP (VBP start)
                  (S
                    (VP (TO to)
                      (VP (VB see)
                        (NP (DT some))))))))))))
    (. .)))

mark(find-5, if-1)
nsubj(find-5, you-2)
aux(find-5, ca-3)
neg(find-5, n't-4)
advcl(use-10, find-5)
det(stone-8, any-6)
amod(stone-8, visible-7)
dobj(find-5, stone-8)
poss(shovel-13, your-11)
nn(shovel-13, wood-12)
dobj(use-10, shovel-13)
aux(dig-15, to-14)
xcomp(use-10, dig-15)
det(layers-19, a-17)
amod(layers-19, few-18)
prep_through(dig-15, layers-19)
prep_of(layers-19, dirt-21)
prep_of(layers-19, grass-23)
conj_or(dirt-21, grass-23)
mark(start-26, until-24)
nsubj(start-26, you-25)
xsubj(see-28, you-25)
advcl(dig-15, start-26)
aux(see-28, to-27)
xcomp(start-26, see-28)
dobj(see-28, some-29)

(ROOT
  (S
    (SBAR (IN once)
      (S
        (NP (PRP you))
        (VP (VBP find)
          (NP (NN stone)))))
    (, ,)
    (VP (VB use)
      (NP (PRP$ your) (NN wood) (NN pickaxe))
      (S
        (VP (TO to)
          (VP (VB gather)
            (NP (CD 20) (JJ cobblestone) (NNS blocks))))))
    (. .)))

mark(find-3, once-1)
nsubj(find-3, you-2)
advcl(use-6, find-3)
dobj(find-3, stone-4)
poss(pickaxe-9, your-7)
nn(pickaxe-9, wood-8)
dobj(use-6, pickaxe-9)
aux(gather-11, to-10)
xcomp(use-6, gather-11)
num(blocks-14, 20-12)
amod(blocks-14, cobblestone-13)
dobj(gather-11, blocks-14)

(ROOT
  (S
    (NP
      (NP (NN return))
      (PP (TO to)
        (NP
          (NP (PRP$ your) (JJ crafting) (NN table))
          (PP (IN with)
            (NP (PRP$ your) (NN cobblestone))))))
    (VP (VBZ blocks)
      (S
        (VP (TO to)
          (VP (VB start)
            (S
              (VP (VBG building)
                (NP (PRP$ your) (NN furnace))))))))
    (. .)))

nsubj(blocks-9, return-1)
xsubj(start-11, return-1)
poss(table-5, your-3)
amod(table-5, crafting-4)
prep_to(return-1, table-5)
poss(cobblestone-8, your-7)
prep_with(table-5, cobblestone-8)
aux(start-11, to-10)
xcomp(blocks-9, start-11)
xcomp(start-11, building-12)
poss(furnace-14, your-13)
dobj(building-12, furnace-14)

(ROOT
  (S
    (S
      (VP (TO to)
        (VP (VB craft)
          (S
            (NP
              (NP (DT the) (NN furnace))
              (, ,)
              (NP
                (NP (NN place) (CD one) (NN block))
                (PP (IN of)
                  (NP
                    (NP (NN cobblestone))
                    (PP (IN in)
                      (NP
                        (NP (DT each))
                        (PP (IN of)
                          (NP (DT the) (JJ outer) (CD crafting) (NNS squares))))))))
              (, ,))
            (VP (VBG leaving)
              (NP (RB only) (DT the) (JJ center-middle) (NN square)))))))
    (VP (VBP empty))
    (. .)))

aux(craft-2, to-1)
csubj(empty-24, craft-2)
det(furnace-4, the-3)
nsubj(leaving-19, furnace-4)
nn(block-8, place-6)
num(block-8, one-7)
appos(furnace-4, block-8)
prep_of(block-8, cobblestone-10)
prep_in(cobblestone-10, each-12)
det(squares-17, the-14)
amod(squares-17, outer-15)
num(squares-17, crafting-16)
prep_of(each-12, squares-17)
dep(craft-2, leaving-19)
advmod(square-23, only-20)
det(square-23, the-21)
amod(square-23, center-middle-22)
dobj(leaving-19, square-23)

(ROOT
  (S
    (ADVP (RB now)
      (SBAR (IN that)
        (S
          (NP (PRP you))
          (VP (VBP have)
            (NP (DT a) (NN furnace))))))
    (, ,)
    (NP (PRP you))
    (VP (MD can)
      (VP (VB craft)
        (NP (NNS torches))
        (PP (IN for)
          (NP
            (NP (DT a) (JJ light) (NN source))
            (PP (IN at)
              (NP (NN night)))))))
    (. .)))

advmod(craft-10, now-1)
dep(have-4, that-2)
nsubj(have-4, you-3)
dep(now-1, have-4)
det(furnace-6, a-5)
dobj(have-4, furnace-6)
nsubj(craft-10, you-8)
aux(craft-10, can-9)
dobj(craft-10, torches-11)
det(source-15, a-13)
amod(source-15, light-14)
prep_for(craft-10, source-15)
prep_at(source-15, night-17)

(ROOT
  (S
    (VP
      (VP (VB open)
        (NP (DT the) (NN furnace)))
      (, ,)
      (CC and)
      (VP (VB place)
        (NP
          (NP
            (NP (DT a) (JJ wooden) (NN plank))
            (PP (IN in)
              (NP (DT the) (JJ bottom) (NN square))))
          (CC and)
          (NP
            (NP (DT a) (JJ few) (NN wood) (NNS blocks))
            (PP (IN in)
              (NP (DT the) (JJ top) (NN square)))))
        (S
          (VP (TO to)
            (VP (VB make)
              (ADJP (JJ charcoal)))))))
    (. .)))

det(furnace-3, the-2)
dobj(open-1, furnace-3)
conj_and(open-1, place-6)
det(plank-9, a-7)
amod(plank-9, wooden-8)
dobj(place-6, plank-9)
det(square-13, the-11)
amod(square-13, bottom-12)
prep_in(plank-9, square-13)
det(blocks-18, a-15)
amod(blocks-18, few-16)
nn(blocks-18, wood-17)
dobj(place-6, blocks-18)
conj_and(plank-9, blocks-18)
det(square-22, the-20)
amod(square-22, top-21)
prep_in(blocks-18, square-22)
aux(make-24, to-23)
xcomp(place-6, make-24)
acomp(make-24, charcoal-25)

(ROOT
  (S
    (NP
      (NP (PRP$ your) (JJ first) (NN piece))
      (PP (IN of)
        (NP (NN charcoal))))
    (VP (MD can)
      (VP (VB be)
        (VP (VBN used)
          (S
            (VP (TO to)
              (VP (VB keep)
                (SBAR
                  (S
                    (NP (DT the) (NN furnace))
                    (VP (VBD lit)
                      (SBAR (IN while)
                        (S
                          (NP (PRP you))
                          (VP (VBP continue)
                            (S
                              (VP (TO to)
                                (VP (VB convert)
                                  (NP (NN wood) (NNS blocks))
                                  (PP (IN into)
                                    (NP (NN charcoal))))))))))))))))))
    (. .)))

poss(piece-3, your-1)
amod(piece-3, first-2)
nsubjpass(used-8, piece-3)
prep_of(piece-3, charcoal-5)
aux(used-8, can-6)
auxpass(used-8, be-7)
aux(keep-10, to-9)
purpcl(used-8, keep-10)
det(furnace-12, the-11)
nsubj(lit-13, furnace-12)
ccomp(keep-10, lit-13)
mark(continue-16, while-14)
nsubj(continue-16, you-15)
advcl(lit-13, continue-16)
aux(convert-18, to-17)
xcomp(continue-16, convert-18)
nn(blocks-20, wood-19)
dobj(convert-18, blocks-20)
prep_into(convert-18, charcoal-22)

(ROOT
  (S
    (PP (IN with)
      (NP
        (NP (PRP$ your) (VBG remaining) (NN sticks))
        (CC and)
        (NP (RB newly) (VBN converted) (NNS charcoal))))
    (, ,)
    (NP (PRP you))
    (VP (MD can)
      (ADVP (RB now))
      (VP (VB make)
        (NP (NNS torches))))
    (. .)))

poss(sticks-4, your-2)
amod(sticks-4, remaining-3)
prep_with(make-13, sticks-4)
advmod(charcoal-8, newly-6)
amod(charcoal-8, converted-7)
conj_and(sticks-4, charcoal-8)
prep_with(make-13, charcoal-8)
nsubj(make-13, you-10)
aux(make-13, can-11)
advmod(make-13, now-12)
dobj(make-13, torches-14)

(ROOT
  (S
    (VP
      (VP (VB open)
        (NP (PRP$ your) (NN inventory))
        (S
          (VP (VBG crafting)
            (NP
              (NP (NN space))
              (CC or)
              (NP (DT the) (JJ crafting) (NN table))))))
      (CC and)
      (VP (VB stack)
        (ADJP (JJ charcoal)
          (PP (IN on)
            (NP
              (NP (NN top))
              (PP (IN of)
                (NP (NNP sticks))))))
        (S
          (VP (TO to)
            (VP (VB make)
              (NP (NNS torches)))))))
    (. .)))

poss(inventory-3, your-2)
dobj(open-1, inventory-3)
xcomp(open-1, crafting-4)
dobj(crafting-4, space-5)
det(table-9, the-7)
amod(table-9, crafting-8)
dobj(crafting-4, table-9)
conj_or(space-5, table-9)
dep(charcoal-12, stack-11)
conj_and(open-1, charcoal-12)
prep_on_top_of(charcoal-12, sticks-16)
aux(make-18, to-17)
xcomp(charcoal-12, make-18)
dobj(make-18, torches-19)

(ROOT
  (S
    (NP
      (NP (CD one) (NN stick))
      (CC and)
      (NP
        (NP (CD one) (NN piece))
        (PP (IN of)
          (NP (NN charcoal)))))
    (VP (MD will)
      (VP (VB make)
        (NP (CD 4) (NNS torches))))
    (. .)))

num(stick-2, one-1)
nsubj(make-9, stick-2)
num(piece-5, one-4)
conj_and(stick-2, piece-5)
nsubj(make-9, piece-5)
prep_of(piece-5, charcoal-7)
aux(make-9, will-8)
num(torches-11, 4-10)
dobj(make-9, torches-11)

(ROOT
  (S
    (S
      (NP (PRP$ your) (JJ night-one) (NN shelter))
      (VP (VBZ is)
        (VP (VBN finished))))
    (, ,)
    (CC and)
    (S
      (NP (PRP you))
      (VP (MD should)
        (VP (VB have)
          (NP
            (NP (DT a) (NN set))
            (PP (IN of)
              (NP
                (NP (JJ wooden) (NNS tools))
                (, ,)
                (NP (DT some) (NNS torches))
                (, ,)
                (NP (DT a) (NN furnace))
                (CC and)
                (NP (DT a) (JJ crafting) (NN table))))))))
    (. .)))

poss(shelter-3, your-1)
amod(shelter-3, night-one-2)
nsubjpass(finished-5, shelter-3)
auxpass(finished-5, is-4)
nsubj(have-10, you-8)
aux(have-10, should-9)
conj_and(finished-5, have-10)
det(set-12, a-11)
dobj(have-10, set-12)
amod(tools-15, wooden-14)
prep_of(set-12, tools-15)
det(torches-18, some-17)
prep_of(set-12, torches-18)
conj_and(tools-15, torches-18)
det(furnace-21, a-20)
prep_of(set-12, furnace-21)
conj_and(tools-15, furnace-21)
det(table-25, a-23)
amod(table-25, crafting-24)
prep_of(set-12, table-25)
conj_and(tools-15, table-25)

(ROOT
  (S
    (NP (DT the) (NN iron) (NNS bars))
    (VP (MD can)
      (VP (VB be)
        (VP (VBN placed)
          (PP (IN in)
            (NP
              (NP (RB much) (DT the) (JJ same) (NN way))
              (PP (IN as)
                (NP
                  (NP (NNS fences))
                  (CC or)
                  (NP (DT a) (NN glass) (NN pane)))))))))
    (. .)))

det(bars-3, the-1)
nn(bars-3, iron-2)
nsubjpass(placed-6, bars-3)
aux(placed-6, can-4)
auxpass(placed-6, be-5)
advmod(way-11, much-8)
det(way-11, the-9)
amod(way-11, same-10)
prep_in(placed-6, way-11)
prep_as(way-11, fences-13)
det(pane-17, a-15)
nn(pane-17, glass-16)
prep_as(way-11, pane-17)
conj_or(fences-13, pane-17)

(ROOT
  (S
    (VP (VBD obtained) (: :)
      (S
        (S
          (VP (VBG smelting)
            (PP (IN of)
              (NP (NN iron) (NN ore)))))
        (, ,)
        (S
          (VP (VBG crafting)
            (PP (IN of)
              (NP
                (NP (NNS blocks))
                (PP (IN of)
                  (NP (NN iron)))))))
        (, ,)
        (CC and)
        (S
          (VP (VBN found)
            (PP (IN in)
              (NP (NN dungeon)
                (CC and)
                (NN stronghold) (NNS chests)))))))
    (. .)))

parataxis(obtained-1, smelting-3)
nn(ore-6, iron-5)
prep_of(smelting-3, ore-6)
parataxis(obtained-1, crafting-8)
conj_and(smelting-3, crafting-8)
prep_of(crafting-8, blocks-10)
prep_of(blocks-10, iron-12)
parataxis(obtained-1, found-15)
conj_and(smelting-3, found-15)
nn(chests-20, dungeon-17)
conj_and(dungeon-17, stronghold-19)
nn(chests-20, stronghold-19)
prep_in(found-15, chests-20)

(ROOT
  (FRAG
    (VP (VBZ creates))
    (: :)
    (NP
      (NP (NN sword))
      (, ,)
      (NP (NN armor))
      (, ,)
      (NP
        (NP (NNS tools))
        (, ,)
        (NP
          (NP (NNS blocks))
          (PP (IN of)
            (NP (NN iron) (, ,) (NN compass) (, ,) (NNS rails) (, ,) (NN flint)
              (CC and)
              (NN steel) (, ,) (NNS doors) (, ,) (NN minecart) (, ,)
              (CC and)
              (NN iron) (NNS bars))))))
    (. .)))

dep(creates-1, sword-3)
appos(sword-3, armor-5)
appos(sword-3, tools-7)
appos(tools-7, blocks-9)
nn(minecart-23, iron-11)
conj_and(iron-11, compass-13)
nn(minecart-23, compass-13)
conj_and(iron-11, rails-15)
nn(minecart-23, rails-15)
conj_and(iron-11, flint-17)
nn(minecart-23, flint-17)
conj_and(iron-11, steel-19)
nn(minecart-23, steel-19)
dep(minecart-23, doors-21)
prep_of(blocks-9, minecart-23)
nn(bars-27, iron-26)
prep_of(blocks-9, bars-27)
conj_and(minecart-23, bars-27)

(ROOT
  (S
    (NP (NN iron) (NNS ingots))
    (VP (VBP are)
      (VP (VBN used)
        (S
          (VP (TO to)
            (VP (VB make)
              (S
                (NP
                  (NP (DT a) (JJ wide) (NN variety))
                  (PP (IN of)
                    (NP
                      (NP (JJ useful) (NNS objects))
                      (PP (VBG including)
                        (NP
                          (NP (NNS minecarts))
                          (, ,)
                          (NP (JJ minecart) (NNS tracks))
                          (, ,)
                          (NP (NNS compasses))
                          (, ,)
                          (NP (NN armor))
                          (, ,)
                          (NP (NNS buckets))
                          (, ,)
                          (CC and)
                          (NP (NNS tools)))))))
                (ADJP (JJ capable)
                  (PP (IN of)
                    (S
                      (VP (VBG mining)
                        (NP
                          (NP (NN anything))
                          (PP (CC but)
                            (NP (NN obsidian)
                              (CC and)
                              (NN bedrock))))))))))))))
    (. .)))

nn(ingots-2, iron-1)
nsubjpass(used-4, ingots-2)
xsubj(make-6, ingots-2)
auxpass(used-4, are-3)
aux(make-6, to-5)
xcomp(used-4, make-6)
det(variety-9, a-7)
amod(variety-9, wide-8)
nsubj(capable-27, variety-9)
amod(objects-12, useful-11)
prep_of(variety-9, objects-12)
prep_including(objects-12, minecarts-14)
amod(tracks-17, minecart-16)
prep_including(objects-12, tracks-17)
conj_and(minecarts-14, tracks-17)
prep_including(objects-12, compasses-19)
conj_and(minecarts-14, compasses-19)
prep_including(objects-12, armor-21)
conj_and(minecarts-14, armor-21)
prep_including(objects-12, buckets-23)
conj_and(minecarts-14, buckets-23)
prep_including(objects-12, tools-26)
conj_and(minecarts-14, tools-26)
xcomp(make-6, capable-27)
prepc_of(capable-27, mining-29)
dobj(mining-29, anything-30)
prep(anything-30, but-31)
dep(but-31, obsidian-32)
dep(but-31, bedrock-34)
conj_and(obsidian-32, bedrock-34)

(ROOT
  (S
    (PP (IN like)
      (NP (NNS torches)))
    (, ,)
    (NP (DT a) (NN ladder))
    (VP
      (VP (VBZ occupies)
        (NP (CD one) (NN block))
        (PP (IN from)
          (NP
            (NP (DT the) (NN side))
            (SBAR
              (WHPP (IN on)
                (WHNP (WDT which)))
              (S
                (NP (PRP it))
                (VP (VBZ is)
                  (ADJP (VBN placed))))))))
      (CC and)
      (VP (MD can) (RB not)
        (VP (VB be)
          (VP (VBN placed)
            (PP (IN on)
              (NP (NN glass)))))))
    (. .)))

prep_like(occupies-6, torches-2)
det(ladder-5, a-4)
nsubjpass(occupies-6, ladder-5)
nsubjpass(placed-21, ladder-5)
num(block-8, one-7)
dobj(occupies-6, block-8)
dobj(placed-21, block-8)
det(side-11, the-10)
prep_from(occupies-6, side-11)
rel(placed-16, which-13)
nsubjpass(placed-16, it-14)
auxpass(placed-16, is-15)
rcmod(side-11, placed-16)
aux(placed-21, can-18)
neg(placed-21, not-19)
auxpass(placed-21, be-20)
conj_and(occupies-6, placed-21)
prep_on(placed-21, glass-23)

(ROOT
  (S
    (NP (NN milk))
    (VP (VBZ is)
      (NP
        (NP (DT an) (NN item))
        (VP (VBN obtained)
          (PP (IN from)
            (NP (NNS cows)
              (CC and)
              (NNS mooshrooms)))
          (PP (IN by)
            (S
              (VP (VBG right-clicking)
                (PP (IN on)
                  (NP (PRP$ their) (NNS udders)))
                (PP (IN with)
                  (NP (DT an) (JJ empty) (NN bucket)))))))))
    (. .)))

nsubj(item-4, milk-1)
cop(item-4, is-2)
det(item-4, an-3)
partmod(item-4, obtained-5)
prep_from(obtained-5, cows-7)
prep_from(obtained-5, mooshrooms-9)
conj_and(cows-7, mooshrooms-9)
agent(obtained-5, right-clicking-11)
poss(udders-14, their-13)
prep_on(right-clicking-11, udders-14)
det(bucket-18, an-16)
amod(bucket-18, empty-17)
prep_with(right-clicking-11, bucket-18)

(ROOT
  (S
    (NP (NN milk) (NNS buckets))
    (VP (MD can)
      (VP (VB be)
        (VP (VBN emptied)
          (PP (IN by)
            (S
              (VP (VBG right-clicking)
                (PP (IN on)
                  (NP
                    (NP (DT a) (NN block))
                    (, ,)
                    (SBAR
                      (WHNP (WDT which))
                      (S
                        (VP (MD will)
                          (VP (VB pour)
                            (PRT (RP out))
                            (NP (DT the) (NN milk))))))))))))))
    (. .)))

nn(buckets-2, milk-1)
nsubjpass(emptied-5, buckets-2)
aux(emptied-5, can-3)
auxpass(emptied-5, be-4)
agent(emptied-5, right-clicking-7)
det(block-10, a-9)
prep_on(right-clicking-7, block-10)
nsubj(pour-14, block-10)
aux(pour-14, will-13)
rcmod(block-10, pour-14)
prt(pour-14, out-15)
det(milk-17, the-16)
dobj(pour-14, milk-17)

(ROOT
  (S
    (NP
      (NP (NN right))
      (VP (VBG clicking)
        (PP (IN with)
          (NP
            (NP (DT a) (JJ full) (NN bucket))
            (PP (IN of)
              (NP (NN milk)))))))
    (VP (MD will)
      (VP (VB start)
        (NP (DT the) (JJ eating) (NN animation))))
    (. .)))

nsubj(start-10, right-1)
partmod(right-1, clicking-2)
det(bucket-6, a-4)
amod(bucket-6, full-5)
prep_with(clicking-2, bucket-6)
prep_of(bucket-6, milk-8)
aux(start-10, will-9)
det(animation-13, the-11)
amod(animation-13, eating-12)
dobj(start-10, animation-13)

(ROOT
  (S
    (NP (NN farming))
    (VP (VBZ gives)
      (NP (NNS players))
      (NP (DT a) (NN way)
        (S
          (VP (TO to)
            (VP
              (VP (VB till)
                (NP (NN soil)))
              (, ,)
              (VP (VB plant)
                (NP (NNS seeds)))
              (CC and)
              (VP (VB grow)
                (NP (NN wheat))))))))
    (. .)))

nsubj(gives-2, farming-1)
iobj(gives-2, players-3)
det(way-5, a-4)
dobj(gives-2, way-5)
aux(till-7, to-6)
infmod(way-5, till-7)
dobj(till-7, soil-8)
infmod(way-5, plant-10)
conj_and(till-7, plant-10)
dobj(plant-10, seeds-11)
infmod(way-5, grow-13)
conj_and(till-7, grow-13)
dobj(grow-13, wheat-14)

(ROOT
  (S
    (S
      (ADJP (RB once) (VBN harvested)))
    (, ,)
    (NP (PRP they))
    (VP (MD will)
      (VP (VB drop)
        (PP (IN between)
          (NP
            (NP (CD 0)
              (CC and)
              (CD 3) (NNS seeds))
            (CC and)
            (NP (CD 1) (NN wheat))))))
    (. .)))

advmod(harvested-2, once-1)
ccomp(drop-6, harvested-2)
nsubj(drop-6, they-4)
aux(drop-6, will-5)
nn(seeds-11, 0-8)
conj_and(0-8, 3-10)
nn(seeds-11, 3-10)
prep_between(drop-6, seeds-11)
num(wheat-14, 1-13)
prep_between(drop-6, wheat-14)
conj_and(seeds-11, wheat-14)

(ROOT
  (S
    (ADVP (RB lit))
    (, ,)
    (NP (JJ grassy) (NNS areas))
    (VP (MD will)
      (VP
        (VP (VB attract)
          (NP (NNS critters))
          (, ,)
          (S (RB so)
            (VP (VB make)
              (ADJP (JJ sure)
                (SBAR
                  (S
                    (NP (PRP you))
                    (VP (VBD put)
                      (NP (DT a) (NN fence))
                      (PP (IN around)
                        (NP (PRP$ your) (NNS crops))))))))))
        (CC and)
        (VP (VB replace)
          (NP
            (NP (DT the) (NN grass))
            (PP (IN with)
              (NP (NN cobblestone))))
          (S
            (VP (TO to)
              (VP (VB keep)
                (S
                  (NP (PRP$ your) (NNS crops))
                  (ADJP (JJ safe)))))))))
    (. .)))

advmod(attract-6, lit-1)
amod(areas-4, grassy-3)
nsubj(attract-6, areas-4)
nsubj(replace-20, areas-4)
aux(attract-6, will-5)
dobj(attract-6, critters-7)
advmod(make-10, so-9)
dep(attract-6, make-10)
acomp(make-10, sure-11)
nsubj(put-13, you-12)
ccomp(sure-11, put-13)
det(fence-15, a-14)
dobj(put-13, fence-15)
poss(crops-18, your-17)
prep_around(put-13, crops-18)
conj_and(attract-6, replace-20)
det(grass-22, the-21)
dobj(replace-20, grass-22)
prep_with(grass-22, cobblestone-24)
aux(keep-26, to-25)
xcomp(replace-20, keep-26)
poss(crops-28, your-27)
nsubj(safe-29, crops-28)
xcomp(keep-26, safe-29)

(ROOT
  (S
    (NP (NN minecraft) (NN beta) (CD 1.7))
    (VP (VBZ has)
      (VP (VBN added)
        (NP (NNS shears))
        (PP (IN for)
          (S
            (VP (VBG cutting)
              (NP (NN wool))
              (PP (IN from)
                (NP (NN sheep))))))))
    (. .)))

nn(beta-2, minecraft-1)
nsubj(added-5, beta-2)
num(beta-2, 1.7-3)
aux(added-5, has-4)
dobj(added-5, shears-6)
prepc_for(added-5, cutting-8)
dobj(cutting-8, wool-9)
prep_from(cutting-8, sheep-11)

(ROOT
  (S
    (NP (NN sugar) (NN cane))
    (VP (MD can)
      (VP (VB be)
        (VP (VBN found)
          (PP (IN on)
            (NP
              (NP (NN grass))
              (, ,)
              (NP (NN sand))
              (, ,)
              (CC or)
              (NP
                (NP (NN dirt) (NNS blocks))
                (SBAR
                  (WHNP (WDT that))
                  (S
                    (VP (VBP are)
                      (ADJP (JJ close)
                        (PP (TO to)
                          (NP (NN water)))))))))))))
    (. .)))

nn(cane-2, sugar-1)
nsubjpass(found-5, cane-2)
aux(found-5, can-3)
auxpass(found-5, be-4)
prep_on(found-5, grass-7)
prep_on(found-5, sand-9)
conj_or(grass-7, sand-9)
nn(blocks-13, dirt-12)
prep_on(found-5, blocks-13)
conj_or(grass-7, blocks-13)
nsubj(close-16, blocks-13)
cop(close-16, are-15)
rcmod(blocks-13, close-16)
prep_to(close-16, water-18)

(ROOT
  (S
    (NP (NN sugar) (NN cane))
    (VP (MD can)
      (VP (VB be)
        (VP (VBN used)
          (S
            (VP (TO to)
              (VP (VB make)
                (NP (NN paper)
                  (CC and)
                  (NN sugar))))))))
    (. .)))

nn(cane-2, sugar-1)
nsubjpass(used-5, cane-2)
aux(used-5, can-3)
auxpass(used-5, be-4)
aux(make-7, to-6)
purpcl(used-5, make-7)
dobj(make-7, paper-8)
dobj(make-7, sugar-10)
conj_and(paper-8, sugar-10)

(ROOT
  (S
    (NP (NN mushroom) (NN stew))
    (VP (VBZ is)
      (NP
        (NP (DT a) (NN food))
        (SBAR
          (WHNP (WDT that))
          (S
            (VP (MD can)
              (VP (VB be)
                (VP (VBN crafted)
                  (PP (IN by)
                    (S
                      (VP (VBG combining)
                        (NP (DT a) (NN bowl))
                        (PP (IN with)
                          (NP
                            (NP (CD one))
                            (PP (IN of)
                              (NP
                                (NP (DT each) (NN type))
                                (PP (IN of)
                                  (NP (NN mushroom)))))))))))))))))
    (. .)))

nn(stew-2, mushroom-1)
nsubj(food-5, stew-2)
cop(food-5, is-3)
det(food-5, a-4)
nsubjpass(crafted-9, food-5)
aux(crafted-9, can-7)
auxpass(crafted-9, be-8)
rcmod(food-5, crafted-9)
agent(crafted-9, combining-11)
det(bowl-13, a-12)
dobj(combining-11, bowl-13)
prep_with(combining-11, one-15)
det(type-18, each-17)
prep_of(one-15, type-18)
prep_of(type-18, mushroom-20)

(ROOT
  (S
    (NP (NN mushroom) (NN stew))
    (VP (MD can)
      (ADVP (RB also))
      (VP (VB be)
        (VP (VBN collected)
          (PP (IN by)
            (S
              (VP (VBG using)
                (NP (DT a) (NN bowl))
                (PP (IN on)
                  (NP (DT a) (NN mooshroom)))))))))
    (. .)))

nn(stew-2, mushroom-1)
nsubjpass(collected-6, stew-2)
aux(collected-6, can-3)
advmod(collected-6, also-4)
auxpass(collected-6, be-5)
agent(collected-6, using-8)
det(bowl-10, a-9)
dobj(using-8, bowl-10)
det(mooshroom-13, a-12)
prep_on(using-8, mooshroom-13)

(ROOT
  (S
    (SBAR (RB even) (IN if)
      (S
        (NP (DT the) (NN player))
        (VP (VBZ has)
          (NP
            (QP (RB only) (DT a) (JJ few))
            (NNS mushrooms)))))
    (, ,)
    (NP (PRP they))
    (VP (MD can)
      (VP (VB be)
        (VP (VBN planted)
          (CC and)
          (VBN grown)
          (PP (IN into)
            (NP (JJ huge) (NNS mushrooms)))
          (PP (IN with)
            (NP (NN bonemeal)))
          (, ,)
          (S
            (VP (VBG yielding)
              (NP (JJR more) (JJ individual) (NNS mushrooms)))))))
    (. .)))

advmod(has-5, even-1)
dep(has-5, if-2)
det(player-4, the-3)
nsubj(has-5, player-4)
advcl(planted-14, has-5)
quantmod(few-8, only-6)
quantmod(few-8, a-7)
num(mushrooms-9, few-8)
dobj(has-5, mushrooms-9)
nsubjpass(planted-14, they-11)
nsubjpass(grown-16, they-11)
nsubjpass(yielding-23, they-11)
aux(planted-14, can-12)
auxpass(planted-14, be-13)
conj_and(planted-14, grown-16)
amod(mushrooms-19, huge-18)
prep_into(planted-14, mushrooms-19)
prep_with(planted-14, bonemeal-21)
conj_and(planted-14, yielding-23)
xcomp(planted-14, yielding-23)
amod(mushrooms-26, more-24)
amod(mushrooms-26, individual-25)
dobj(yielding-23, mushrooms-26)

(ROOT
  (S
    (NP (NN mushroom) (NN stew))
    (VP (VBZ restores)
      (NP
        (NP (DT the) (JJ same) (NN amount))
        (PP (IN of)
          (NP (NN food) (NNS points))))
      (PP (IN as)
        (NP (NN steak)
          (CC and)
          (NN cooked) (NNS porkchops)))
      (SBAR (IN while)
        (S
          (S
            (VP (RB not) (VBG being)
              (ADJP (JJ dependent))
              (PP (IN on)
                (NP
                  (NP (DT the) (NN presence))
                  (PP (IN of)
                    (NP (NNS animals)))))))
          (CC or)
          (S
            (VP (VBG requiring)
              (NP
                (NP (DT a) (NN furnace) (, ,) (NN fuel) (, ,)
                  (CC and)
                  (NN time))
                (PP (TO to)
                  (NP (NN cook)))))))))
    (. .)))

nn(stew-2, mushroom-1)
nsubj(amount-6, stew-2)
dep(amount-6, restores-3)
det(amount-6, the-4)
amod(amount-6, same-5)
nn(points-9, food-8)
prep_of(amount-6, points-9)
nn(porkchops-14, steak-11)
conj_and(steak-11, cooked-13)
nn(porkchops-14, cooked-13)
prep_as(amount-6, porkchops-14)
mark(dependent-18, while-15)
neg(dependent-18, not-16)
cop(dependent-18, being-17)
advcl(amount-6, dependent-18)
det(presence-21, the-20)
prep_on(dependent-18, presence-21)
prep_of(presence-21, animals-23)
advcl(amount-6, requiring-25)
conj_or(dependent-18, requiring-25)
det(time-32, a-26)
nn(time-32, furnace-27)
dobj(requiring-25, fuel-29)
conj_and(time-32, fuel-29)
dobj(requiring-25, time-32)
prep_to(time-32, cook-34)

(ROOT
  (S
    (NP (DT the) (NN bowl))
    (VP (VBZ is)
      (VP (VBN returned)
        (PP (TO to)
          (NP
            (NP (DT the) (NN player))
            (SBAR
              (S
                (VP (VBP empty)
                  (SBAR (IN after)
                    (S
                      (NP (DT the) (NN stew))
                      (VP
                        (VP (VBZ has)
                          (VP (VBN been)
                            (VP (VBN eaten))))
                        (, ,)
                        (CC and)
                        (VP (MD can)
                          (VP (VB be)
                            (ADJP (JJ re-used)
                              (S
                                (VP (TO to)
                                  (VP (VB craft)
                                    (NP (JJR more))))))))))))))))))
    (. .)))

det(bowl-2, the-1)
nsubjpass(returned-4, bowl-2)
auxpass(returned-4, is-3)
det(player-7, the-6)
prep_to(returned-4, player-7)
rcmod(player-7, empty-8)
mark(eaten-14, after-9)
det(stew-11, the-10)
nsubjpass(eaten-14, stew-11)
nsubj(re-used-19, stew-11)
aux(eaten-14, has-12)
auxpass(eaten-14, been-13)
advcl(empty-8, eaten-14)
aux(re-used-19, can-17)
cop(re-used-19, be-18)
advcl(empty-8, re-used-19)
conj_and(eaten-14, re-used-19)
aux(craft-21, to-20)
xcomp(re-used-19, craft-21)
dobj(craft-21, more-22)

(ROOT
  (S
    (SBAR (IN while)
      (S
        (NP (DT the) (NNS ingredients)
          (CC and)
          (NNS bowls))
        (VP (VB stack))))
    (, ,)
    (NP
      (NP (DT the) (NN bowls))
      (PP (IN of)
        (NP (NN stew))))
    (VP (VBP do) (RB not)
      (VP (VB stack)
        (PP (IN in)
          (NP (DT the) (NN inventory)))))
    (. .)))

mark(stack-6, while-1)
det(ingredients-3, the-2)
nsubj(stack-6, ingredients-3)
conj_and(ingredients-3, bowls-5)
nsubj(stack-6, bowls-5)
advcl(stack-14, stack-6)
det(bowls-9, the-8)
nsubj(stack-14, bowls-9)
prep_of(bowls-9, stew-11)
aux(stack-14, do-12)
neg(stack-14, not-13)
det(inventory-17, the-16)
prep_in(stack-14, inventory-17)

(ROOT
  (S
    (NP (JJ planted) (NNS mushrooms))
    (VP (MD will)
      (VP (VB grow)
        (PP (IN into)
          (NP (JJ huge) (NNS mushrooms)))
        (SBAR
          (WHADVP (WRB when))
          (S
            (NP (NN bone) (NN meal))
            (VP
              (VP (VBZ is)
                (VP (VBN used)
                  (PP (IN on)
                    (NP (PRP them)))))
              (, ,)
              (CC and)
              (VP (MD will)
                (VP (VB pop)
                  (PRT (RP out))
                  (PP (IN of)
                    (NP (DT the) (NN ground)))
                  (SBAR
                    (SBAR (IN if)
                      (S
                        (NP (DT the) (JJ light) (NN level))
                        (VP (VBZ goes)
                          (PP (IN above)
                            (NP
                              (NP (CD 12))
                              (, ,)
                              (NP
                                (NP (NN water) (NNS flows))
                                (PP (IN over)
                                  (NP (PRP them)))))))))
                    (, ,)
                    (CC or)
                    (SBAR
                      (WHADVP (WRB when))
                      (S
                        (VP (VBN pushed)
                          (PP (IN by)
                            (NP (DT a) (NN piston))))))))))))))
    (. .)))

amod(mushrooms-2, planted-1)
nsubj(grow-4, mushrooms-2)
aux(grow-4, will-3)
amod(mushrooms-7, huge-6)
prep_into(grow-4, mushrooms-7)
advmod(used-12, when-8)
nn(meal-10, bone-9)
nsubjpass(used-12, meal-10)
nsubj(pop-18, meal-10)
auxpass(used-12, is-11)
advcl(grow-4, used-12)
prep_on(used-12, them-14)
aux(pop-18, will-17)
advcl(grow-4, pop-18)
conj_and(used-12, pop-18)
det(ground-22, the-21)
prep_out_of(pop-18, ground-22)
mark(goes-27, if-23)
det(level-26, the-24)
amod(level-26, light-25)
nsubj(goes-27, level-26)
nsubj(pushed-38, level-26)
dep(pop-18, goes-27)
prep_above(goes-27, 12-29)
nn(flows-32, water-31)
appos(12-29, flows-32)
prep_over(flows-32, them-34)
advmod(pushed-38, when-37)
dep(pop-18, pushed-38)
conj_or(goes-27, pushed-38)
det(piston-41, a-40)
prep_by(pushed-38, piston-41)

(ROOT
  (S
    (NP (NNS mooshrooms))
    (VP (VBP are)
      (NP
        (NP (DT a) (JJ unique) (NN mob))
        (SBAR
          (WHNP (WDT that))
          (S
            (VP (VBP serve)
              (PP (IN as)
                (NP
                  (NP (DT a) (NN source))
                  (PP (IN for)
                    (NP
                      (NP (JJ red) (NNS mushrooms))
                      (CC and)
                      (NP (NN mushroom) (NN stew)))))))))))
    (. .)))

nsubj(mob-5, mooshrooms-1)
cop(mob-5, are-2)
det(mob-5, a-3)
amod(mob-5, unique-4)
nsubj(serve-7, mob-5)
rcmod(mob-5, serve-7)
det(source-10, a-9)
prep_as(serve-7, source-10)
amod(mushrooms-13, red-12)
prep_for(source-10, mushrooms-13)
nn(stew-16, mushroom-15)
prep_for(source-10, stew-16)
conj_and(mushrooms-13, stew-16)

(ROOT
  (S
    (NP (NN paper))
    (VP (VBZ is)
      (NP
        (NP (DT an) (NN item))
        (VP (VBN crafted)
          (PP (IN from)
            (NP (NN sugar) (NN cane))))))
    (. .)))

nsubj(item-4, paper-1)
cop(item-4, is-2)
det(item-4, an-3)
partmod(item-4, crafted-5)
nn(cane-8, sugar-7)
prep_from(crafted-5, cane-8)

(ROOT
  (S
    (NP (NN paper))
    (VP (MD can)
      (ADVP (RB naturally))
      (VP (VB occur)
        (PP (IN in)
          (NP
            (NP (NNS chests))
            (, ,)
            (NP (JJ inside) (NNS strongholds))))))
    (. .)))

nsubj(occur-4, paper-1)
aux(occur-4, can-2)
advmod(occur-4, naturally-3)
prep_in(occur-4, chests-6)
amod(strongholds-9, inside-8)
appos(chests-6, strongholds-9)

(ROOT
  (S
    (NP (NNS pickaxes))
    (VP (VBP are)
      (NP
        (NP (CD one))
        (PP (IN of)
          (NP
            (NP (DT the)
              (ADJP (RBS most) (RB commonly) (VBN used))
              (NNS tools))
            (PP (IN in)
              (NP (DT the) (NN game)))))
        (, ,)
        (VP (VBG being)
          (VP (VBN required)
            (PP (TO to)
              (NP
                (NP
                  (NP (NN mine))
                  (NP (DT all) (NNS ores)))
                (CC and)
                (NP
                  (NP (JJ many) (JJ other) (NNS types))
                  (PP (IN of)
                    (NP (NNS blocks))))))))))
    (. .)))

nsubj(one-3, pickaxes-1)
cop(one-3, are-2)
det(tools-9, the-5)
advmod(used-8, most-6)
advmod(used-8, commonly-7)
amod(tools-9, used-8)
prep_of(one-3, tools-9)
det(game-12, the-11)
prep_in(tools-9, game-12)
auxpass(required-15, being-14)
partmod(one-3, required-15)
prep_to(required-15, mine-17)
det(ores-19, all-18)
dep(mine-17, ores-19)
amod(types-23, many-21)
amod(types-23, other-22)
prep_to(required-15, types-23)
conj_and(mine-17, types-23)
prep_of(types-23, blocks-25)

(ROOT
  (S
    (NP
      (NP (JJ different) (NNS qualities))
      (PP (IN of)
        (NP (NN pickaxe))))
    (VP (VBP are)
      (VP (VBN required)
        (S
          (VP (TO to)
            (VP
              (ADVP (RB successfully))
              (VB harvest)
              (NP (JJ certain) (NNS ores)
                (CC and)
                (NNS blocks)))))))
    (. .)))

amod(qualities-2, different-1)
nsubjpass(required-6, qualities-2)
xsubj(harvest-9, qualities-2)
prep_of(qualities-2, pickaxe-4)
auxpass(required-6, are-5)
aux(harvest-9, to-7)
advmod(harvest-9, successfully-8)
xcomp(required-6, harvest-9)
amod(ores-11, certain-10)
dobj(harvest-9, ores-11)
dobj(harvest-9, blocks-13)
conj_and(ores-11, blocks-13)

(ROOT
  (S
    (PP (IN for)
      (NP (NN example)))
    (, ,)
    (S
      (SBAR (IN while)
        (S
          (NP (NN coal) (NN ore))
          (VP (MD can)
            (VP (VB be)
              (VP (VBN mined)
                (PP (IN with)
                  (NP (DT any) (NN pickaxe))))))))
      (, ,)
      (NP (NN gold) (NN ore))
      (VP (MD must)
        (VP (VB be)
          (VP (VBN mined)
            (PP (IN with)
              (NP
                (NP (DT an) (NN iron) (NN pickaxe))
                (CC or)
                (NP (JJR better))))))))
    (, ,)
    (CC or)
    (S
      (NP (RB else) (DT the) (NN player))
      (VP (MD will)
        (VP (VB harvest)
          (NP (DT no) (NN ore.)))))
    (. .)))

dep(mined-18, for-1)
pobj(for-1, example-2)
mark(mined-9, while-4)
nn(ore-6, coal-5)
nsubjpass(mined-9, ore-6)
aux(mined-9, can-7)
auxpass(mined-9, be-8)
advcl(mined-18, mined-9)
det(pickaxe-12, any-11)
prep_with(mined-9, pickaxe-12)
nn(ore-15, gold-14)
nsubjpass(mined-18, ore-15)
aux(mined-18, must-16)
auxpass(mined-18, be-17)
det(pickaxe-22, an-20)
nn(pickaxe-22, iron-21)
prep_with(mined-18, pickaxe-22)
prep_with(mined-18, better-24)
conj_or(pickaxe-22, better-24)
advmod(player-29, else-27)
det(player-29, the-28)
nsubj(harvest-31, player-29)
aux(harvest-31, will-30)
conj_or(mined-18, harvest-31)
det(ore.-33, no-32)
dobj(harvest-31, ore.-33)

(ROOT
  (S
    (NP (DT the) (NN pickaxe))
    (VP (VBZ does)
      (NP (JJR less) (NN damage))
      (PP (TO to)
        (NP
          (NP (NNS mobs))
          (PP (VBN compared)
            (PP (TO to)
              (NP
                (NP (DT an) (NN axe))
                (CC or)
                (NP (DT a) (NN sword))))))))
    (. .)))

det(pickaxe-2, the-1)
nsubj(does-3, pickaxe-2)
amod(damage-5, less-4)
dobj(does-3, damage-5)
prep_to(does-3, mobs-7)
det(axe-11, an-10)
prep_compared_to(mobs-7, axe-11)
det(sword-14, a-13)
prep_compared_to(mobs-7, sword-14)
conj_or(axe-11, sword-14)

(ROOT
  (S
    (NP (NNS pickaxes))
    (VP (VBP are)
      (VP (VBN crafted)
        (S
          (VP (VBG using)
            (NP
              (NP (CD 2) (NNS sticks))
              (CC and)
              (NP
                (NP (CD 3) (NNS units))
                (PP (IN of)
                  (NP (DT a) (NN tool) (NN material)))))))))
    (: :) (. .)))

nsubjpass(crafted-3, pickaxes-1)
auxpass(crafted-3, are-2)
xcomp(crafted-3, using-4)
num(sticks-6, 2-5)
dobj(using-4, sticks-6)
num(units-9, 3-8)
dobj(using-4, units-9)
conj_and(sticks-6, units-9)
det(material-13, a-11)
nn(material-13, tool-12)
prep_of(units-9, material-13)

(ROOT
  (S
    (NP (PRP they))
    (VP (MD can)
      (VP (VB be)
        (VP
          (VP (VBN found)
            (PP (IN in)
              (NP (VBN abandoned) (NN mine) (NNS shafts))))
          (, ,)
          (CC or)
          (VP (VBN crafted)
            (PP (IN from)
              (NP (NN sticks)
                (CC and)
                (NN iron) (NNS bars)))))))
    (. .)))

nsubjpass(found-4, they-1)
nsubjpass(crafted-11, they-1)
aux(found-4, can-2)
auxpass(found-4, be-3)
amod(shafts-8, abandoned-6)
nn(shafts-8, mine-7)
prep_in(found-4, shafts-8)
conj_or(found-4, crafted-11)
nn(bars-16, sticks-13)
conj_and(sticks-13, iron-15)
nn(bars-16, iron-15)
prep_from(crafted-11, bars-16)

(ROOT
  (S
    (NP (CD 16) (NN track) (NNS pieces))
    (VP (MD can)
      (VP (VB be)
        (VP (VBN crafted)
          (PP (IN from)
            (NP
              (NP (CD 6) (NN iron) (NNS ingots))
              (CC and)
              (NP (CD 1) (NN stick))))
          (, ,)
          (PP (IN in)
            (NP (DT the) (NN pattern) (IN below))))))
    (: :) (. .)))

num(pieces-3, 16-1)
nn(pieces-3, track-2)
nsubjpass(crafted-6, pieces-3)
aux(crafted-6, can-4)
auxpass(crafted-6, be-5)
num(ingots-10, 6-8)
nn(ingots-10, iron-9)
prep_from(crafted-6, ingots-10)
num(stick-13, 1-12)
prep_from(crafted-6, stick-13)
conj_and(ingots-10, stick-13)
det(pattern-17, the-16)
prep_in(crafted-6, pattern-17)
dep(pattern-17, below-18)

(ROOT
  (S
    (NP (JJ raw) (NN fish))
    (VP (VBP are)
      (VP (VBN acquired)
        (PP (IN by) (NN fishing) (IN in)
          (NP
            (NP (DT a) (NN body))
            (PP (IN of)
              (NP (NN water)))))
        (PP (IN with)
          (NP (DT a) (NN fishing) (NN rod)))))
    (. .)))

amod(fish-2, raw-1)
nsubjpass(acquired-4, fish-2)
auxpass(acquired-4, are-3)
dep(acquired-4, by-5)
dep(acquired-4, fishing-6)
det(body-9, a-8)
prep_in(acquired-4, body-9)
prep_of(body-9, water-11)
det(rod-15, a-13)
nn(rod-15, fishing-14)
prep_with(acquired-4, rod-15)

(ROOT
  (S
    (NP (JJ raw) (NN fish))
    (VP (VBZ is)
      (NP
        (NP (DT a) (NN food) (NN item))
        (SBAR
          (WHNP (WDT that))
          (S
            (VP (MD can)
              (VP (VB be)
                (VP (VBN obtained)
                  (PP (IN by)
                    (NP (NN fishing)))
                  (PP (IN with)
                    (NP
                      (NP (DT a) (NN fishing) (NN rod))
                      (PP (IN in)
                        (NP
                          (NP (DT any) (NN body))
                          (PP (IN of)
                            (NP (NN water))))))))))))))
    (. .)))

amod(fish-2, raw-1)
nsubj(item-6, fish-2)
cop(item-6, is-3)
det(item-6, a-4)
nn(item-6, food-5)
nsubjpass(obtained-10, item-6)
aux(obtained-10, can-8)
auxpass(obtained-10, be-9)
rcmod(item-6, obtained-10)
agent(obtained-10, fishing-12)
det(rod-16, a-14)
nn(rod-16, fishing-15)
prep_with(obtained-10, rod-16)
det(body-19, any-18)
prep_in(rod-16, body-19)
prep_of(body-19, water-21)

(ROOT
  (S
    (ADVP (RB however))
    (, ,)
    (NP (NN string))
    (VP (VBZ is)
      (VP (VBN required)
        (S
          (VP (TO to)
            (VP (VB craft)
              (NP
                (NP (DT a) (NN fishing) (NN rod))
                (CC and)
                (RB early))
              (PP (IN on) (IN in)
                (NP
                  (NP (DT the) (NN game))
                  (SBAR
                    (S
                      (NP (PRP it))
                      (VP (MD may)
                        (VP (VB be)
                          (ADJP (JJ difficult)
                            (S
                              (VP (TO to)
                                (VP (VB acquire))))))))))))))))
    (. .)))

advmod(required-5, however-1)
nsubjpass(required-5, string-3)
xsubj(craft-7, string-3)
auxpass(required-5, is-4)
aux(craft-7, to-6)
xcomp(required-5, craft-7)
det(rod-10, a-8)
nn(rod-10, fishing-9)
dobj(craft-7, rod-10)
dobj(craft-7, early-12)
advmod(rod-10, early-12)
conj_and(rod-10, early-12)
dep(craft-7, on-13)
det(game-16, the-15)
prep_in(craft-7, game-16)
nsubj(difficult-20, it-17)
aux(difficult-20, may-18)
cop(difficult-20, be-19)
rcmod(game-16, difficult-20)
aux(acquire-22, to-21)
xcomp(difficult-20, acquire-22)

(ROOT
  (S
    (PP (IN like)
      (NP (NN pork)))
    (, ,)
    (NP (JJ raw) (NN fish))
    (VP (MD can)
      (VP (VB be)
        (VP (VBN placed)
          (PP (IN in)
            (NP (DT a) (NN furnace)))
          (S
            (VP (TO to)
              (VP (VB produce)
                (NP (JJ cooked) (NN fish)))))
          (, ,)
          (PP (IN for)
            (NP (CD 2) (JJ additional) (NN hunger) (NNS points))))))
    (. .)))

prep_like(placed-8, pork-2)
amod(fish-5, raw-4)
nsubjpass(placed-8, fish-5)
aux(placed-8, can-6)
auxpass(placed-8, be-7)
det(furnace-11, a-10)
prep_in(placed-8, furnace-11)
aux(produce-13, to-12)
purpcl(placed-8, produce-13)
amod(fish-15, cooked-14)
dobj(produce-13, fish-15)
num(points-21, 2-18)
amod(points-21, additional-19)
nn(points-21, hunger-20)
prep_for(placed-8, points-21)

(ROOT
  (S
    (PP
      (ADVP (RB also))
      (IN like)
      (NP (NN pork)))
    (, ,)
    (NP
      (NP (DT the)
        (ADJP (RBS most) (JJ efficient))
        (NN way))
      (SBAR
        (S
          (VP (TO to)
            (VP (VB cook)
              (NP (NN fish))
              (PP (IN without)
                (NP (NN wasting) (NNS supplies))))))))
    (VP (VBZ is)
      (S
        (VP (TO to)
          (VP (VB use)
            (NP (DT a) (NN stick))
            (PP (IN as)
              (NP (PRP$ your) (NN fuel) (NN source)))
            (SBAR
              (WHADVP (WRB when))
              (S
                (VP (VBG cooking)
                  (NP (NN fish)))))))))
    (. .)))

dep(is-15, also-1)
prep_like(is-15, pork-3)
det(way-8, the-5)
advmod(efficient-7, most-6)
amod(way-8, efficient-7)
nsubj(is-15, way-8)
xsubj(use-17, way-8)
aux(cook-10, to-9)
infmod(way-8, cook-10)
dobj(cook-10, fish-11)
nn(supplies-14, wasting-13)
prep_without(cook-10, supplies-14)
aux(use-17, to-16)
xcomp(is-15, use-17)
det(stick-19, a-18)
dobj(use-17, stick-19)
poss(source-23, your-21)
nn(source-23, fuel-22)
prep_as(use-17, source-23)
advmod(cooking-25, when-24)
advcl(use-17, cooking-25)
dobj(cooking-25, fish-26)

(ROOT
  (S
    (NP (NN gathering) (NN fish))
    (VP (MD can)
      (VP (VB be)
        (ADVP (RB initially) (RBR faster)
          (PP (IN than)
            (S
              (VP
                (VP (VBG waiting)
                  (PP (IN for)
                    (NP (NN wheat)))
                  (S
                    (VP (TO to)
                      (VP (VB grow)))))
                (CC or)
                (VP (VBG finding)
                  (NP (NNS animals))
                  (S
                    (VP (TO to)
                      (VP (VB kill)))))))))))
    (. .)))

nn(fish-2, gathering-1)
nsubj(be-4, fish-2)
aux(be-4, can-3)
advmod(be-4, initially-5)
advmod(initially-5, faster-6)
dep(initially-5, than-7)
pcomp(than-7, waiting-8)
prep_for(waiting-8, wheat-10)
aux(grow-12, to-11)
xcomp(waiting-8, grow-12)
pcomp(than-7, finding-14)
conj_or(waiting-8, finding-14)
dobj(finding-14, animals-15)
aux(kill-17, to-16)
xcomp(finding-14, kill-17)

(ROOT
  (S
    (NP (DT a) (NN fishing) (NN rod))
    (VP (VBZ requires)
      (NP (NN string))
      (S
        (VP (TO to)
          (VP (VB make))))
      (, ,)
      (SBAR
        (WHNP (WDT which))
        (S
          (VP (MD can)
            (VP (VB be)
              (ADJP (JJ difficult)
                (S
                  (VP (TO to)
                    (VP (VB obtain)
                      (ADVP (RB early) (RB on)))))))))))
    (. .)))

det(rod-3, a-1)
nn(rod-3, fishing-2)
nsubj(requires-4, rod-3)
dobj(requires-4, string-5)
aux(make-7, to-6)
xcomp(requires-4, make-7)
nsubj(difficult-12, which-9)
aux(difficult-12, can-10)
cop(difficult-12, be-11)
dep(requires-4, difficult-12)
aux(obtain-14, to-13)
xcomp(difficult-12, obtain-14)
advmod(on-16, early-15)
advmod(obtain-14, on-16)

(ROOT
  (S
    (SBAR (IN once)
      (S
        (NP (DT a) (NN wheat) (NN farm))
        (VP (VBZ is)
          (ADJP (RB fully) (VBN established)))))
    (, ,)
    (NP (PRP it))
    (VP (VBZ produces)
      (NP
        (NP (NN wheat))
        (ADVP (RB almost) (RB as) (RB quickly)
          (SBAR (IN as)
            (S
              (NP (PRP you))
              (VP (MD can)
                (VP (VB obtain)
                  (NP (NN fish)))))))))
    (. .)))

mark(established-7, once-1)
det(farm-4, a-2)
nn(farm-4, wheat-3)
nsubjpass(established-7, farm-4)
auxpass(established-7, is-5)
advmod(established-7, fully-6)
advcl(produces-10, established-7)
nsubj(produces-10, it-9)
dobj(produces-10, wheat-11)
advmod(quickly-14, almost-12)
advmod(quickly-14, as-13)
advmod(wheat-11, quickly-14)
mark(obtain-18, as-15)
nsubj(obtain-18, you-16)
aux(obtain-18, can-17)
dep(quickly-14, obtain-18)
dobj(obtain-18, fish-19)

(ROOT
  (S
    (NP (NN sand))
    (VP (VBZ is)
      (NP
        (NP (DT a) (NN block))
        (VP
          (ADVP (RB naturally))
          (VBN found)
          (PP (IN on)
            (S
              (NP (NNS coasts)
                (CC and)
                (NN desert) (NNS biomes))
              (ADVP (RB mostly))
              (VP (VBG going)
                (ADVP
                  (NP (CD 4) (NNS blocks))
                  (RB deep))
                (SBAR (IN until)
                  (S
                    (NP (PRP it))
                    (VP (VBZ transitions)
                      (PP (IN into)
                        (NP (NN sandstone))))))))))))
    (. .)))

nsubj(block-4, sand-1)
cop(block-4, is-2)
det(block-4, a-3)
advmod(found-6, naturally-5)
partmod(block-4, found-6)
nsubj(going-13, coasts-8)
nn(biomes-11, desert-10)
conj_and(coasts-8, biomes-11)
nsubj(going-13, biomes-11)
advmod(going-13, mostly-12)
prepc_on(found-6, going-13)
num(blocks-15, 4-14)
dep(deep-16, blocks-15)
advmod(going-13, deep-16)
mark(transitions-19, until-17)
nsubj(transitions-19, it-18)
advcl(going-13, transitions-19)
prep_into(transitions-19, sandstone-21)

(ROOT
  (S
    (NP (NN sand))
    (VP (MD can)
      (VP (VB be)
        (VP (VBN mined)
          (ADVP (RB easily))
          (PP (IN by)
            (NP (NN hand)))
          (, ,)
          (SBAR (IN although)
            (S
              (S
                (VP (VBG using)
                  (NP (DT a) (NN shovel))))
              (VP (VBZ is)
                (VP
                  (ADVP
                    (ADVP (RBR faster))
                    (, ,)
                    (CC and)
                    (ADVP
                      (NP (CD gives) (NNS resources))
                      (RB regardless)
                      (PP (IN of)
                        (NP (DT the) (NN tool)))))
                  (VBN used))))))))
    (. .)))

nsubjpass(mined-4, sand-1)
aux(mined-4, can-2)
auxpass(mined-4, be-3)
advmod(mined-4, easily-5)
agent(mined-4, hand-7)
mark(used-23, although-9)
csubjpass(used-23, using-10)
det(shovel-12, a-11)
dobj(using-10, shovel-12)
auxpass(used-23, is-13)
dep(used-23, faster-14)
cc(used-23, and-16)
num(resources-18, gives-17)
dep(used-23, resources-18)
det(tool-22, the-21)
prep_regardless_of(used-23, tool-22)
advcl(mined-4, used-23)

(ROOT
  (S
    (NP (NN sand) (NNS blocks))
    (VP (MD can)
      (VP (VB be)
        (VP (VBN suspended)
          (PP (IN in)
            (NP
              (NP (JJ indefinite) (NN defiance))
              (PP (IN of)
                (NP
                  (NP (NN gravity))
                  (PP (IN in)
                    (NP (DT this) (NN way)))))))
          (, ,)
          (S
            (ADVP (RBS most) (RB famously))
            (VP (VBG using)
              (NP (NNS torches)))))))
    (. .)))

nn(blocks-2, sand-1)
nsubjpass(suspended-5, blocks-2)
aux(suspended-5, can-3)
auxpass(suspended-5, be-4)
amod(defiance-8, indefinite-7)
prep_in(suspended-5, defiance-8)
prep_of(defiance-8, gravity-10)
det(way-13, this-12)
prep_in(gravity-10, way-13)
advmod(famously-16, most-15)
advmod(using-17, famously-16)
xcomp(suspended-5, using-17)
dobj(using-17, torches-18)

(ROOT
  (S
    (PP (IN in)
      (NP (NN addition)))
    (, ,)
    (NP (NN sand))
    (VP (VBZ is)
      (VP (VBN used)
        (PP
          (PP (IN in)
            (NP
              (NP (DT the) (NN production))
              (PP (IN of)
                (NP
                  (NP (NN glass))
                  (PP (IN via)
                    (NP (NN smelting)))))))
          (CC and)
          (PP (IN with)
            (NP
              (NP (NN gunpowder))
              (PP (IN in)
                (NP (NN tnt))))))))
    (. .)))

prep_in(used-6, addition-2)
nsubjpass(used-6, sand-4)
nsubjpass(used-6', sand-4)
auxpass(used-6, is-5)
conj_and(used-6, used-6')
det(production-9, the-8)
prep_in(used-6, production-9)
prep_of(production-9, glass-11)
prep_via(glass-11, smelting-13)
prep_with(used-6', gunpowder-16)
prep_in(gunpowder-16, tnt-18)

(ROOT
  (S
    (SBAR
      (WHADVP (WRB when))
      (S
        (VP (VBG mining)
          (NP
            (NP (DT a) (JJ large) (NN column\))
            (PP (IN of)
              (NP (NN sand)))))))
    (, ,)
    (NP (DT a) (JJ good) (NN method))
    (VP (VBZ is)
      (S
        (VP (TO to)
          (VP (VB dig)
            (PP (IN under)
              (NP (DT the) (NN stone)
                (CC or)
                (NN dirt)))
            (SBAR (IN that)
              (S
                (NP (PRP it))
                (VP (VBZ is)
                  (ADJP (VBG resting)
                    (PP (IN on))))))))))
    (. .)))

advmod(mining-2, when-1)
dep(is-12, mining-2)
det(column\-5, a-3)
amod(column\-5, large-4)
dobj(mining-2, column\-5)
prep_of(column\-5, sand-7)
det(method-11, a-9)
amod(method-11, good-10)
nsubj(is-12, method-11)
xsubj(dig-14, method-11)
aux(dig-14, to-13)
xcomp(is-12, dig-14)
det(stone-17, the-16)
prep_under(dig-14, stone-17)
prep_under(dig-14, dirt-19)
conj_or(stone-17, dirt-19)
complm(resting-23, that-20)
nsubj(resting-23, it-21)
cop(resting-23, is-22)
ccomp(dig-14, resting-23)
prep(resting-23, on-24)

(ROOT
  (S
    (NP
      (NP
        (NP (NN mine))
        (NP (DT the) (NN dirt)))
      (CC or)
      (NP
        (NP (NN stone))
        (CC and)
        (NP (DT the) (NN column))))
    (VP (VBZ falls)
      (PP (IN into)
        (NP (DT the) (JJ placed) (NN object)))
      (, ,)
      (S
        (ADVP (RB quickly))
        (VP (VBG destroying)
          (NP (DT the) (NN sand)))))
    (. .)))

nsubj(falls-9, mine-1)
det(dirt-3, the-2)
dep(mine-1, dirt-3)
conj_or(mine-1, stone-5)
nsubj(falls-9, stone-5)
det(column-8, the-7)
conj_or(mine-1, column-8)
conj_and(stone-5, column-8)
det(object-13, the-11)
amod(object-13, placed-12)
prep_into(falls-9, object-13)
advmod(destroying-16, quickly-15)
xcomp(falls-9, destroying-16)
det(sand-18, the-17)
dobj(destroying-16, sand-18)

(ROOT
  (S
    (NP
      (NP (DT a) (NN cofferdam))
      (PP (IN with)
        (NP (DT all) (NN sand)
          (CC and)
          (NN sandstone))))
    (VP (VBD removed))
    (. .)))

det(cofferdam-2, a-1)
nsubj(removed-8, cofferdam-2)
det(sand-5, all-4)
prep_with(cofferdam-2, sand-5)
prep_with(cofferdam-2, sandstone-7)
conj_and(sand-5, sandstone-7)

(ROOT
  (S
    (SBAR (IN if)
      (S
        (NP
          (NP (JJ large) (NNS quantities))
          (PP (IN of)
            (NP (NN sand)
              (CC and)
              (NN sandstone))))
        (VP (VBP are)
          (VP (VBN needed)))))
    (, ,)
    (NP (DT the) (NN ocean) (NN floor))
    (VP (VBZ is)
      (NP
        (NP (DT a) (JJ great) (NN source))
        (PP (IN of)
          (NP
            (NP (DT both))
            (PP (IN of)
              (NP (DT these)))))))
    (. .)))

mark(needed-9, if-1)
amod(quantities-3, large-2)
nsubjpass(needed-9, quantities-3)
prep_of(quantities-3, sand-5)
prep_of(quantities-3, sandstone-7)
conj_and(sand-5, sandstone-7)
auxpass(needed-9, are-8)
advcl(source-17, needed-9)
det(floor-13, the-11)
nn(floor-13, ocean-12)
nsubj(source-17, floor-13)
cop(source-17, is-14)
det(source-17, a-15)
amod(source-17, great-16)
prep_of(source-17, both-19)
prep_of(both-19, these-21)

(ROOT
  (S
    (PP (IN with)
      (NP (DT a) (JJ large) (JJ enough) (NN pit)))
    (, ,)
    (NP (DT a) (JJ large) (NN chest))
    (VP (MD can)
      (VP
        (VP (VB be)
          (VP (VBN filled)
            (PP (IN with)
              (NP (NN sand)))))
        (CC and)
        (VP (VB sandstone)
          (ADVP (RB fairly) (RB easily)))))
    (. .)))

det(pit-5, a-2)
amod(pit-5, large-3)
amod(pit-5, enough-4)
prep_with(filled-12, pit-5)
det(chest-9, a-7)
amod(chest-9, large-8)
nsubjpass(filled-12, chest-9)
nsubj(sandstone-16, chest-9)
aux(filled-12, can-10)
auxpass(filled-12, be-11)
prep_with(filled-12, sand-14)
conj_and(filled-12, sandstone-16)
advmod(easily-18, fairly-17)
advmod(sandstone-16, easily-18)

(ROOT
  (S
    (NP (NNS seeds))
    (VP
      (VP (VBP are)
        (VP (VBN used)
          (S
            (VP (TO to)
              (VP (VB grow)
                (NP (NN wheat)))))))
      (, ,)
      (CC and)
      (VP (MD can)
        (VP (VB be)
          (VP (VBN found)
            (PP (IN by)
              (S
                (VP
                  (VP (VBG tilling)
                    (NP (NN grass)))
                  (CC or)
                  (VP (VBG harvesting)
                    (NP (JJ fully-grown) (NN wheat))))))))))
    (. .)))

nsubjpass(used-3, seeds-1)
xsubj(grow-5, seeds-1)
nsubjpass(found-11, seeds-1)
auxpass(used-3, are-2)
aux(grow-5, to-4)
xcomp(used-3, grow-5)
dobj(grow-5, wheat-6)
aux(found-11, can-9)
auxpass(found-11, be-10)
conj_and(used-3, found-11)
agent(found-11, tilling-13)
dobj(tilling-13, grass-14)
agent(found-11, harvesting-16)
conj_or(tilling-13, harvesting-16)
amod(wheat-18, fully-grown-17)
dobj(harvesting-16, wheat-18)

(ROOT
  (S
    (NP (NN bone) (NN meal))
    (VP (MD can)
      (VP (VB be)
        (VP (VBN used)
          (S
            (VP (TO to)
              (VP
                (ADVP (RB instantly))
                (VB mature)
                (NP (NNS seeds))
                (PP (IN into)
                  (NP (NN wheat)))))))))
    (. .)))

nn(meal-2, bone-1)
nsubjpass(used-5, meal-2)
aux(used-5, can-3)
auxpass(used-5, be-4)
aux(mature-8, to-6)
advmod(mature-8, instantly-7)
purpcl(used-5, mature-8)
dobj(mature-8, seeds-9)
prep_into(mature-8, wheat-11)

(ROOT
  (S
    (NP (NNS shears))
    (VP (MD can)
      (VP (VB be)
        (VP (VBN used)
          (S
            (VP (TO to)
              (VP (VB obtain)
                (NP (NN wool))
                (PP (IN from)
                  (NP
                    (NP (NN sheep))
                    (, ,)
                    (NP
                      (NP (NNS leaves))
                      (PP
                        (PP (IN from)
                          (NP (NNS trees)))
                        (CC and)
                        (PP (IN for)
                          (S
                            (ADVP (RB quickly))
                            (VP (VBG destroying)
                              (NP (NN wool) (NNS blocks)))))))))))))))
    (. .)))

nsubjpass(used-4, shears-1)
aux(used-4, can-2)
auxpass(used-4, be-3)
aux(obtain-6, to-5)
purpcl(used-4, obtain-6)
dobj(obtain-6, wool-7)
prep_from(obtain-6, sheep-9)
appos(sheep-9, leaves-11)
appos(sheep-9, leaves-11')
conj_and(leaves-11, leaves-11')
prepc_from(leaves-11, trees-13)
advmod(destroying-17, quickly-16)
prepc_for(leaves-11', destroying-17)
nn(blocks-19, wool-18)
dobj(destroying-17, blocks-19)

(ROOT
  (S
    (S
      (SBAR (IN if)
        (S
          (NP (DT a) (NN sheep))
          (VP (VBZ is)
            (VP (VBN killed)))))
      (, ,)
      (NP (PRP it))
      (VP (MD will)
        (ADVP (RB only))
        (VP (VB drop)
          (NP
            (NP (CD 1) (NN block))
            (PP (IN of)
              (NP (NN wool)))))))
    (, ,) (IN so)
    (S
      (NP (NN shearing))
      (VP (VBZ is)
        (ADVP (RB definitely))
        (NP (DT the) (NN way)
          (S
            (VP (TO to)
              (VP (VB go)))))))
    (. .)))

mark(killed-5, if-1)
det(sheep-3, a-2)
nsubjpass(killed-5, sheep-3)
auxpass(killed-5, is-4)
advcl(drop-10, killed-5)
nsubj(drop-10, it-7)
aux(drop-10, will-8)
advmod(drop-10, only-9)
num(block-12, 1-11)
dobj(drop-10, block-12)
prep_of(block-12, wool-14)
dep(drop-10, so-16)
nsubj(way-21, shearing-17)
cop(way-21, is-18)
advmod(way-21, definitely-19)
det(way-21, the-20)
ccomp(drop-10, way-21)
aux(go-23, to-22)
infmod(way-21, go-23)

(ROOT
  (S
    (NP (NNS shears))
    (VP (MD can)
      (ADVP (RB also))
      (VP (VB be)
        (VP (VBN used)
          (S
            (VP (TO to)
              (VP (VB destroy)
                (NP
                  (NP (NNS webs))
                  (, ,)
                  (SBAR
                    (WHNP (WDT which))
                    (S
                      (VP (VBZ yields)
                        (NP (NN string))))))))))))
    (. .)))

nsubjpass(used-5, shears-1)
aux(used-5, can-2)
advmod(used-5, also-3)
auxpass(used-5, be-4)
aux(destroy-7, to-6)
purpcl(used-5, destroy-7)
dobj(destroy-7, webs-8)
nsubj(yields-11, webs-8)
rcmod(webs-8, yields-11)
dobj(yields-11, string-12)

(ROOT
  (S
    (NP (NNS shears))
    (VP (VBP are)
      (NP
        (NP (DT a) (NN tool))
        (VP (VBN used)
          (S
            (VP (TO to)
              (VP
                (VP (VB obtain)
                  (NP (NN wool))
                  (PP (IN from)
                    (NP (NN sheep))))
                (, ,)
                (VP (VB collect)
                  (NP (JJ red) (NNS mushrooms))
                  (PP (IN from)
                    (NP (NNS mooshrooms))))
                (, ,)
                (S
                  (VP
                    (VP (VBG getting)
                      (NP (NN string))
                      (PP (IN from)
                        (NP (NN cobweb))))
                    (, ,)
                    (VP (VBG destroying)
                      (NP (NN wool) (NNS blocks))
                      (ADVP (RBR more) (RB efficiently)))
                    (, ,)
                    (CC and)
                    (VP (VBG harvesting)
                      (NP (JJ placeable) (NN leaf) (, ,) (NN vine) (, ,)
                        (CC and)
                        (JJ tall) (NN grass) (NNS blocks)))))))))))
    (. .)))

nsubj(tool-4, shears-1)
cop(tool-4, are-2)
det(tool-4, a-3)
xsubj(obtain-7, tool-4)
partmod(tool-4, used-5)
aux(obtain-7, to-6)
xcomp(used-5, obtain-7)
dobj(obtain-7, wool-8)
prep_from(obtain-7, sheep-10)
dep(obtain-7, collect-12)
amod(mushrooms-14, red-13)
dobj(collect-12, mushrooms-14)
prep_from(collect-12, mooshrooms-16)
ccomp(obtain-7, getting-18)
dobj(getting-18, string-19)
prep_from(getting-18, cobweb-21)
ccomp(obtain-7, destroying-23)
conj_and(getting-18, destroying-23)
nn(blocks-25, wool-24)
dobj(destroying-23, blocks-25)
advmod(efficiently-27, more-26)
advmod(destroying-23, efficiently-27)
ccomp(obtain-7, harvesting-30)
conj_and(getting-18, harvesting-30)
amod(vine-34, placeable-31)
nn(vine-34, leaf-32)
dobj(harvesting-30, vine-34)
amod(blocks-39, tall-37)
nn(blocks-39, grass-38)
dobj(harvesting-30, blocks-39)
conj_and(vine-34, blocks-39)

(ROOT
  (S
    (NP (NNS shears))
    (VP (VBP are)
      (NP (DT the)
        (ADJP (RBS most) (JJ efficient))
        (NN way)
        (S
          (VP (TO to)
            (VP (VB acquire)
              (NP (NN wool))
              (PP (IN from)
                (NP (NN sheep))))))))
    (. .)))

nsubj(way-6, shears-1)
cop(way-6, are-2)
det(way-6, the-3)
advmod(efficient-5, most-4)
amod(way-6, efficient-5)
aux(acquire-8, to-7)
infmod(way-6, acquire-8)
dobj(acquire-8, wool-9)
prep_from(acquire-8, sheep-11)

(ROOT
  (S
    (NP (PRP they))
    (VP (MD can)
      (ADVP (RB also))
      (VP (VB be)
        (VP (VBN used)
          (S
            (VP (TO to)
              (VP (VB destroy)
                (NP
                  (NP (NNS cobwebs))
                  (PP (IN in)
                    (NP (PDT half) (DT a) (NN second))))
                (S
                  (VP (TO to)
                    (VP
                      (VP (VB yield)
                        (NP
                          (NP (DT a) (NN piece))
                          (PP (IN of)
                            (NP (NN string)))))
                      (, ,)
                      (CC and)
                      (VP (VB serve)
                        (PP (IN as)
                          (NP (DT a) (JJR faster) (NN way)))
                        (S
                          (VP (TO to)
                            (VP (VB collect)
                              (NP (NN wool)))))))))))))))
    (. .)))

nsubjpass(used-5, they-1)
aux(used-5, can-2)
advmod(used-5, also-3)
auxpass(used-5, be-4)
aux(destroy-7, to-6)
purpcl(used-5, destroy-7)
dobj(destroy-7, cobwebs-8)
predet(second-12, half-10)
det(second-12, a-11)
prep_in(cobwebs-8, second-12)
aux(yield-14, to-13)
xcomp(destroy-7, yield-14)
det(piece-16, a-15)
dobj(yield-14, piece-16)
dobj(serve-21, piece-16)
prep_of(piece-16, string-18)
xcomp(destroy-7, serve-21)
conj_and(yield-14, serve-21)
det(way-25, a-23)
amod(way-25, faster-24)
prep_as(serve-21, way-25)
aux(collect-27, to-26)
xcomp(serve-21, collect-27)
dobj(collect-27, wool-28)

(ROOT
  (S
    (S
      (VP (VBG killing)
        (NP (DT a) (NN sheep))))
    (VP (MD will)
      (VP (VB drop)
        (NP (CD 0-1) (NN wool))
        (SBAR
          (WHADVP (WRB when))
          (S
            (VP (VBD killed) (, ,)
              (SBAR
                (WHADVP (WRB where))
                (S
                  (NP (RB as) (NN shearing))
                  (VP (VBZ yields)
                    (NP (CD 2-4))))))))))
    (. .)))

csubj(drop-5, killing-1)
det(sheep-3, a-2)
dobj(killing-1, sheep-3)
aux(drop-5, will-4)
num(wool-7, 0-1-6)
dobj(drop-5, wool-7)
advmod(killed-9, when-8)
advcl(drop-5, killed-9)
advmod(yields-14, where-11)
advmod(shearing-13, as-12)
nsubj(yields-14, shearing-13)
advcl(killed-9, yields-14)
dobj(yields-14, 2-4-15)

(ROOT
  (S
    (NP (NN wool))
    (VP (VBZ is)
      (ADJP (JJ easiest)
        (S
          (VP (TO to)
            (VP (VB obtain)
              (PP (IN from)
                (NP (NN sheep)))))))
      (, ,)
      (SBAR (IN as)
        (S
          (NP (PRP it))
          (VP (MD can)
            (VP (VB be)
              (VP (VBN obtained)
                (PP (IN by)
                  (S
                    (VP
                      (VP (VBG shearing)
                        (NP (PRP them))
                        (PP (IN with)
                          (NP (NNS shears))))
                      (CC or)
                      (VP (VBG killing)
                        (NP (PRP them))))))))))))
    (. .)))

nsubj(easiest-3, wool-1)
cop(easiest-3, is-2)
aux(obtain-5, to-4)
xcomp(easiest-3, obtain-5)
prep_from(obtain-5, sheep-7)
mark(obtained-13, as-9)
nsubjpass(obtained-13, it-10)
aux(obtained-13, can-11)
auxpass(obtained-13, be-12)
advcl(easiest-3, obtained-13)
agent(obtained-13, shearing-15)
dobj(shearing-15, them-16)
prep_with(shearing-15, shears-18)
agent(obtained-13, killing-20)
conj_or(shearing-15, killing-20)
dobj(killing-20, them-21)

(ROOT
  (S
    (S
      (NP (NN wool))
      (VP (MD can)
        (ADVP (RB also))
        (VP (VB be)
          (VP (VBN crafted)
            (S
              (VP (VBG using)
                (NP
                  (NP (CD 4) (NNS pieces))
                  (PP (IN of)
                    (NP (NN string))))))))))
    (, ,)
    (CC but)
    (S
      (NP (PRP it))
      (VP (VBZ is)
        (ADJP
          (ADJP (RB much) (RBR less) (JJ dangerous))
          (PP (IN for)
            (NP (DT the) (NN player))))
        (S
          (VP (TO to)
            (VP (VB shear)
              (NP (NN sheep))
              (PP (RB rather) (IN than)
                (S
                  (VP (VBG hunt)
                    (PRT (RP down))
                    (NP (NNS spiders))
                    (ADVP (RB constantly))))))))))
    (. .)))

nsubjpass(crafted-5, wool-1)
aux(crafted-5, can-2)
advmod(crafted-5, also-3)
auxpass(crafted-5, be-4)
purpcl(crafted-5, using-6)
xcomp(crafted-5, using-6)
num(pieces-8, 4-7)
dobj(using-6, pieces-8)
prep_of(pieces-8, string-10)
nsubj(dangerous-17, it-13)
xsubj(shear-22, it-13)
cop(dangerous-17, is-14)
advmod(dangerous-17, much-15)
advmod(dangerous-17, less-16)
conj_but(crafted-5, dangerous-17)
det(player-20, the-19)
prep_for(dangerous-17, player-20)
aux(shear-22, to-21)
xcomp(dangerous-17, shear-22)
dobj(shear-22, sheep-23)
dep(shear-22, rather-24)
prepc_than(shear-22, hunt-26)
prt(hunt-26, down-27)
dobj(hunt-26, spiders-28)
advmod(hunt-26, constantly-29)

(ROOT
  (S
    (NP (NNS shovels))
    (VP (VBP are)
      (NP
        (NP (JJ auxiliary) (NNS tools))
        (VP (VBN used)
          (S
            (VP (TO to)
              (VP (VB ease)
                (NP
                  (NP (DT the) (NN process))
                  (PP (IN of)
                    (S
                      (VP (VBG collecting)
                        (NP (NN dirt) (, ,) (NN sand) (, ,) (NN gravel) (, ,) (NN clay)
                          (CC and)
                          (NN snow))))))))))))
    (. .)))

nsubj(tools-4, shovels-1)
cop(tools-4, are-2)
amod(tools-4, auxiliary-3)
xsubj(ease-7, tools-4)
partmod(tools-4, used-5)
aux(ease-7, to-6)
xcomp(used-5, ease-7)
det(process-9, the-8)
dobj(ease-7, process-9)
prepc_of(process-9, collecting-11)
dobj(collecting-11, dirt-12)
dobj(collecting-11, sand-14)
conj_and(dirt-12, sand-14)
dobj(collecting-11, gravel-16)
conj_and(dirt-12, gravel-16)
dobj(collecting-11, clay-18)
conj_and(dirt-12, clay-18)
dobj(collecting-11, snow-20)
conj_and(dirt-12, snow-20)

(ROOT
  (S
    (NP (NNS shovels))
    (VP (VBP are)
      (VP (VBN crafted)
        (S
          (VP (VBG using)
            (NP
              (NP (CD 2) (NNS sticks))
              (CC and)
              (NP
                (NP (CD 1) (NN unit))
                (PP (IN of)
                  (NP (DT a) (NN tool) (NN material)))))))))
    (: :) (. .)))

nsubjpass(crafted-3, shovels-1)
auxpass(crafted-3, are-2)
xcomp(crafted-3, using-4)
num(sticks-6, 2-5)
dobj(using-4, sticks-6)
num(unit-9, 1-8)
dobj(using-4, unit-9)
conj_and(sticks-6, unit-9)
det(material-13, a-11)
nn(material-13, tool-12)
prep_of(unit-9, material-13)

(ROOT
  (S
    (NP
      (NP (NNS values))
      (VP
        (VP (VBN marked)
          (PP (IN with)))
        (CC and)
        (VP (VBN highlighted)
          (PP (IN in)
            (NP (NN red))))))
    (VP (VBP indicate)
      (SBAR (IN that)
        (S
          (NP (DT no) (NN resource))
          (VP (MD will)
            (VP (VB be)
              (VP (VBN dropped)
                (SBAR
                  (WHADVP (WRB when))
                  (S
                    (NP (DT the) (NN block))
                    (VP (VBZ is)
                      (VP (VBN destroyed)
                        (PP (IN by)
                          (NP
                            (NP (DT that) (NN quality))
                            (PP (IN of)
                              (NP (NN shovel)))))))))))))))
    (. .)))

nsubj(indicate-8, values-1)
dep(values-1, marked-2)
prep(marked-2, with-3)
dep(values-1, highlighted-5)
conj_and(marked-2, highlighted-5)
prep_in(highlighted-5, red-7)
complm(dropped-14, that-9)
det(resource-11, no-10)
nsubjpass(dropped-14, resource-11)
aux(dropped-14, will-12)
auxpass(dropped-14, be-13)
ccomp(indicate-8, dropped-14)
advmod(destroyed-19, when-15)
det(block-17, the-16)
nsubjpass(destroyed-19, block-17)
auxpass(destroyed-19, is-18)
advcl(dropped-14, destroyed-19)
det(quality-22, that-21)
agent(destroyed-19, quality-22)
prep_of(quality-22, shovel-24)

(ROOT
  (S
    (NP (NNS shovels))
    (VP (VBP are) (RB not)
      (ADJP (JJ effective)
        (PP (IN at)
          (S
            (VP (VBG destroying)
              (NP (NN soul) (NN sand)
                (CC and)
                (NN mycelium)))))))
    (. .)))

nsubj(effective-4, shovels-1)
cop(effective-4, are-2)
neg(effective-4, not-3)
prepc_at(effective-4, destroying-6)
nn(sand-8, soul-7)
dobj(destroying-6, sand-8)
dobj(destroying-6, mycelium-10)
conj_and(sand-8, mycelium-10)

(ROOT
  (S
    (NP (JJ cobblestone) (NNS stairs))
    (VP (VBP occur)
      (PP (IN in)
        (NP
          (NP (NN front))
          (PP (IN of)
            (NP
              (NP (NNS doors))
              (CC and)
              (NP (JJ inside) (NNS churches)))))))
    (. .)))

amod(stairs-2, cobblestone-1)
nsubj(occur-3, stairs-2)
prep_in_front_of(occur-3, doors-7)
amod(churches-10, inside-9)
prep_in_front_of(occur-3, churches-10)
conj_and(doors-7, churches-10)

(ROOT
  (S
    (NP (NNS stairs))
    (VP (MD can)
      (VP (VB be)
        (VP (VBN made)
          (S
            (VP
              (VP (VBG using)
                (NP
                  (NP (CD six))
                  (PP (IN of)
                    (NP
                      (NP (DT either) (JJ wooden) (NNS planks))
                      (, ,)
                      (NP (NN cobblestone))
                      (, ,)
                      (NP (NNS bricks))
                      (, ,)
                      (NP (NN stone) (NNS bricks))
                      (, ,)
                      (CC or)
                      (NP (NN nether) (NNS bricks))))))
              (, ,)
              (VP (VBG producing)
                (NP
                  (NP (CD four) (NNS stairs))
                  (PP (IN per)
                    (NP (NN craft))))))))))
    (. .)))

nsubjpass(made-4, stairs-1)
aux(made-4, can-2)
auxpass(made-4, be-3)
ccomp(made-4, using-5)
dobj(using-5, six-6)
det(planks-10, either-8)
amod(planks-10, wooden-9)
prep_of(six-6, planks-10)
prep_of(six-6, cobblestone-12)
conj_or(planks-10, cobblestone-12)
prep_of(six-6, bricks-14)
conj_or(planks-10, bricks-14)
nn(bricks-17, stone-16)
prep_of(six-6, bricks-17)
conj_or(planks-10, bricks-17)
nn(bricks-21, nether-20)
prep_of(six-6, bricks-21)
conj_or(planks-10, bricks-21)
dep(using-5, producing-23)
num(stairs-25, four-24)
dobj(producing-23, stairs-25)
prep_per(stairs-25, craft-27)

(ROOT
  (S
    (SBAR (IN if)
      (S
        (NP (PRP one))
        (VP (VBZ attempts)
          (S
            (VP (TO to)
              (VP (VB place)
                (NP (DT a) (NN torch))
                (PP (IN on)
                  (NP
                    (NP (NN top))
                    (PP (IN of)
                      (NP (DT a) (NN stair) (NN block)))))))))))
    (, ,)
    (NP (DT the) (NN torch))
    (VP (MD will)
      (VP (VB be)
        (VP (VBN placed)
          (PP (RB instead) (IN on)
            (NP (DT the) (JJS closest)
              (ADJP (JJ available))
              (NN non-stair) (NN block))))))
    (. .)))

mark(attempts-3, if-1)
nsubj(attempts-3, one-2)
xsubj(place-5, one-2)
advcl(placed-19, attempts-3)
aux(place-5, to-4)
xcomp(attempts-3, place-5)
det(torch-7, a-6)
dobj(place-5, torch-7)
det(block-13, a-11)
nn(block-13, stair-12)
prep_on_top_of(place-5, block-13)
det(torch-16, the-15)
nsubjpass(placed-19, torch-16)
aux(placed-19, will-17)
auxpass(placed-19, be-18)
dep(placed-19, instead-20)
det(block-26, the-22)
amod(block-26, closest-23)
amod(block-26, available-24)
nn(block-26, non-stair-25)
prep_on(placed-19, block-26)

(ROOT
  (S
    (NP (NNP sticks))
    (VP (VBP are)
      (VP (VBN created)
        (PP (IN by)
          (S
            (VP (VBG placing)
              (NP (CD two) (JJ wooden) (NNS planks))
              (PP (IN in)
                (NP
                  (NP (DT a) (JJ crafting) (NN square))
                  (, ,)
                  (NP
                    (NP (CD one))
                    (PP (IN above)
                      (NP (DT the) (JJ other)))))))))))
    (. .)))

nsubjpass(created-3, sticks-1)
auxpass(created-3, are-2)
agent(created-3, placing-5)
num(planks-8, two-6)
amod(planks-8, wooden-7)
dobj(placing-5, planks-8)
det(square-12, a-10)
amod(square-12, crafting-11)
prep_in(placing-5, square-12)
appos(square-12, one-14)
det(other-17, the-16)
prep_above(one-14, other-17)

(ROOT
  (S
    (NP
      (NP (CD 32) (JJ wooden) (NNS planks))
      (CC or)
      (NP (CD 8) (NN wood) (NNS blocks)))
    (VP (MD will)
      (VP (VB create)
        (NP
          (NP (DT a) (JJ full) (NN stack))
          (PP (IN of)
            (NP (NNP sticks))))))
    (. .)))

num(planks-3, 32-1)
amod(planks-3, wooden-2)
nsubj(create-9, planks-3)
num(blocks-7, 8-5)
nn(blocks-7, wood-6)
conj_or(planks-3, blocks-7)
nsubj(create-9, blocks-7)
aux(create-9, will-8)
det(stack-12, a-10)
amod(stack-12, full-11)
dobj(create-9, stack-12)
prep_of(stack-12, sticks-14)

(ROOT
  (S
    (NP (NNP sticks))
    (VP (VBP are)
      (VP (VBN used)
        (ADVP (RB primarily))
        (PP (IN as)
          (NP
            (NP (DT the) (NN handles))
            (PP (IN for)
              (NP (NNS tools) (, ,) (NNS torches) (, ,)
                (CC and)
                (NNS weapons)))))))
    (. .)))

nsubjpass(used-3, sticks-1)
auxpass(used-3, are-2)
advmod(used-3, primarily-4)
det(handles-7, the-6)
prep_as(used-3, handles-7)
nn(weapons-14, tools-9)
prep_for(handles-7, torches-11)
conj_and(weapons-14, torches-11)
prep_for(handles-7, weapons-14)

(ROOT
  (S
    (NP (NNP sticks))
    (VP (VBP are)
      (NP
        (NP (DT the) (JJ only) (NN building) (NN material))
        (VP (VBN required)
          (S
            (VP (TO to)
              (VP (VB craft)
                (NP (DT a) (NN fence)
                  (CC or)
                  (NN ladder))))))))
    (. .)))

nsubj(material-6, sticks-1)
cop(material-6, are-2)
det(material-6, the-3)
amod(material-6, only-4)
nn(material-6, building-5)
xsubj(craft-9, material-6)
partmod(material-6, required-7)
aux(craft-9, to-8)
xcomp(required-7, craft-9)
det(fence-11, a-10)
dobj(craft-9, fence-11)
dobj(craft-9, ladder-13)
conj_or(fence-11, ladder-13)

(ROOT
  (S
    (NP (NNP sticks))
    (VP (MD can)
      (ADVP (RB also))
      (VP (VB be)
        (VP (VBN used)
          (PP (IN as)
            (NP
              (NP (DT a) (NN fuel) (NN source))
              (PP (IN for)
                (NP (NNS furnaces))))))))
    (. .)))

nsubjpass(used-5, sticks-1)
aux(used-5, can-2)
advmod(used-5, also-3)
auxpass(used-5, be-4)
det(source-9, a-7)
nn(source-9, fuel-8)
prep_as(used-5, source-9)
prep_for(source-9, furnaces-11)

(ROOT
  (S
    (S
      (SBAR (IN though)
        (S
          (NP (PRP they))
          (VP (VBP are)
            (ADJP (JJ renewable)))))
      (, ,)
      (NP (NNP sticks))
      (VP (VBP are)
        (NP
          (NP (DT a)
            (ADJP (RBR less) (JJ efficient))
            (NN fuel))
          (PP (IN than)
            (NP (JJ wooden) (NNS planks))))))
    (, ,)
    (CC and)
    (S
      (S
        (VP (VB require)
          (NP (CD 2))))
      (VP (VBZ sticks)
        (S
          (VP (TO to)
            (VP (VB be)
              (VP (VBN burned)
                (PP (IN per)
                  (NP (NN furnace) (NN operation)))))))))
    (. .)))

mark(renewable-4, though-1)
nsubj(renewable-4, they-2)
cop(renewable-4, are-3)
advcl(fuel-11, renewable-4)
nsubj(fuel-11, sticks-6)
cop(fuel-11, are-7)
det(fuel-11, a-8)
advmod(efficient-10, less-9)
amod(fuel-11, efficient-10)
amod(planks-14, wooden-13)
prep_than(fuel-11, planks-14)
csubj(sticks-19, require-17)
dobj(require-17, 2-18)
conj_and(fuel-11, sticks-19)
aux(burned-22, to-20)
auxpass(burned-22, be-21)
xcomp(sticks-19, burned-22)
nn(operation-25, furnace-24)
prep_per(burned-22, operation-25)

(ROOT
  (S
    (NP (PRP it))
    (VP (VBZ is) (RB not)
      (VP (VBN recommended)
        (PP (TO to)
          (NP
            (QP (CD smelt) (CD sticks))))
        (SBAR (IN if)
          (S
            (NP (PRP they))
            (VP (VBP have)
              (ADVP (RB just))
              (VP (VBN been)
                (VP (VBN crafted)
                  (PRN (, ,)
                    (SBAR (IN since)
                      (S
                        (NP
                          (NP (DT the) (CD two) (NNS planks))
                          (VP (VBN used)))
                        (VP (MD can)
                          (VP (VB burn)
                            (PP (IN for)
                              (NP (CD 30) (NNS seconds)))))))
                    (, ,))
                  (SBAR (IN while)
                    (S
                      (NP (DT the) (CD four) (NNS sticks))
                      (VP (VBD created)
                        (VP (VB burn)
                          (PP (IN for)
                            (NP (CD 20) (NNS seconds))))))))))))))
    (. .)))

nsubjpass(recommended-4, it-1)
auxpass(recommended-4, is-2)
neg(recommended-4, not-3)
number(sticks-7, smelt-6)
prep_to(recommended-4, sticks-7)
mark(crafted-13, if-8)
nsubjpass(crafted-13, they-9)
aux(crafted-13, have-10)
advmod(crafted-13, just-11)
auxpass(crafted-13, been-12)
advcl(recommended-4, crafted-13)
mark(burn-21, since-15)
det(planks-18, the-16)
num(planks-18, two-17)
nsubj(burn-21, planks-18)
partmod(planks-18, used-19)
aux(burn-21, can-20)
parataxis(crafted-13, burn-21)
num(seconds-24, 30-23)
prep_for(burn-21, seconds-24)
mark(created-30, while-26)
det(sticks-29, the-27)
num(sticks-29, four-28)
nsubj(created-30, sticks-29)
advcl(crafted-13, created-30)
dep(created-30, burn-31)
num(seconds-34, 20-33)
prep_for(burn-31, seconds-34)

(ROOT
  (S
    (PP (IN in)
      (NP
        (NP (DT the) (JJ beta) (NNS stages))
        (PP (IN of)
          (NP (DT the) (NN game)))))
    (, ,)
    (NP
      (NP (NN stone) (NN brick))
      (SBAR (IN that)
        (S
          (NP (DT the) (NN player))
          (VP (VBZ crafts)))))
    (VP (VBD appeared)
      (S
        (VP (TO to)
          (VP (VB have)
            (NP
              (NP (DT a)
                (ADJP (RB very) (JJ small))
                (NN chance))
              (PP (IN of)
                (S
                  (VP (VBG having)
                    (NP (DT the) (NN object) (NN change))
                    (PP (TO to)
                      (NP
                        (NP (VBN cracked) (NN stone) (NN brick))
                        (CC or)
                        (NP (JJ mossy) (NN stone) (NN brick)))))))))))
      (SBAR
        (WHADVP (WRB when))
        (S
          (VP (VBN harvested)))))
    (. .)))

det(stages-4, the-2)
amod(stages-4, beta-3)
prep_in(appeared-15, stages-4)
det(game-7, the-6)
prep_of(stages-4, game-7)
nn(brick-10, stone-9)
nsubj(appeared-15, brick-10)
xsubj(have-17, brick-10)
complm(crafts-14, that-11)
det(player-13, the-12)
nsubj(crafts-14, player-13)
dep(brick-10, crafts-14)
aux(have-17, to-16)
xcomp(appeared-15, have-17)
det(chance-21, a-18)
advmod(small-20, very-19)
amod(chance-21, small-20)
dobj(have-17, chance-21)
prepc_of(chance-21, having-23)
det(change-26, the-24)
nn(change-26, object-25)
dobj(having-23, change-26)
amod(brick-30, cracked-28)
nn(brick-30, stone-29)
prep_to(having-23, brick-30)
amod(brick-34, mossy-32)
nn(brick-34, stone-33)
prep_to(having-23, brick-34)
conj_or(brick-30, brick-34)
advmod(harvested-36, when-35)
advcl(appeared-15, harvested-36)

(ROOT
  (S
    (NP (NN stone) (NNS bricks))
    (VP (MD can)
      (VP (VB be)
        (VP (VBN crafted)
          (PP (IN by)
            (S
              (VP
                (VP (VBG placing)
                  (PP
                    (NP (CD 4) (NN stone) (NNS blocks))
                    (IN in)
                    (NP (DT a) (NN square))))
                (, ,)
                (VP (VBG meaning)
                  (SBAR
                    (S
                      (NP (PRP they))
                      (VP (MD can)
                        (VP (VB be)
                          (VP (VBN crafted)
                            (PP (IN without)
                              (NP (DT a) (JJ crafting) (NN table)))))))))))))))
    (. .)))

nn(bricks-2, stone-1)
nsubjpass(crafted-5, bricks-2)
aux(crafted-5, can-3)
auxpass(crafted-5, be-4)
agent(crafted-5, placing-7)
num(blocks-10, 4-8)
nn(blocks-10, stone-9)
dep(placing-7, blocks-10)
det(square-13, a-12)
prep_in(placing-7, square-13)
dep(placing-7, meaning-15)
nsubjpass(crafted-19, they-16)
aux(crafted-19, can-17)
auxpass(crafted-19, be-18)
ccomp(meaning-15, crafted-19)
det(table-23, a-21)
amod(table-23, crafting-22)
prep_without(crafted-19, table-23)

(ROOT
  (S
    (NP (NN string))
    (VP (VBZ has)
      (NP
        (NP (DT a) (CD 4⁄5) (NN chance))
        (PP (IN of)
          (S
            (VP (VBG spawning)
              (PP (IN in)
                (NP
                  (NP (DT a) (NN dungeon) (NN chest))
                  (, ,)
                  (SBAR
                    (WHADVP (WRB where))
                    (S
                      (NP (PRP it))
                      (VP (MD will)
                        (VP (VB appear)
                          (PP (IN in)
                            (NP
                              (NP
                                (NP (NNS stacks))
                                (PP (IN of)
                                  (NP (CD 1))))
                              (: -)
                              (NP (CD 4) (NNS units)))))))))))))))
    (. .)))

nsubj(has-2, string-1)
det(chance-5, a-3)
num(chance-5, 4⁄5-4)
dobj(has-2, chance-5)
prepc_of(chance-5, spawning-7)
det(chest-11, a-9)
nn(chest-11, dungeon-10)
prep_in(spawning-7, chest-11)
advmod(appear-16, where-13)
rel(appear-16, where-13)
nsubj(appear-16, it-14)
aux(appear-16, will-15)
rcmod(chest-11, appear-16)
prep_in(appear-16, stacks-18)
prep_of(stacks-18, 1-20)
num(units-23, 4-22)
dep(stacks-18, units-23)

(ROOT
  (S
    (PP (IN in)
      (NP
        (NP (VBN abandoned) (NN mine) (NNS shafts))
        (CC and)
        (NP
          (NP (DT some) (NN room))
          (PP (IN of)
            (NP (NNS strongholds))))))
    (NP (PRP one))
    (VP (MD might)
      (VP (VB find)
        (NP
          (NP (NNS cobwebs))
          (SBAR
            (WHNP (WDT which))
            (S
              (VP (MD can)
                (VP (VB be)
                  (VP (VBN slashed)
                    (PP (IN with)
                      (NP
                        (NP (DT a) (NN sword))
                        (CC or)
                        (NP (NNS shears))))
                    (S
                      (VP (TO to)
                        (VP (VB get)
                          (NP (NN string)))))))))))))
    (. .)))

amod(shafts-4, abandoned-2)
nn(shafts-4, mine-3)
prep_in(find-12, shafts-4)
det(room-7, some-6)
conj_and(shafts-4, room-7)
prep_in(find-12, room-7)
prep_of(room-7, strongholds-9)
nsubj(find-12, one-10)
aux(find-12, might-11)
dobj(find-12, cobwebs-13)
nsubjpass(slashed-17, cobwebs-13)
aux(slashed-17, can-15)
auxpass(slashed-17, be-16)
rcmod(cobwebs-13, slashed-17)
det(sword-20, a-19)
prep_with(slashed-17, sword-20)
prep_with(slashed-17, shears-22)
conj_or(sword-20, shears-22)
aux(get-24, to-23)
purpcl(slashed-17, get-24)
dobj(get-24, string-25)

(ROOT
  (S
    (NP (NN string))
    (VP (VBZ is)
      (NP
        (NP (DT a) (JJ vital) (NN component))
        (PP (TO to)
          (NP
            (NP (CD two) (NNS recipes))
            (, ,)
            (NP (DT the) (NN bow))
            (CC and)
            (NP (DT the) (NN fishing) (NN rod))))))
    (. .)))

nsubj(component-5, string-1)
cop(component-5, is-2)
det(component-5, a-3)
amod(component-5, vital-4)
num(recipes-8, two-7)
prep_to(component-5, recipes-8)
det(bow-11, the-10)
prep_to(component-5, bow-11)
conj_and(recipes-8, bow-11)
det(rod-15, the-13)
nn(rod-15, fishing-14)
prep_to(component-5, rod-15)
conj_and(recipes-8, rod-15)

(ROOT
  (S
    (S
      (NP (NN string))
      (VP (MD can)
        (ADVP (RB also))
        (VP (VB be)
          (VP (VBN used)
            (S
              (VP (TO to)
                (VP (VB make)
                  (NP (NN wool)))))))))
    (, ,)
    (CC but)
    (S
      (NP (DT this))
      (VP (VBZ is)
        (ADJP (RB rather) (JJ wasteful))
        (SBAR (IN as)
          (S
            (NP (NN wool))
            (VP (MD can)
              (VP (VB be)
                (VP (VBN obtained)
                  (PP (IN from)
                    (NP (NN sheep))))))))))
    (. .)))

nsubjpass(used-5, string-1)
aux(used-5, can-2)
advmod(used-5, also-3)
auxpass(used-5, be-4)
aux(make-7, to-6)
purpcl(used-5, make-7)
dobj(make-7, wool-8)
nsubj(wasteful-14, this-11)
cop(wasteful-14, is-12)
advmod(wasteful-14, rather-13)
conj_but(used-5, wasteful-14)
mark(obtained-19, as-15)
nsubjpass(obtained-19, wool-16)
aux(obtained-19, can-17)
auxpass(obtained-19, be-18)
advcl(wasteful-14, obtained-19)
prep_from(obtained-19, sheep-21)

(ROOT
  (S
    (NP (PRP it))
    (VP (VBZ is)
      (ADJP (RBR more) (JJ economical))
      (SBAR (IN that)
        (S
          (NP (PRP you))
          (VP (VB save)
            (NP (PRP$ your) (NN string))
            (PP (IN for)
              (S
                (VP (VBG making)
                  (NP
                    (NP (JJR more) (NN fishing) (NNS rods))
                    (CC or)
                    (NP
                      (NP (JJR more) (NNS bows))
                      (SBAR
                        (WHNP (WDT that))
                        (S
                          (VP (MD can)
                            (VP (VB be)
                              (VP (VBN used)
                                (S
                                  (VP (TO to)
                                    (VP (VB make)
                                      (NP (NNS dispensers)))))))))))))))))))
    (. .)))

nsubj(economical-4, it-1)
cop(economical-4, is-2)
advmod(economical-4, more-3)
complm(save-7, that-5)
nsubj(save-7, you-6)
ccomp(economical-4, save-7)
poss(string-9, your-8)
dobj(save-7, string-9)
prepc_for(save-7, making-11)
amod(rods-14, more-12)
nn(rods-14, fishing-13)
dobj(making-11, rods-14)
amod(bows-17, more-16)
dobj(making-11, bows-17)
conj_or(rods-14, bows-17)
nsubjpass(used-21, bows-17)
aux(used-21, can-19)
auxpass(used-21, be-20)
rcmod(bows-17, used-21)
aux(make-23, to-22)
purpcl(used-21, make-23)
dobj(make-23, dispensers-24)

(ROOT
  (S
    (NP (NN sugar) (NN cane))
    (VP (MD can)
      (VP (VB be)
        (VP (VBN found)
          (PP (IN on)
            (NP
              (NP (NN grass))
              (, ,)
              (NP (NN dirt))
              (, ,)
              (CC and)
              (NP (NN sand))))
          (ADVP
            (ADVP (RB as) (RB long))
            (SBAR (IN as)
              (S
                (NP (PRP it))
                (VP (VBZ is)
                  (ADJP (JJ adjacent)
                    (S
                      (VP (TO to)
                        (VP (VB water)
                          (PP (IN on)
                            (NP
                              (QP (IN at) (JJS least) (CD one))
                              (NN side))))))))))))))
    (. .)))

nn(cane-2, sugar-1)
nsubjpass(found-5, cane-2)
aux(found-5, can-3)
auxpass(found-5, be-4)
prep_on(found-5, grass-7)
prep_on(found-5, dirt-9)
conj_and(grass-7, dirt-9)
prep_on(found-5, sand-12)
conj_and(grass-7, sand-12)
advmod(long-14, as-13)
advmod(found-5, long-14)
mark(adjacent-18, as-15)
nsubj(adjacent-18, it-16)
cop(adjacent-18, is-17)
dep(long-14, adjacent-18)
aux(water-20, to-19)
xcomp(adjacent-18, water-20)
quantmod(one-24, at-22)
dep(at-22, least-23)
num(side-25, one-24)
prep_on(water-20, side-25)

(ROOT
  (S
    (NP (NN sugar) (NN cane))
    (VP (VBZ is)
      (NP
        (NP (DT the) (JJ only) (NN source))
        (PP (IN of)
          (NP (NN sugar)
            (CC and)
            (NN paper)))))
    (. .)))

nn(cane-2, sugar-1)
nsubj(source-6, cane-2)
cop(source-6, is-3)
det(source-6, the-4)
amod(source-6, only-5)
prep_of(source-6, sugar-8)
prep_of(source-6, paper-10)
conj_and(sugar-8, paper-10)

(ROOT
  (S
    (S
      (NP (NN sugar))
      (VP
        (VP (VBZ is)
          (NP
            (NP (DT a) (JJ key) (NN component))
            (PP (IN of)
              (NP (NN cake)))))
        (CC and)
        (VP (VBZ is)
          (VP (VBN used)
            (PP (IN in)
              (NP (NN brewing)))))))
    (: ;)
    (S
      (NP (NN paper))
      (VP (VBZ is)
        (VP (VBN required)
          (S
            (VP (TO to)
              (VP (VB craft)
                (NP (NNS books)
                  (CC and)
                  (NNS maps))))))))
    (. .)))

nsubjpass(component-5, sugar-1)
nsubjpass(used-10, sugar-1)
cop(component-5, is-2)
det(component-5, a-3)
amod(component-5, key-4)
prep_of(component-5, cake-7)
auxpass(used-10, is-9)
conj_and(component-5, used-10)
prep_in(used-10, brewing-12)
nsubjpass(required-16, paper-14)
xsubj(craft-18, paper-14)
auxpass(required-16, is-15)
parataxis(component-5, required-16)
aux(craft-18, to-17)
xcomp(required-16, craft-18)
dobj(craft-18, books-19)
dobj(craft-18, maps-21)
conj_and(books-19, maps-21)

(ROOT
  (S
    (S
      (NP (NN sugar) (NN cane))
      (VP (VBZ has)
        (NP
          (NP (DT the) (JJ same) (NNS properties))
          (PP (IN as)
            (NP (DT the) (NN cactus))))))
    (: :)
    (S
      (S
        (VP
          (VP (VBG planting)
            (SBAR
              (S
                (NP (PRP it))
                (VP (VBZ does) (RB not)
                  (VP (VB require)
                    (NP (DT the) (NN land)
                      (S
                        (VP (TO to)
                          (VP (VB be)
                            (VP (VBN tilled)
                              (ADVP (RB beforehand))))))))))))
          (, ,)
          (VP (VBG removing)
            (SBAR
              (S
                (NP
                  (NP (DT a) (JJR lower) (NN portion))
                  (PP (IN of)
                    (NP (DT the) (NN plant))))
                (VP (VBZ causes)
                  (NP (PDT all) (DT the) (NNS sections))
                  (PP (IN above)
                    (NP (PRP it)))
                  (S
                    (VP (TO to)
                      (VP (VB drop)
                        (NP (NNS resources)))))))))
          (, ,)
          (CC and)
          (VP (VBG using)
            (NP (NN bone) (NN meal))
            (PP (IN on)
              (NP (DT the) (NN plant))))))
      (VP (VBZ does) (RB not)
        (VP (VB cause)
          (S
            (NP (PRP it))
            (VP (TO to)
              (VP (VB grow)
                (ADVP (RB instantly))))))))
    (. .)))

nn(cane-2, sugar-1)
nsubj(has-3, cane-2)
det(properties-6, the-4)
amod(properties-6, same-5)
dobj(has-3, properties-6)
det(cactus-9, the-8)
prep_as(properties-6, cactus-9)
csubj(cause-49, planting-11)
nsubj(require-15, it-12)
aux(require-15, does-13)
neg(require-15, not-14)
ccomp(planting-11, require-15)
det(land-17, the-16)
dobj(require-15, land-17)
aux(tilled-20, to-18)
auxpass(tilled-20, be-19)
infmod(land-17, tilled-20)
advmod(tilled-20, beforehand-21)
conj_and(planting-11, removing-23)
csubj(cause-49, removing-23)
det(portion-26, a-24)
amod(portion-26, lower-25)
nsubj(causes-30, portion-26)
xsubj(drop-37, portion-26)
det(plant-29, the-28)
prep_of(portion-26, plant-29)
ccomp(removing-23, causes-30)
predet(sections-33, all-31)
det(sections-33, the-32)
dobj(causes-30, sections-33)
prep_above(causes-30, it-35)
aux(drop-37, to-36)
xcomp(causes-30, drop-37)
dobj(drop-37, resources-38)
conj_and(planting-11, using-41)
csubj(cause-49, using-41)
nn(meal-43, bone-42)
dobj(using-41, meal-43)
det(plant-46, the-45)
prep_on(using-41, plant-46)
aux(cause-49, does-47)
neg(cause-49, not-48)
parataxis(has-3, cause-49)
nsubj(grow-52, it-50)
aux(grow-52, to-51)
xcomp(cause-49, grow-52)
advmod(grow-52, instantly-53)

(ROOT
  (S
    (NP (NN sugar) (NN cane))
    (VP (MD must)
      (VP (VB be)
        (VP (VBN planted)
          (PP (IN on)
            (NP
              (NP (DT a) (NN grass) (, ,) (NN dirt)
                (CC or)
                (NN sand) (NN block))
              (ADJP (RB directly) (JJ adjacent))))
          (PP (TO to)
            (NP (NN water))))))
    (. .)))

nn(cane-2, sugar-1)
nsubjpass(planted-5, cane-2)
aux(planted-5, must-3)
auxpass(planted-5, be-4)
det(block-13, a-7)
nn(block-13, grass-8)
conj_or(grass-8, dirt-10)
nn(block-13, dirt-10)
conj_or(grass-8, sand-12)
nn(block-13, sand-12)
prep_on(planted-5, block-13)
advmod(adjacent-15, directly-14)
amod(block-13, adjacent-15)
prep_to(planted-5, water-17)

(ROOT
  (S
    (S
      (NP (NN sugar) (NN cane))
      (, ,)
      (PP (IN like)
        (NP
          (NP (NNS saplings))
          (, ,)
          (NP (NN wheat))
          (, ,)
          (CC and)
          (NP (NNS cacti))))
      (, ,)
      (VP (MD will)
        (ADVP (RB only))
        (VP (VB grow)
          (SBAR (IN if)
            (S
              (NP
                (NP (DT the) (NN chunk))
                (SBAR
                  (S
                    (NP (PRP they))
                    (VP (VBP are)
                      (PP (IN on))))))
              (VP (VBZ is)
                (VP (VBN loaded)
                  (PP (IN into)
                    (NP (NN memory))))))))))
    (, ,) (IN so)
    (S
      (NP (DT the) (NN player))
      (VP (MD should) (RB not)
        (VP (VB venture)
          (ADVP (RB too) (RB far))
          (PP (IN from)
            (NP (DT the) (NN field))))))
    (. .)))

nn(cane-2, sugar-1)
nsubj(grow-14, cane-2)
prep_like(grow-14, saplings-5)
conj_and(saplings-5, wheat-7)
prep_like(grow-14, wheat-7)
conj_and(saplings-5, cacti-10)
prep_like(grow-14, cacti-10)
aux(grow-14, will-12)
advmod(grow-14, only-13)
mark(loaded-22, if-15)
det(chunk-17, the-16)
nsubjpass(loaded-22, chunk-17)
nsubj(are-19, they-18)
rcmod(chunk-17, are-19)
prep(are-19, on-20)
auxpass(loaded-22, is-21)
advcl(grow-14, loaded-22)
prep_into(loaded-22, memory-24)
dep(grow-14, so-26)
det(player-28, the-27)
nsubj(venture-31, player-28)
aux(venture-31, should-29)
neg(venture-31, not-30)
ccomp(grow-14, venture-31)
advmod(venture-31, too-32)
det(field-36, the-35)
prep_far_from(venture-31, field-36)

(ROOT
  (S
    (NP
      (NP (DT each) (NN unit))
      (PP (IN of)
        (NP (DT the) (NN farm))))
    (VP (VBZ has)
      (NP
        (NP
          (NP (CD 4) (NN water) (NNS blocks))
          (CC and)
          (NP (CD 12) (NN sand)))
        (, ,)
        (VP (VBG allowing)
          (NP
            (NP (CD 75) (NN %))
            (PP (IN of)
              (NP (DT the) (NN area)
                (S
                  (VP (TO to)
                    (VP (VB be)
                      (VP (VBN dedicated)
                        (PP (TO to)
                          (NP (DT the) (NN sugar) (NN cane)))))))))))))
    (. .)))

det(unit-2, each-1)
nsubj(has-6, unit-2)
det(farm-5, the-4)
prep_of(unit-2, farm-5)
num(blocks-9, 4-7)
nn(blocks-9, water-8)
dobj(has-6, blocks-9)
num(sand-12, 12-11)
dobj(has-6, sand-12)
conj_and(blocks-9, sand-12)
partmod(blocks-9, allowing-14)
num(%-16, 75-15)
dobj(allowing-14, %-16)
det(area-19, the-18)
prep_of(%-16, area-19)
aux(dedicated-22, to-20)
auxpass(dedicated-22, be-21)
infmod(area-19, dedicated-22)
det(cane-26, the-24)
nn(cane-26, sugar-25)
prep_to(dedicated-22, cane-26)

(ROOT
  (S
    (S
      (PP (IN with)
        (NP
          (NP (DT the) (NN use))
          (PP (IN of)
            (NP (NNS pistons)))))
      (NP (PRP it))
      (VP (VBZ becomes)
        (ADJP (JJ possible)
          (S
            (VP (TO to)
              (VP (VB automate)
                (NP
                  (NP (DT a) (NN harvest))
                  (PP (IN of)
                    (NP (NN sugar) (NNS canes))))))))))
    (: :)
    (S
      (NP (DT a) (NN piston))
      (VP (VBZ is)
        (VP (VBN placed)
          (S
            (VP (TO to)
              (VP (VB extend)
                (PP (IN into)
                  (NP
                    (NP (DT the) (NN middle))
                    (PP (IN of)
                      (NP
                        (NP (DT a) (NN cane))
                        (, ,)
                        (SBAR
                          (WHNP (WDT which))
                          (S
                            (VP (MD will)
                              (VP (VB cause)
                                (NP
                                  (NP (DT the) (JJ upper) (NNS segments))
                                  (PP (IN of)
                                    (NP (DT the) (NN cane)
                                      (S
                                        (VP (TO to)
                                          (VP (VB become)
                                            (NP (NNS items))
                                            (SBAR
                                              (WHADVP (WRB when))
                                              (S
                                                (NP (DT the) (NN piston))
                                                (VP (VBZ is)
                                                  (VP (VBN triggered)))))))))))))))))))))))))
    (. .)))

det(use-3, the-2)
prep_with(possible-8, use-3)
prep_of(use-3, pistons-5)
nsubj(possible-8, it-6)
cop(possible-8, becomes-7)
aux(automate-10, to-9)
xcomp(possible-8, automate-10)
det(harvest-12, a-11)
dobj(automate-10, harvest-12)
nn(canes-15, sugar-14)
prep_of(harvest-12, canes-15)
det(piston-18, a-17)
nsubjpass(placed-20, piston-18)
xsubj(extend-22, piston-18)
auxpass(placed-20, is-19)
parataxis(possible-8, placed-20)
aux(extend-22, to-21)
xcomp(placed-20, extend-22)
det(middle-25, the-24)
prep_into(extend-22, middle-25)
det(cane-28, a-27)
prep_of(middle-25, cane-28)
nsubj(cause-32, cane-28)
aux(cause-32, will-31)
rcmod(cane-28, cause-32)
det(segments-35, the-33)
amod(segments-35, upper-34)
dobj(cause-32, segments-35)
det(cane-38, the-37)
prep_of(segments-35, cane-38)
aux(items-41, to-39)
cop(items-41, become-40)
infmod(cane-38, items-41)
advmod(triggered-46, when-42)
det(piston-44, the-43)
nsubjpass(triggered-46, piston-44)
auxpass(triggered-46, is-45)
advcl(items-41, triggered-46)

(ROOT
  (S
    (NP (NN sugar))
    (VP (VBZ is)
      (NP
        (NP (DT a) (NN food) (NN item))
        (VP (VBN derived)
          (PP (IN from)
            (NP (NN sugar) (NN cane))))))
    (. .)))

nsubj(item-5, sugar-1)
cop(item-5, is-2)
det(item-5, a-3)
nn(item-5, food-4)
partmod(item-5, derived-6)
nn(cane-9, sugar-8)
prep_from(derived-6, cane-9)

(ROOT
  (S
    (NP (CC neither)
      (NP (NN sugar))
      (CC nor)
      (NP (NN sugar) (NN cane)))
    (VP (MD can)
      (VP (VB be)
        (VP (VBN eaten)
          (PP (IN by)
            (NP (PRP themselves))))))
    (. .)))

preconj(sugar-2, neither-1)
nsubjpass(eaten-8, sugar-2)
nn(cane-5, sugar-4)
conj_nor(sugar-2, cane-5)
nsubjpass(eaten-8, cane-5)
aux(eaten-8, can-6)
auxpass(eaten-8, be-7)
agent(eaten-8, themselves-10)

(ROOT
  (S
    (NP (JJ tall) (NN grass))
    (VP (VBZ is) (RB not)
      (NP
        (NP (DT a) (JJ solid) (NN block))
        (, ,)
        (CONJP (CC but)
          (RB rather))
        (NP
          (NP (DT an) (JJ aesthetic) (NN plant))
          (SBAR
            (WHNP (WDT that))
            (S
              (VP (VBZ does) (RB not)
                (VP (VB obstruct)
                  (NP
                    (NP (NN movement))
                    (, ,)
                    (ADJP (JJ similar)
                      (PP (TO to)
                        (NP (NN sugar) (NN cane))))
                    (, ,)
                    (NP (JJ dead) (NN bush))
                    (CC and)
                    (NP (NN wheat))))))))))
    (. .)))

amod(grass-2, tall-1)
nsubj(block-7, grass-2)
cop(block-7, is-3)
neg(block-7, not-4)
det(block-7, a-5)
amod(block-7, solid-6)
det(plant-13, an-11)
amod(plant-13, aesthetic-12)
conj_negcc(block-7, plant-13)
nsubj(obstruct-17, plant-13)
aux(obstruct-17, does-15)
neg(obstruct-17, not-16)
rcmod(plant-13, obstruct-17)
dobj(obstruct-17, movement-18)
dobj(obstruct-17, similar-20)
amod(movement-18, similar-20)
conj_and(movement-18, similar-20)
nn(cane-23, sugar-22)
prep_to(similar-20, cane-23)
amod(bush-26, dead-25)
dobj(obstruct-17, bush-26)
conj_and(movement-18, bush-26)
dobj(obstruct-17, wheat-28)
conj_and(movement-18, wheat-28)

(ROOT
  (S
    (S
      (NP (DT all) (CD three) (NNS variants))
      (VP (MD will)
        (ADVP (RB occasionally))
        (VP (VB drop)
          (NP (NN wheat) (NNS seeds))
          (SBAR
            (WHADVP (WRB when))
            (S
              (VP (VBN broken)))))))
    (: ;)
    (S
      (NP (DT a) (NN hoe))
      (VP (VBZ is) (RB not)
        (VP (VBN required)
          (S
            (VP (TO to)
              (VP (VB produce)
                (NP (NNS seeds))
                (PP (IN from)
                  (NP (DT this) (NN block)))))))))
    (. .)))

det(variants-3, all-1)
num(variants-3, three-2)
nsubj(drop-6, variants-3)
aux(drop-6, will-4)
advmod(drop-6, occasionally-5)
nn(seeds-8, wheat-7)
dobj(drop-6, seeds-8)
advmod(broken-10, when-9)
advcl(drop-6, broken-10)
det(hoe-13, a-12)
nsubjpass(required-16, hoe-13)
xsubj(produce-18, hoe-13)
auxpass(required-16, is-14)
neg(required-16, not-15)
parataxis(drop-6, required-16)
aux(produce-18, to-17)
xcomp(required-16, produce-18)
dobj(produce-18, seeds-19)
det(block-22, this-21)
prep_from(produce-18, block-22)

(ROOT
  (S
    (S
      (NP (DT the) (JJ tall) (NN grass) (NN variant))
      (VP (VBZ is) (RB not)
        (ADJP (JJ naturally-occurring))))
    (CC and)
    (S
      (SBAR (RB even) (IN though)
        (S
          (NP (PRP it))
          (VP (VBZ looks)
            (PP (IN like)
              (NP (DT a) (JJ dead) (NN shrub))))))
      (, ,)
      (NP (PRP it))
      (VP
        (VP (MD can) (RB not)
          (VP (VB be)
            (VP (VBN placed)
              (PP (IN on)
                (NP (NN sand))))))
        (, ,)
        (CC and)
        (VP (MD will)
          (VP (VB drop)
            (NP (NNS seeds))
            (PP (IN like)
              (NP
                (NP (DT the) (JJ other) (NNS variants))
                (PP (IN of)
                  (NP (JJ tall) (NN grass)))))))))
    (. .)))

det(variant-4, the-1)
amod(variant-4, tall-2)
nn(variant-4, grass-3)
nsubj(naturally-occurring-7, variant-4)
cop(naturally-occurring-7, is-5)
neg(naturally-occurring-7, not-6)
advmod(looks-12, even-9)
dep(looks-12, though-10)
nsubj(looks-12, it-11)
advcl(placed-22, looks-12)
det(shrub-16, a-14)
amod(shrub-16, dead-15)
prep_like(looks-12, shrub-16)
nsubjpass(placed-22, it-18)
nsubj(drop-28, it-18)
aux(placed-22, can-19)
neg(placed-22, not-20)
auxpass(placed-22, be-21)
conj_and(naturally-occurring-7, placed-22)
prep_on(placed-22, sand-24)
aux(drop-28, will-27)
conj_and(naturally-occurring-7, drop-28)
conj_and(placed-22, drop-28)
dobj(drop-28, seeds-29)
det(variants-33, the-31)
amod(variants-33, other-32)
prep_like(drop-28, variants-33)
amod(grass-36, tall-35)
prep_of(variants-33, grass-36)

(ROOT
  (S
    (NP (VBG harvesting) (JJ tall) (NN grass))
    (VP (VBZ is)
      (NP
        (NP (DT the) (JJ primary) (NN way))
        (PP (IN of)
          (S
            (VP (VBG obtaining)
              (NP
                (NP (NN wheat) (NNS seeds))
                (, ,)
                (NP
                  (NP (DT the) (JJ secondary) (NN way))
                  (VP (VBG being)
                    (VP (VBN harvesting)
                      (NP (RB fully) (JJ grown) (NN wheat)))))))))))
    (. .)))

amod(grass-3, harvesting-1)
amod(grass-3, tall-2)
nsubj(way-7, grass-3)
cop(way-7, is-4)
det(way-7, the-5)
amod(way-7, primary-6)
prepc_of(way-7, obtaining-9)
nn(seeds-11, wheat-10)
dobj(obtaining-9, seeds-11)
det(way-15, the-13)
amod(way-15, secondary-14)
appos(seeds-11, way-15)
auxpass(harvesting-17, being-16)
partmod(way-15, harvesting-17)
advmod(wheat-20, fully-18)
amod(wheat-20, grown-19)
dobj(harvesting-17, wheat-20)

(ROOT
  (S
    (SBAR (IN because)
      (S
        (NP (NN wheat))
        (VP (VBZ drops)
          (NP (JJ many) (JJR more) (NNS seeds)))))
    (, ,)
    (NP (JJ tall) (NN grass))
    (VP (VBZ is)
      (ADJP (RB only) (JJ useful)
        (PP (IN in)
          (NP
            (NP (DT the) (NN start))
            (PP (IN of)
              (NP (DT the) (NN game)))))))
    (. .)))

mark(drops-3, because-1)
nsubj(drops-3, wheat-2)
advcl(useful-12, drops-3)
amod(seeds-6, many-4)
amod(seeds-6, more-5)
dobj(drops-3, seeds-6)
amod(grass-9, tall-8)
nsubj(useful-12, grass-9)
cop(useful-12, is-10)
advmod(useful-12, only-11)
det(start-15, the-14)
prep_in(useful-12, start-15)
det(game-18, the-17)
prep_of(start-15, game-18)

(ROOT
  (S
    (PP (IN from)
      (NP
        (NP (RB just) (CD one) (NN log))
        (CC and)
        (NP
          (NP (CD eight) (NNS pieces))
          (PP (IN of)
            (NP (NN coal)
              (CC or)
              (NN charcoal))))))
    (NP (CD 32) (NNS torches))
    (VP (MD can)
      (VP (VB be)
        (VP (VBN made) (, ,)
          (S
            (VP (VBG making)
              (S
                (NP (PRP them))
                (NP (DT an)
                  (ADJP (RB easily) (JJ obtainable))
                  (NN item))))))))
    (. .)))

advmod(log-4, just-2)
num(log-4, one-3)
prep_from(made-16, log-4)
num(pieces-7, eight-6)
conj_and(log-4, pieces-7)
prep_from(made-16, pieces-7)
prep_of(pieces-7, coal-9)
prep_of(pieces-7, charcoal-11)
conj_or(coal-9, charcoal-11)
num(torches-13, 32-12)
nsubjpass(made-16, torches-13)
aux(made-16, can-14)
auxpass(made-16, be-15)
xcomp(made-16, making-18)
nsubj(item-23, them-19)
det(item-23, an-20)
advmod(obtainable-22, easily-21)
amod(item-23, obtainable-22)
xcomp(making-18, item-23)

(ROOT
  (S
    (S
      (VP (VBG being)
        (NP (DT a) (JJ solid) (NN brick))))
    (, ,)
    (NP (DT this))
    (ADVP (RB even))
    (VP (VBZ prevents)
      (NP (NN sand)
        (CC and)
        (NN gravel))
      (PP (IN from)
        (S
          (VP (VBG falling)
            (PRT (RP down))
            (PP (IN past)
              (NP
                (NP (DT a) (NN square))
                (PP (IN with)
                  (NP
                    (NP (DT a) (NN torch))
                    (PP (IN on)
                      (NP (PRP it)))))))))))
    (. .)))

cop(brick-4, being-1)
det(brick-4, a-2)
amod(brick-4, solid-3)
dep(prevents-8, brick-4)
nsubj(prevents-8, this-6)
advmod(prevents-8, even-7)
dobj(prevents-8, sand-9)
dobj(prevents-8, gravel-11)
conj_and(sand-9, gravel-11)
prepc_from(prevents-8, falling-13)
prt(falling-13, down-14)
det(square-17, a-16)
prep_past(falling-13, square-17)
det(torch-20, a-19)
prep_with(square-17, torch-20)
prep_on(torch-20, it-22)

(ROOT
  (S
    (NP (NN sand)
      (CC or)
      (NN gravel))
    (VP (VBP break)
      (SBAR
        (WHADVP (WRB when))
        (S
          (NP (PRP they))
          (VP (VBP fall)
            (PP (IN on)
              (NP (DT a) (NN torch)))
            (SBAR (IN if)
              (S
                (NP (PRP they))
                (VP (VBP are)
                  (ADJP (VBN placed) (RB directly)
                    (PP (IN above)
                      (NP
                        (NP (DT a) (NN torch))
                        (SBAR
                          (S
                            (NP (PRP they))
                            (VP (VBP act)
                              (SBAR (RB as) (IN if)
                                (S
                                  (NP (PRP they))
                                  (VP (VBD were)
                                    (PP (IN on)
                                      (NP (DT any) (JJ other) (JJ solid) (NN material)))
                                    (, ,)
                                    (S
                                      (VP (VBG allowing)
                                        (S
                                          (NP (PRP them))
                                          (VP (TO to)
                                            (VP (VB be)
                                              (VP (VBN used)
                                                (PP (IN as)
                                                  (NP (JJ environmental) (NNS triggers)))))))))))))))
                        (, ,)
                        (PP (JJ such) (IN as)
                          (NP (NNS airlocks)))))))))))))
    (. .)))

nsubj(break-4, sand-1)
conj_or(sand-1, gravel-3)
nsubj(break-4, gravel-3)
advmod(fall-7, when-5)
nsubj(fall-7, they-6)
advcl(break-4, fall-7)
det(torch-10, a-9)
prep_on(fall-7, torch-10)
mark(placed-14, if-11)
nsubjpass(placed-14, they-12)
auxpass(placed-14, are-13)
advcl(fall-7, placed-14)
advmod(placed-14, directly-15)
det(torch-18, a-17)
prep_above(placed-14, torch-18)
nsubj(act-20, they-19)
rcmod(torch-18, act-20)
advmod(were-24, as-21)
dep(were-24, if-22)
nsubj(were-24, they-23)
ccomp(act-20, were-24)
det(material-29, any-26)
amod(material-29, other-27)
amod(material-29, solid-28)
prep_on(were-24, material-29)
xcomp(were-24, allowing-31)
nsubjpass(used-35, them-32)
aux(used-35, to-33)
auxpass(used-35, be-34)
xcomp(allowing-31, used-35)
amod(triggers-38, environmental-37)
prep_as(used-35, triggers-38)
prep_such_as(torch-18, airlocks-42)

(ROOT
  (S
    (S
      (NP (NNS players))
      (VP (MD can)
        (VP (VB pass)
          (PP (IN through)
            (NP (NNS torches))))))
    (, ,)
    (CC and)
    (S
      (ADVP (RB therefore))
      (NP (DT a) (NN torch))
      (VP (MD can)
        (VP (VB be)
          (VP (VBN placed)
            (ADVP (RB directly))
            (PP (IN under)
              (NP (DT the) (NN player)))
            (PP (IN without)
              (NP
                (NP (DT the) (NN player))
                (VP (VBG needing)
                  (S
                    (VP (TO to)
                      (VP (VB move)
                        (CC or)
                        (VB jump)))))))))))
    (. .)))

nsubj(pass-3, players-1)
aux(pass-3, can-2)
prep_through(pass-3, torches-5)
advmod(placed-13, therefore-8)
det(torch-10, a-9)
nsubjpass(placed-13, torch-10)
aux(placed-13, can-11)
auxpass(placed-13, be-12)
conj_and(pass-3, placed-13)
advmod(placed-13, directly-14)
det(player-17, the-16)
prep_under(placed-13, player-17)
det(player-20, the-19)
prep_without(placed-13, player-20)
partmod(player-20, needing-21)
aux(move-23, to-22)
xcomp(needing-21, move-23)
xcomp(needing-21, jump-25)
conj_or(move-23, jump-25)

(ROOT
  (S
    (NP (NNS torches))
    (VP (MD may)
      (VP (VB be)
        (VP (VBN placed)
          (PP (IN on)
            (NP
              (NP (DT the) (NNS sides))
              (PP (IN of)
                (NP
                  (NP (JJ openable) (NNS blocks))
                  (PP (JJ such) (IN as)
                    (NP (NNS chests)))))))
          (PP (IN by)
            (S
              (VP
                (VP (VBG having)
                  (NP
                    (NP (DT another) (NN block))
                    (SBAR
                      (WHNP (WDT which))
                      (S
                        (NP (DT a) (NN torch))
                        (VP (MD can) (RB not)
                          (VP (VB be)
                            (ADJP (VBN placed)
                              (PP (IN on)
                                (S
                                  (ADVP (RB also))
                                  (VP (VBG facing)
                                    (NP (DT the) (NN cube))))))
                            (SBAR
                              (WHADVP (WRB where))
                              (S
                                (NP (DT the) (NN torch))
                                (VP (MD should)
                                  (VP (VB be)
                                    (VP (VBN placed))))))))))))
                (, ,)
                (CC and)
                (VP (VBG attempting)
                  (S
                    (VP (TO to)
                      (VP (VB place)
                        (NP (DT a) (NN torch))
                        (PP (IN on)
                          (NP (PRP it)))))))))))))
    (. .)))

nsubjpass(placed-4, torches-1)
aux(placed-4, may-2)
auxpass(placed-4, be-3)
det(sides-7, the-6)
prep_on(placed-4, sides-7)
amod(blocks-10, openable-9)
prep_of(sides-7, blocks-10)
prep_such_as(blocks-10, chests-13)
agent(placed-4, having-15)
det(block-17, another-16)
dobj(having-15, block-17)
dobj(placed-24, block-17)
dobj(attempting-38, block-17)
rel(placed-24, which-18)
det(torch-20, a-19)
nsubjpass(placed-24, torch-20)
aux(placed-24, can-21)
neg(placed-24, not-22)
auxpass(placed-24, be-23)
rcmod(block-17, placed-24)
advmod(facing-27, also-26)
prepc_on(placed-24, facing-27)
det(cube-29, the-28)
dobj(facing-27, cube-29)
advmod(placed-35, where-30)
det(torch-32, the-31)
nsubjpass(placed-35, torch-32)
aux(placed-35, should-33)
auxpass(placed-35, be-34)
advcl(placed-24, placed-35)
agent(placed-4, attempting-38)
conj_and(having-15, attempting-38)
aux(place-40, to-39)
xcomp(attempting-38, place-40)
det(torch-42, a-41)
dobj(place-40, torch-42)
prep_on(place-40, it-44)

(ROOT
  (S
    (S
      (NP (DT the) (NN torch))
      (VP (MD will)
        (ADVP (RB instead))
        (VP (VB attach)
          (PP (TO to)
            (NP
              (NP (DT an) (JJ acceptable) (NN block))
              (PP (JJ such) (IN as)
                (NP (DT the) (NN chest))))))))
    (: ;)
    (S
      (PP (IN since)
        (NP (NN beta)))
      (NP (CD 1.7) (NNS torches))
      (VP (MD can)
        (VP (VB be)
          (VP (VBN placed)
            (PP (IN on)
              (NP (NNS fences)))))))
    (. .)))

det(torch-2, the-1)
nsubj(attach-5, torch-2)
aux(attach-5, will-3)
advmod(attach-5, instead-4)
det(block-9, an-7)
amod(block-9, acceptable-8)
prep_to(attach-5, block-9)
det(chest-13, the-12)
prep_such_as(block-9, chest-13)
prep_since(placed-21, beta-16)
num(torches-18, 1.7-17)
nsubjpass(placed-21, torches-18)
aux(placed-21, can-19)
auxpass(placed-21, be-20)
parataxis(attach-5, placed-21)
prep_on(placed-21, fences-23)

(ROOT
  (S
    (SBAR
      (WHADVP (WRB when))
      (S
        (VP (VBD left)
          (ADVP (RB alone)))))
    (, ,)
    (NP
      (NP (NN wheat) (NNS seeds))
      (VP (VBN planted)
        (PP (IN in)
          (NP (NN farmland)))))
    (VP (MD will)
      (VP (VB grow)
        (S
          (VP (TO to)
            (VP (VB become)
              (NP
                (NP (NN wheat))
                (SBAR
                  (WHNP (WDT which))
                  (S
                    (VP (MD can)
                      (VP (VB be)
                        (ADJP (VBN harvested))))))))))))
    (. .)))

advmod(left-2, when-1)
dep(grow-11, left-2)
advmod(left-2, alone-3)
nn(seeds-6, wheat-5)
nsubj(grow-11, seeds-6)
xsubj(wheat-14, seeds-6)
partmod(seeds-6, planted-7)
prep_in(planted-7, farmland-9)
aux(grow-11, will-10)
aux(wheat-14, to-12)
cop(wheat-14, become-13)
xcomp(grow-11, wheat-14)
nsubjpass(harvested-18, wheat-14)
aux(harvested-18, can-16)
auxpass(harvested-18, be-17)
rcmod(wheat-14, harvested-18)

(ROOT
  (S
    (NP (NN bone) (NN meal))
    (VP (MD can)
      (VP (VB be)
        (VP (VBN used)
          (PP (IN on)
            (NP (DT the) (JJ planted) (NNS seeds)))
          (S
            (VP (TO to)
              (VP
                (ADVP (RB instantly))
                (VB mature)
                (NP (DT the) (NNS plants))
                (PP (TO to)
                  (NP
                    (NP (DT the) (JJ last) (NN stage))
                    (PP (IN of)
                      (NP (NN growth)))))))))))
    (. .)))

nn(meal-2, bone-1)
nsubjpass(used-5, meal-2)
aux(used-5, can-3)
auxpass(used-5, be-4)
det(seeds-9, the-7)
amod(seeds-9, planted-8)
prep_on(used-5, seeds-9)
aux(mature-12, to-10)
advmod(mature-12, instantly-11)
purpcl(used-5, mature-12)
det(plants-14, the-13)
dobj(mature-12, plants-14)
det(stage-18, the-16)
amod(stage-18, last-17)
prep_to(mature-12, stage-18)
prep_of(stage-18, growth-20)

(ROOT
  (S
    (NP (DT the) (NN image))
    (ADVP (RB below))
    (VP (VBZ shows)
      (NP
        (NP (DT the) (NNS stages))
        (PP (IN of)
          (NP (NN growth))))
      (PP (IN from)
        (NP
          (ADJP (RB newly) (JJ planted))
          (NNS seeds)))
      (PP (TO to)
        (NP
          (NP (NN wheat))
          (SBAR
            (WHNP (WDT that))
            (S
              (VP (VBZ is)
                (ADJP (JJ ready)
                  (PP (IN for)
                    (S
                      (VP (VBG harvesting)))))))))))
    (. .)))

det(image-2, the-1)
nsubj(shows-4, image-2)
advmod(shows-4, below-3)
det(stages-6, the-5)
dobj(shows-4, stages-6)
prep_of(stages-6, growth-8)
advmod(planted-11, newly-10)
amod(seeds-12, planted-11)
prep_from(shows-4, seeds-12)
prep_to(shows-4, wheat-14)
nsubj(ready-17, wheat-14)
cop(ready-17, is-16)
rcmod(wheat-14, ready-17)
prepc_for(ready-17, harvesting-19)

(ROOT
  (S
    (SBAR
      (WHADVP (WRB when))
      (S
        (VP
          (ADVP (RB fully))
          (VBN grown))))
    (, ,)
    (NP (NN wheat) (NNS crops))
    (VP (MD will)
      (VP (VB drop)
        (NP
          (NP (CD 1) (NN wheat))
          (CONJP (RB as) (RB well) (IN as))
          (NP (CD 0-3) (NNS seeds)))))
    (. .)))

advmod(grown-3, when-1)
advmod(grown-3, fully-2)
dep(drop-8, grown-3)
nn(crops-6, wheat-5)
nsubj(drop-8, crops-6)
aux(drop-8, will-7)
num(wheat-10, 1-9)
dobj(drop-8, wheat-10)
num(seeds-15, 0-3-14)
dobj(drop-8, seeds-15)
conj_and(wheat-10, seeds-15)

(ROOT
  (S
    (SBAR (IN if)
      (S
        (NP (PRP they))
        (VP (VBP are)
          (VP (VBN harvested)
            (ADVP (RB early))))))
    (, ,)
    (NP (PRP they))
    (VP (MD will)
      (VP (VB drop)
        (NP
          (NP (NNS seeds))
          (PP (CC but)
            (NP (DT no) (NN wheat))))))
    (. .)))

mark(harvested-4, if-1)
nsubjpass(harvested-4, they-2)
auxpass(harvested-4, are-3)
advcl(drop-9, harvested-4)
advmod(harvested-4, early-5)
nsubj(drop-9, they-7)
aux(drop-9, will-8)
dobj(drop-9, seeds-10)
prep(seeds-10, but-11)
det(wheat-13, no-12)
dep(but-11, wheat-13)

(ROOT
  (S
    (NP
      (NP (NNS seeds))
      (PP (IN for)
        (NP (VBG growing) (NN wheat))))
    (VP (MD can)
      (VP (VB be)
        (VP (VBN obtained)
          (PP
            (PP (IN by)
              (S
                (VP (VBG breaking)
                  (NP (JJ tall) (NN grass)))))
            (CC or)
            (PP (IN from)
              (PP (IN inside)
                (NP
                  (NP (DT a) (NN dungeon) (POS 's))
                  (NNS chests))))))))
    (. .)))

nsubjpass(obtained-7, seeds-1)
nsubjpass(obtained-7', seeds-1)
amod(wheat-4, growing-3)
prep_for(seeds-1, wheat-4)
aux(obtained-7, can-5)
auxpass(obtained-7, be-6)
conj_or(obtained-7, obtained-7')
agent(obtained-7, breaking-9)
prepc_from(obtained-7', breaking-9)
amod(grass-11, tall-10)
dobj(breaking-9, grass-11)
det(dungeon-16, a-15)
poss(chests-18, dungeon-16)
prep_inside(obtained-7, chests-18)

(ROOT
  (S
    (NP (NN wheat))
    (VP (MD can)
      (VP (VB be)
        (VP (VBN crafted)
          (PP (IN into)
            (NP
              (NP (NN bread))
              (, ,)
              (NP (NN cake))
              (, ,)
              (CC or)
              (NP (NNS cookies)))))))
    (. .)))

nsubjpass(crafted-4, wheat-1)
aux(crafted-4, can-2)
auxpass(crafted-4, be-3)
prep_into(crafted-4, bread-6)
prep_into(crafted-4, cake-8)
conj_or(bread-6, cake-8)
prep_into(crafted-4, cookies-11)
conj_or(bread-6, cookies-11)

(ROOT
  (S
    (NP (VBG harvesting) (NN wheat))
    (VP (VBZ generates)
      (NP (CD 0))
      (PP (TO to)
        (NP
          (NP (CD 3) (NNS seeds))
          (SBAR
            (WHNP (WDT that))
            (S
              (VP (MD can)
                (VP (VB be)
                  (VP (VBN replanted)
                    (S
                      (VP (TO to)
                        (VP (VB produce)
                          (NP (JJR more) (NNS crops)))))))))))))
    (. .)))

amod(wheat-2, harvesting-1)
nsubj(generates-3, wheat-2)
dobj(generates-3, 0-4)
num(seeds-7, 3-6)
prep_to(generates-3, seeds-7)
nsubjpass(replanted-11, seeds-7)
aux(replanted-11, can-9)
auxpass(replanted-11, be-10)
rcmod(seeds-7, replanted-11)
aux(produce-13, to-12)
purpcl(replanted-11, produce-13)
amod(crops-15, more-14)
dobj(produce-13, crops-15)

(ROOT
  (S
    (PP (RB as) (IN of)
      (NP (NN beta) (CD 1.8)))
    (, ,)
    (S
      (ADVP (RB fully))
      (NP (JJ grown) (NNS crops))
      (VP (MD will)
        (VP (VB drop)
          (PRT (RP up))
          (PP (TO to)
            (NP (CD 3) (NNS seeds))))))
    (, ,)
    (CC but)
    (S
      (NP (JJ immature) (NNS crops))
      (VP (MD will)
        (ADVP (RB only))
        (VP (VB drop)
          (NP (CD 0-1) (NN seed)))))
    (. .)))

dep(of-2, as-1)
advcl(drop-10, of-2)
pobj(of-2, beta-3)
num(beta-3, 1.8-4)
advmod(drop-10, fully-6)
amod(crops-8, grown-7)
nsubj(drop-10, crops-8)
aux(drop-10, will-9)
prt(drop-10, up-11)
num(seeds-14, 3-13)
prep_to(drop-10, seeds-14)
amod(crops-18, immature-17)
nsubj(drop-21, crops-18)
aux(drop-21, will-19)
advmod(drop-21, only-20)
conj_but(drop-10, drop-21)
num(seed-23, 0-1-22)
dobj(drop-21, seed-23)

(ROOT
  (S
    (S
      (S
        (VP (VBG using)
          (NP (NN wheat))
          (S
            (VP (TO to)
              (VP (VB make)
                (NP (NNS cookies)))))))
      (VP (VBZ is)
        (ADJP (RBR more) (JJ efficient)
          (PP (IN than)
            (S
              (VP (VBG using)
                (NP (NN wheat))
                (S
                  (VP (TO to)
                    (VP (VB make)
                      (NP (NN bread)))))))))))
    (, ,)
    (CC but)
    (S
      (NP (DT the) (NNS resources)
        (S
          (VP (TO to)
            (VP (VB make)
              (NP (NNS cookies))))))
      (VP (MD can)
        (ADVP (RB only))
        (VP (VB be)
          (VP (VBN found)
            (PP (IN in)
              (NP (NNS dungeons)))))))
    (. .)))

csubj(efficient-8, using-1)
dobj(using-1, wheat-2)
aux(make-4, to-3)
xcomp(using-1, make-4)
dobj(make-4, cookies-5)
cop(efficient-8, is-6)
advmod(efficient-8, more-7)
prepc_than(efficient-8, using-10)
dobj(using-10, wheat-11)
aux(make-13, to-12)
xcomp(using-10, make-13)
dobj(make-13, bread-14)
det(resources-18, the-17)
nsubjpass(found-25, resources-18)
aux(make-20, to-19)
infmod(resources-18, make-20)
dobj(make-20, cookies-21)
aux(found-25, can-22)
advmod(found-25, only-23)
auxpass(found-25, be-24)
conj_but(efficient-8, found-25)
prep_in(found-25, dungeons-27)

(ROOT
  (S
    (NP (NN wheat))
    (VP (VBZ does) (RB not)
      (VP (VB appear)
        (PP (IN in)
          (NP (DT the) (NNS statistics) (NN page)))
        (, ,)
        (SBAR (IN as)
          (S
            (NP (PRP it))
            (VP (VBZ appears)
              (PP (IN as)
                (NP
                  (NP (NNS seeds))
                  (ADJP (JJ due)
                    (PP (TO to)
                      (NP (NN wheat)))
                    (S
                      (VP (VBG being)
                        (NP
                          (NP (DT a) (JJ re-textured) (NN version))
                          (PP (IN of)
                            (NP (NNS seeds))))))
                    (SBAR
                      (WHADVP (WRB when))
                      (S
                        (VP (VBD planted))))))))))))
    (. .)))

nsubj(appear-4, wheat-1)
aux(appear-4, does-2)
neg(appear-4, not-3)
det(page-8, the-6)
nn(page-8, statistics-7)
prep_in(appear-4, page-8)
mark(appears-12, as-10)
nsubj(appears-12, it-11)
advcl(appear-4, appears-12)
prep_as(appears-12, seeds-14)
prep_due_to(seeds-14, wheat-17)
cop(version-21, being-18)
det(version-21, a-19)
amod(version-21, re-textured-20)
dep(seeds-14, version-21)
prep_of(version-21, seeds-23)
advmod(planted-25, when-24)
ccomp(seeds-14, planted-25)

(ROOT
  (S
    (NP (CD 1-4) (NN wheat))
    (VP (MD can)
      (VP (VB be)
        (VP (VBN found)
          (PP (IN in)
            (NP
              (NP (NN reward) (NNS chests))
              (PP (IN in)
                (NP (NNS dungeons))))))))
    (. .)))

num(wheat-2, 1-4-1)
nsubjpass(found-5, wheat-2)
aux(found-5, can-3)
auxpass(found-5, be-4)
nn(chests-8, reward-7)
prep_in(found-5, chests-8)
prep_in(chests-8, dungeons-10)

(ROOT
  (S
    (NP (JJ wooden) (NNS planks))
    (VP (VBP are)
      (NP
        (NP (DT a) (NN block))
        (SBAR
          (WHNP (WDT that))
          (S
            (VP (VBZ is)
              (VP (VBN crafted)
                (PP (IN by)
                  (NP
                    (NP (DT the) (NN player))
                    (PP (IN from)
                      (NP (NN wood)))))))))))
    (. .)))

amod(planks-2, wooden-1)
nsubj(block-5, planks-2)
cop(block-5, are-3)
det(block-5, a-4)
nsubjpass(crafted-8, block-5)
auxpass(crafted-8, is-7)
rcmod(block-5, crafted-8)
det(player-11, the-10)
agent(crafted-8, player-11)
prep_from(player-11, wood-13)

(ROOT
  (S
    (NP (JJ wooden) (NNS planks))
    (VP (VBP are)
      (VP (VBN used)
        (PP (IN in)
          (NP
            (NP (JJ many) (JJ crafting) (NNS recipes))
            (: :)
            (NP
              (NP (JJ wooden) (NN axe))
              (, ,)
              (NP (NN pickaxe) (, ,) (NN sword) (, ,) (NN shovel) (, ,)
                (CC and)
                (NN hoe)))
            (: ;)
            (NP (NN pressure) (NN plate))
            (, ,)
            (NP (JJ crafting) (NN table) (, ,) (NN chest) (, ,) (NN bowl) (, ,) (NN sign) (, ,) (NN door) (, ,) (NN boat) (, ,) (NN stick) (, ,) (NNS stairs) (, ,) (NN fence) (, ,) (NN jukebox) (, ,) (NN bookshelf))
            (, ,)
            (NP (NN note) (NN block))
            (, ,)
            (NP (NN bed))
            (, ,)
            (CC and)
            (NP (NN slab))))))
    (. .)))

amod(planks-2, wooden-1)
nsubjpass(used-4, planks-2)
auxpass(used-4, are-3)
amod(recipes-8, many-6)
amod(recipes-8, crafting-7)
prep_in(used-4, recipes-8)
amod(axe-11, wooden-10)
dep(recipes-8, axe-11)
nn(hoe-20, pickaxe-13)
appos(axe-11, sword-15)
conj_and(hoe-20, sword-15)
appos(axe-11, shovel-17)
conj_and(hoe-20, shovel-17)
appos(axe-11, hoe-20)
nn(plate-23, pressure-22)
dep(recipes-8, plate-23)
amod(bookshelf-46, crafting-25)
nn(bookshelf-46, table-26)
dep(bookshelf-46, chest-28)
dep(bookshelf-46, bowl-30)
dep(bookshelf-46, sign-32)
dep(bookshelf-46, door-34)
dep(bookshelf-46, boat-36)
dep(bookshelf-46, stick-38)
dep(bookshelf-46, stairs-40)
dep(bookshelf-46, fence-42)
dep(bookshelf-46, jukebox-44)
prep_in(used-4, bookshelf-46)
conj_and(recipes-8, bookshelf-46)
nn(block-49, note-48)
prep_in(used-4, block-49)
conj_and(recipes-8, block-49)
prep_in(used-4, bed-51)
conj_and(recipes-8, bed-51)
prep_in(used-4, slab-54)
conj_and(recipes-8, slab-54)

(ROOT
  (S
    (NP (NNS planks))
    (VP (MD can)
      (VP (VB be)
        (VP (VBN used)
          (PP (IN in)
            (NP (DT a) (NN furnace)
              (S
                (VP (TO to)
                  (VP (VB achieve)
                    (NP (NN burning))
                    (PP (IN for)
                      (NP
                        (NP (CD 15) (NNS seconds))
                        (, ,)
                        (SBAR
                          (WHNP (WDT which))
                          (S
                            (VP (MD can)
                              (VP (VB smelt)
                                (NP
                                  (QP (CD 1) (CD 1\))
                                  (NNS items))))))))
                    (, ,)
                    (SBAR (IN although)
                      (S
                        (NP (PRP it))
                        (VP (VBZ is)
                          (ADJP (RBR more) (JJ efficient)
                            (S
                              (VP (TO to)
                                (VP (VB turn)
                                  (NP (DT the) (NN wood) (NNS blocks))
                                  (PP (IN into)
                                    (NP (NN charcoal)))
                                  (PP (IN by)
                                    (S
                                      (VP (VBG cooking)
                                        (NP (PRP them))
                                        (PP (IN in)
                                          (NP (DT the) (NN furnace)))))))))))))))))))))
    (. .)))

nsubjpass(used-4, planks-1)
aux(used-4, can-2)
auxpass(used-4, be-3)
det(furnace-7, a-6)
prep_in(used-4, furnace-7)
aux(burning-10, to-8)
dep(burning-10, achieve-9)
infmod(furnace-7, burning-10)
num(seconds-13, 15-12)
prep_for(burning-10, seconds-13)
nsubj(smelt-17, seconds-13)
aux(smelt-17, can-16)
rcmod(seconds-13, smelt-17)
number(1\-19, 1-18)
num(items-20, 1\-19)
dobj(smelt-17, items-20)
mark(efficient-26, although-22)
nsubj(efficient-26, it-23)
cop(efficient-26, is-24)
advmod(efficient-26, more-25)
advcl(burning-10, efficient-26)
aux(turn-28, to-27)
xcomp(efficient-26, turn-28)
det(blocks-31, the-29)
nn(blocks-31, wood-30)
dobj(turn-28, blocks-31)
prep_into(turn-28, charcoal-33)
prepc_by(turn-28, cooking-35)
dobj(cooking-35, them-36)
det(furnace-39, the-38)
prep_in(cooking-35, furnace-39)

(ROOT
  (S
    (NP (NN wool))
    (VP (VBZ is)
      (ADJP (VBN harvested)
        (PP (IN by)
          (S
            (VP
              (VP (VBG right-clicking)
                (NP (DT a) (NN sheep))
                (PP (IN with)
                  (NP (NNS shears))))
              (CC or)
              (VP (VBG killing)
                (NP (PRP it))))))))
    (. .)))

nsubjpass(harvested-3, wool-1)
auxpass(harvested-3, is-2)
agent(harvested-3, right-clicking-5)
det(sheep-7, a-6)
dobj(right-clicking-5, sheep-7)
prep_with(right-clicking-5, shears-9)
agent(harvested-3, killing-11)
conj_or(right-clicking-5, killing-11)
dobj(killing-11, it-12)

(ROOT
  (S
    (NP (NN wool))
    (VP (VBZ is)
      (NP
        (NP
          (NP (DT a) (JJ key) (NN component))
          (PP (IN of)
            (NP (NNS beds)
              (CC and)
              (NNS paintings))))
        (CC and)
        (NP
          (NP (JJ suitable))
          (PP (IN for)
            (NP (NNP docks)))))
      (, ,)
      (SBAR (IN as)
        (S
          (NP (NN wool) (NNS blocks))
          (VP (MD will)
            (VP
              (VP (VB stop)
                (NP (NNS boats)))
              (CC and)
              (VP (VB absorb)
                (NP (DT some) (NN impact))
                (PP (IN from)
                  (NP
                    (NP (NNS collisions))
                    (PP (IN in)
                      (NP
                        (NP (DT a) (NN manner))
                        (ADJP (JJ similar)
                          (PP (TO to)
                            (NP (NN soul) (NN sand))))))))))))))
    (. .)))

nsubj(component-5, wool-1)
nsubj(suitable-11, wool-1)
cop(component-5, is-2)
det(component-5, a-3)
amod(component-5, key-4)
prep_of(component-5, beds-7)
prep_of(component-5, paintings-9)
conj_and(beds-7, paintings-9)
conj_and(component-5, suitable-11)
prep_for(suitable-11, docks-13)
mark(stop-19, as-15)
nn(blocks-17, wool-16)
nsubj(stop-19, blocks-17)
nsubj(absorb-22, blocks-17)
aux(stop-19, will-18)
advcl(component-5, stop-19)
dobj(stop-19, boats-20)
advcl(component-5, absorb-22)
conj_and(stop-19, absorb-22)
det(impact-24, some-23)
dobj(absorb-22, impact-24)
prep_from(absorb-22, collisions-26)
det(manner-29, a-28)
prep_in(collisions-26, manner-29)
amod(manner-29, similar-30)
nn(sand-33, soul-32)
prep_to(similar-30, sand-33)

(ROOT
  (S
    (NP (NN wool))
    (VP (VBZ is)
      (ADVP (RB commonly))
      (VP (VBN used)
        (PP (IN as)
          (NP (NN decoration)))
        (, ,)
        (PP (IN as)
          (NP
            (NP (NN carpeting))
            (PP (IN in)
              (NP
                (NP (NNS houses))
                (CC or)
                (NP (JJ large) (`` `) (NNS beds) ('' '))))))))
    (. .)))

nsubjpass(used-4, wool-1)
auxpass(used-4, is-2)
advmod(used-4, commonly-3)
prep_as(used-4, decoration-6)
prep_as(used-4, carpeting-9)
prep_in(carpeting-9, houses-11)
amod(beds-15, large-13)
prep_in(carpeting-9, beds-15)
conj_or(houses-11, beds-15)

(ROOT
  (S
    (S
      (ADVP (RB aside))
      (NP (DT the) (NN sheep)))
    (, ,)
    (NP (JJ black) (NN wool) (NNS blocks))
    (VP (MD can)
      (ADVP (RB also))
      (VP (VB be)
        (VP (VBN found)
          (ADVP (RB naturally))
          (PP (IN in)
            (NP (NN npc) (NNS villages)))
          (SBAR
            (WHADVP (WRB where))
            (S
              (NP (PRP they))
              (VP (VBP lie)
                (PP (IN on)
                  (NP
                    (NP (NN top))
                    (PP (IN of)
                      (NP (DT a) (NN fence) (NN post)))
                    (, ,)
                    (VP (VBN surrounded)
                      (PP (IN by)
                        (NP (CD 4) (NNS torches))))))))))))
    (. .)))

advmod(sheep-3, aside-1)
det(sheep-3, the-2)
ccomp(found-11, sheep-3)
amod(blocks-7, black-5)
nn(blocks-7, wool-6)
nsubjpass(found-11, blocks-7)
aux(found-11, can-8)
advmod(found-11, also-9)
auxpass(found-11, be-10)
advmod(found-11, naturally-12)
nn(villages-15, npc-14)
prep_in(found-11, villages-15)
advmod(lie-18, where-16)
nsubj(lie-18, they-17)
advcl(found-11, lie-18)
det(post-24, a-22)
nn(post-24, fence-23)
prep_on_top_of(lie-18, post-24)
partmod(lie-18, surrounded-26)
num(torches-29, 4-28)
agent(surrounded-26, torches-29)

(ROOT
  (S
    (NP (NN wool))
    (VP (MD can)
      (VP (VB be)
        (VP (VBN crafted)
          (PP (IN from)
            (NP (NN string)))
          (SBAR (IN if)
            (S
              (VP (VBN required)))))))
    (. .)))

nsubjpass(crafted-4, wool-1)
aux(crafted-4, can-2)
auxpass(crafted-4, be-3)
prep_from(crafted-4, string-6)
mark(required-8, if-7)
advcl(crafted-4, required-8)

(ROOT
  (S (CC but)
    (PP (IN with)
      (NP (DT the) (NN adventure) (NN update)))
    (, ,)
    (NP (NN string))
    (VP (MD can)
      (VP (VB be)
        (VP (VBN collected)
          (ADVP (RB very) (RB easily))
          (PP (IN for)
            (NP (NNS bows)
              (CC and)
              (NNS beds)))
          (PP (IN for)
            (NP (NN use) (NN underground))))))
    (. .)))

cc(collected-10, but-1)
det(update-5, the-3)
nn(update-5, adventure-4)
prep_with(collected-10, update-5)
nsubjpass(collected-10, string-7)
aux(collected-10, can-8)
auxpass(collected-10, be-9)
advmod(easily-12, very-11)
advmod(collected-10, easily-12)
prep_for(collected-10, bows-14)
prep_for(collected-10, beds-16)
conj_and(bows-14, beds-16)
nn(underground-19, use-18)
prep_for(collected-10, underground-19)

(ROOT
  (S
    (PP (IN With)
      (NP
        (NP (DT the) (NN exception))
        (PP (IN of)
          (NP (NN sand)))))
    (, ,)
    (S
      (VP
        (NP
          (NP (JJ red)
            (ADJP (NN sand) (, ,) (NN gravel) (, ,))
            (NNS anvils))
          (, ,)
          (NP (NN dragon) (NNS eggs))
          (CC and)
          (, ,)
          (PP (IN in)
            (NP (NNP Pocket) (NNP Edition) (, ,) (NNP Snow))))
        (PRN (-LRB- -LRB-) (VB cover) (-RRB- -RRB-))))
    (, ,)
    (NP (DT all) (NNS blocks))
    (VP (VBP ignore)
      (NP (NN gravity)))
    (. .)))

det(exception-3, the-2)
prep_with(ignore-29, exception-3)
prep_of(exception-3, sand-5)
amod(anvils-12, red-7)
amod(anvils-12, sand-8)
dep(sand-8, gravel-10)
ccomp(ignore-29, anvils-12)
nn(eggs-15, dragon-14)
conj_and(anvils-12, eggs-15)
ccomp(ignore-29, eggs-15)
nn(Snow-22, Pocket-19)
nn(Snow-22, Edition-20)
prep_in(anvils-12, Snow-22)
dep(-LRB--23, cover-24)
det(blocks-28, all-27)
nsubj(ignore-29, blocks-28)
dobj(ignore-29, gravity-30)

(ROOT
  (S
    (NP (NNPS Minerals))
    (VP (VBP are)
      (VP (VBN used)
        (PP (IN for)
          (NP
            (NP (NNS tools))
            (, ,)
            (NP
              (NP (NN fuel))
              (PP (IN for)
                (NP (DT a) (NN furnace))))
            (, ,)))
        (PP (VBG creating)
          (NP
            (NP (JJ other) (NNS blocks))
            (CC or)
            (NP
              (NP (NNS items))
              (, ,)
              (NP (NN trading))
              (, ,)
              (NP (NNS dyes))
              (, ,)
              (CC and)
              (NP (NN work)))))
        (PP (IN in)
          (NP (JJ redstone) (NNS contraptions)))))
    (. .)))

nsubjpass(used-3, Minerals-1)
auxpass(used-3, are-2)
prep_for(used-3, tools-5)
appos(tools-5, fuel-7)
det(furnace-10, a-9)
prep_for(fuel-7, furnace-10)
amod(blocks-14, other-13)
prep_creating(used-3, blocks-14)
prep_creating(used-3, items-16)
conj_or(blocks-14, items-16)
conj_or(blocks-14, trading-18)
conj_and(items-16, trading-18)
conj_or(blocks-14, dyes-20)
conj_and(items-16, dyes-20)
conj_or(blocks-14, work-23)
conj_and(items-16, work-23)
amod(contraptions-26, redstone-25)
prep_in(used-3, contraptions-26)

(ROOT
  (S
    (S
      (NP (DT These))
      (VP (VBP are)
        (VP (VBN obtained)
          (PP (IN by)
            (S
              (VP (VBG picking)
                (PRT (RP up))
                (NP
                  (NP (DT the) (NN item))
                  (SBAR
                    (WHNP (WDT that))
                    (S
                      (VP (VBZ drops)
                        (PP (IN after)
                          (S
                            (VP (VBG mining)
                              (NP (DT an) (NN ore))
                              (PP (IN with)
                                (NP
                                  (NP (DT a) (NN pickaxe))
                                  (PP (IN of)
                                    (NP (DT the) (JJ right) (NN material))))))))))))))))))
    (, ,)
    (CC or)
    (S
      (VP (VBG taking)
        (NP
          (NP (DT the) (NN item))
          (SBAR
            (WHNP (WDT that))
            (S
              (VP (VBZ gets)
                (VP (VBN created)
                  (PP (IN after)
                    (S
                      (VP (VBG smelting)
                        (NP (DT an) (NN ore))
                        (PP (IN by)
                          (S
                            (VP (VBG dragging)
                              (NP (DT the) (VBN finished) (NN product))
                              (PP (IN into)
                                (NP (PRP$ your) (NN inventory))))))))))))))))
    (. .)))

nsubjpass(obtained-3, These-1)
nsubjpass(taking-24, These-1)
auxpass(obtained-3, are-2)
agent(obtained-3, picking-5)
prt(picking-5, up-6)
det(item-8, the-7)
dobj(picking-5, item-8)
nsubj(drops-10, item-8)
rcmod(item-8, drops-10)
prepc_after(drops-10, mining-12)
det(ore-14, an-13)
dobj(mining-12, ore-14)
det(pickaxe-17, a-16)
prep_with(mining-12, pickaxe-17)
det(material-21, the-19)
amod(material-21, right-20)
prep_of(pickaxe-17, material-21)
conj_or(obtained-3, taking-24)
det(item-26, the-25)
dobj(taking-24, item-26)
nsubjpass(created-29, item-26)
auxpass(created-29, gets-28)
rcmod(item-26, created-29)
prepc_after(created-29, smelting-31)
det(ore-33, an-32)
dobj(smelting-31, ore-33)
prepc_by(smelting-31, dragging-35)
det(product-38, the-36)
amod(product-38, finished-37)
dobj(dragging-35, product-38)
poss(inventory-41, your-40)
prep_into(dragging-35, inventory-41)

(ROOT
  (S
    (NP
      (NP (NNS Plants))
      (PRN (-LRB- -LRB-)
        (PP (IN in)
          (NP
            (NP
              (NP (JJ non-block) (NN form))
              (, ,)
              (NP (NNS examples))
              (: :)
              (NP (NNS seeds))
              (, ,)
              (CC and)
              (NP (NN sugarcane)))
            (PRN (-LRB- -LRB-)
              (NP (NN item) (NN version))
              (-RRB- -RRB-))))
        (-RRB- -RRB-)))
    (VP (VBP are)
      (VP (VBN used)
        (PP (IN for)
          (S
            (VP (VBG creating)
              (NP (JJ block-type) (NNS plants))
              (SBAR
                (WHADVP (WRB when))
                (S
                  (VP (VBN placed)
                    (PP (IN on)
                      (NP
                        (NP (JJ farmland))
                        (, ,)
                        (NP (NN dirt))
                        (, ,)
                        (NP (NN sand))
                        (, ,)
                        (CC and)
                        (NP
                          (NP (DT the) (NN side))
                          (PP (IN of)
                            (NP (VBZ logs))))))
                    (, ,)
                    (ADVP (RB so))))))))
        (SBAR (IN that)
          (S
            (NP (PRP they))
            (VP (MD can)
              (VP
                (VP (VB grow))
                (, ,)
                (CC and)
                (VP (VB give)
                  (NP
                    (NP (PRP themselves))
                    (CC or)
                    (NP (JJ other) (NNS items)))
                  (PP (IN in)
                    (NP
                      (NP (DT the) (NN game))
                      (SBAR
                        (WHNP (WRB when) (RB fully))
                        (S
                          (VP
                            (VP (VBN grown))
                            (CC and)
                            (VP (VBN broken))))))))
                (, ,)
                (CC and)
                (VP (VB be)
                  (VP (VBN manufactured)
                    (CC or)
                    (VBN consumed)))))))))
    (. .)))

nsubjpass(used-19, Plants-1)
dep(Plants-1, in-3)
amod(form-5, non-block-4)
pobj(in-3, form-5)
pobj(in-3, examples-7)
conj_and(form-5, examples-7)
dep(form-5, seeds-9)
pobj(in-3, sugarcane-12)
conj_and(form-5, sugarcane-12)
nn(version-15, item-14)
appos(form-5, version-15)
auxpass(used-19, are-18)
prepc_for(used-19, creating-21)
amod(plants-23, block-type-22)
dobj(creating-21, plants-23)
advmod(placed-25, when-24)
advcl(creating-21, placed-25)
prep_on(placed-25, farmland-27)
prep_on(placed-25, dirt-29)
conj_and(farmland-27, dirt-29)
prep_on(placed-25, sand-31)
conj_and(farmland-27, sand-31)
det(side-35, the-34)
prep_on(placed-25, side-35)
conj_and(farmland-27, side-35)
prep_of(side-35, logs-37)
advmod(placed-25, so-39)
complm(grow-43, that-40)
nsubjpass(grow-43, they-41)
nsubj(give-46, they-41)
nsubjpass(manufactured-62, they-41)
aux(grow-43, can-42)
ccomp(used-19, grow-43)
ccomp(used-19, give-46)
conj_and(grow-43, give-46)
dobj(give-46, themselves-47)
amod(items-50, other-49)
dobj(give-46, items-50)
conj_or(themselves-47, items-50)
det(game-53, the-52)
prep_in(give-46, game-53)
dep(fully-55, when-54)
advmod(grown-56, fully-55)
nsubj(grown-56, fully-55)
nsubj(broken-58, fully-55)
rcmod(game-53, grown-56)
rcmod(game-53, broken-58)
conj_and(grown-56, broken-58)
auxpass(manufactured-62, be-61)
ccomp(used-19, manufactured-62)
conj_and(grow-43, manufactured-62)
conj_and(grow-43, consumed-64)
conj_or(manufactured-62, consumed-64)

(ROOT
  (S
    (S
      (VP (VBG Crafting)
        (SBAR
          (S
            (NP (NNPS Ingredients))
            (VP (VBP are)
              (NP
                (NP (NNS ingredients))
                (SBAR
                  (WHNP (WDT that))
                  (S
                    (VP (VBP have)
                      (NP
                        (NP
                          (NP (DT no) (JJ specific) (NN category))
                          (CC and)
                          (NP (DT no) (JJ other) (JJ non-decoration) (NN purpose)))
                        (SBAR
                          (WHNP (IN than))
                          (S
                            (VP (TO to)
                              (VP (VB create)
                                (NP (JJ other) (NNS blocks)
                                  (CC or)
                                  (NNS items))
                                (PP (IN by)
                                  (NP (VBG crafting)
                                    (CC or)
                                    (VBG smelting)))))))))))))))))
    (, ,)
    (NP (NNS examples))
    (VP (VBP are)
      (NP
        (NP (NN flint))
        (, ,)
        (NP (VBZ bowls))
        (, ,)
        (NP (NNS sticks))
        (, ,)
        (NP (NN paper))
        (, ,)
        (NP (NN clay))
        (, ,)
        (NP (NN brick))
        (, ,)
        (NP (NN nether) (NN brick))
        (, ,)
        (CC and)
        (NP (NN nether) (NN quartz))))
    (. .)))

dep(flint-29, Crafting-1)
nsubj(ingredients-4, Ingredients-2)
cop(ingredients-4, are-3)
ccomp(Crafting-1, ingredients-4)
nsubj(have-6, ingredients-4)
rcmod(ingredients-4, have-6)
det(category-9, no-7)
amod(category-9, specific-8)
dobj(have-6, category-9)
det(purpose-14, no-11)
amod(purpose-14, other-12)
amod(purpose-14, non-decoration-13)
dobj(have-6, purpose-14)
conj_and(category-9, purpose-14)
nsubj(create-17, than-15)
aux(create-17, to-16)
infmod(category-9, create-17)
rcmod(category-9, create-17)
amod(blocks-19, other-18)
dobj(create-17, blocks-19)
dobj(create-17, items-21)
conj_or(blocks-19, items-21)
prep_by(create-17, crafting-23)
prep_by(create-17, smelting-25)
conj_or(crafting-23, smelting-25)
nsubj(flint-29, examples-27)
nsubj(bowls-31, examples-27)
cop(flint-29, are-28)
conj_and(flint-29, bowls-31)
conj_and(flint-29, sticks-33)
conj_and(flint-29, paper-35)
conj_and(flint-29, clay-37)
conj_and(flint-29, brick-39)
nn(brick-42, nether-41)
conj_and(flint-29, brick-42)
nn(quartz-46, nether-45)
conj_and(flint-29, quartz-46)

(ROOT
  (S
    (NP (PRP They))
    (VP (MD can)
      (VP (VB be)
        (VP (VBN crafted)
          (PP (IN from)
            (NP
              (NP (NN wood))
              (, ,)
              (NP (NN cobblestone))
              (, ,)
              (NP (NN iron))
              (, ,)
              (NP (NN gold))
              (CC and)
              (NP (NN diamond)))))))
    (. .)))

nsubjpass(crafted-4, They-1)
aux(crafted-4, can-2)
auxpass(crafted-4, be-3)
prep_from(crafted-4, wood-6)
prep_from(crafted-4, cobblestone-8)
conj_and(wood-6, cobblestone-8)
prep_from(crafted-4, iron-10)
conj_and(wood-6, iron-10)
prep_from(crafted-4, gold-12)
conj_and(wood-6, gold-12)
prep_from(crafted-4, diamond-14)
conj_and(wood-6, diamond-14)

(ROOT
  (S
    (NP (PRP They))
    (VP (MD can)
      (VP (VB be)
        (VP (VBN crafted)
          (PP (IN from)
            (NP
              (NP (NN wood))
              (, ,)
              (NP (NN cobblestone))
              (, ,)
              (NP (NN iron))
              (, ,)
              (NP (NN gold))
              (CC and)
              (NP (NN diamond)))))))
    (. .)))

nsubjpass(crafted-4, They-1)
aux(crafted-4, can-2)
auxpass(crafted-4, be-3)
prep_from(crafted-4, wood-6)
prep_from(crafted-4, cobblestone-8)
conj_and(wood-6, cobblestone-8)
prep_from(crafted-4, iron-10)
conj_and(wood-6, iron-10)
prep_from(crafted-4, gold-12)
conj_and(wood-6, gold-12)
prep_from(crafted-4, diamond-14)
conj_and(wood-6, diamond-14)

(ROOT
  (S
    (NP (PRP They))
    (VP (MD can)
      (VP (VB be)
        (VP (VBN crafted)
          (PP (IN from)
            (NP
              (NP (NN wood))
              (, ,)
              (NP (NN cobblestone))
              (, ,)
              (NP (NN iron))
              (, ,)
              (NP (NN gold))
              (CC and)
              (NP (NN diamond)))))))
    (. .)))

nsubjpass(crafted-4, They-1)
aux(crafted-4, can-2)
auxpass(crafted-4, be-3)
prep_from(crafted-4, wood-6)
prep_from(crafted-4, cobblestone-8)
conj_and(wood-6, cobblestone-8)
prep_from(crafted-4, iron-10)
conj_and(wood-6, iron-10)
prep_from(crafted-4, gold-12)
conj_and(wood-6, gold-12)
prep_from(crafted-4, diamond-14)
conj_and(wood-6, diamond-14)

(ROOT
  (S
    (NP (PRP They))
    (VP (MD can)
      (VP (VB be)
        (VP (VBN crafted)
          (PP (IN from)
            (NP
              (NP (NN wood))
              (, ,)
              (NP (NN stone))
              (, ,)
              (NP (NN iron))
              (, ,)
              (NP (NN gold))
              (CC and)
              (NP (NN diamond)))))))
    (. .)))

nsubjpass(crafted-4, They-1)
aux(crafted-4, can-2)
auxpass(crafted-4, be-3)
prep_from(crafted-4, wood-6)
prep_from(crafted-4, stone-8)
conj_and(wood-6, stone-8)
prep_from(crafted-4, iron-10)
conj_and(wood-6, iron-10)
prep_from(crafted-4, gold-12)
conj_and(wood-6, gold-12)
prep_from(crafted-4, diamond-14)
conj_and(wood-6, diamond-14)

(ROOT
  (S
    (S
      (NP (NNS Shears))
      (VP (VBP allow)
        (NP (DT the) (NN player)
          (S
            (VP (TO to)
              (VP (VB make)
                (NP (NN sheep) (NN drop) (NN wool))))))))
    (PRN (, ,)
      (SINV
        (VP (VBZ mooshrooms))
        (NP
          (NP (NN drop) (JJ red) (NNS mushrooms))
          (, ,)
          (NP
            (NP (NNS cobwebs))
            (NP (NN drop) (NN string)))))
      (, ,))
    (IN with)
    (S
      (NP (DT a) (NNP Silk) (NNP Touch))
      (VP
        (VP (VB enchantment)
          (NP (DT the) (JJ actual) (NN cobweb))
          (NP (PRP itself)))
        (, ,)
        (CC and)
        (VP (VB make)
          (S
            (NP
              (NP (NNS varieties))
              (PP (IN of)
                (NP
                  (NP (NN grass))
                  (, ,)
                  (NP (NNS leaves))
                  (, ,)
                  (NP (NNS vines))
                  (CC and)
                  (NP (JJ dead) (NNS bushes)))))
            (VP (VB drop)
              (NP (PRP themselves)))))))
    (. .)))

nsubj(allow-2, Shears-1)
det(player-4, the-3)
dobj(allow-2, player-4)
aux(make-6, to-5)
infmod(player-4, make-6)
nn(wool-9, sheep-7)
nn(wool-9, drop-8)
dobj(make-6, wool-9)
dep(allow-2, mooshrooms-11)
nn(mushrooms-14, drop-12)
amod(mushrooms-14, red-13)
nsubj(mooshrooms-11, mushrooms-14)
appos(mushrooms-14, cobwebs-16)
nn(string-18, drop-17)
dep(cobwebs-16, string-18)
dep(allow-2, with-20)
det(Touch-23, a-21)
nn(Touch-23, Silk-22)
nsubj(enchantment-24, Touch-23)
nsubj(make-31, Touch-23)
ccomp(allow-2, enchantment-24)
det(cobweb-27, the-25)
amod(cobweb-27, actual-26)
iobj(enchantment-24, cobweb-27)
dobj(enchantment-24, itself-28)
dobj(make-31, itself-28)
ccomp(allow-2, make-31)
conj_and(enchantment-24, make-31)
nsubj(drop-42, varieties-32)
prep_of(varieties-32, grass-34)
prep_of(varieties-32, leaves-36)
conj_and(grass-34, leaves-36)
prep_of(varieties-32, vines-38)
conj_and(grass-34, vines-38)
amod(bushes-41, dead-40)
prep_of(varieties-32, bushes-41)
conj_and(grass-34, bushes-41)
ccomp(make-31, drop-42)
dobj(drop-42, themselves-43)

(ROOT
  (S
    (NP (JJ Fishing) (NNS rods))
    (VP (VBP allow)
      (S
        (NP (DT the) (NN player))
        (VP (TO to)
          (VP
            (VP (VB go)
              (NP (NN fishing))
              (S
                (VP (TO to)
                  (VP (VB catch)
                    (NP
                      (NP (JJ several) (NNS types))
                      (PP (IN of)
                        (NP
                          (NP (NN fish))
                          (, ,)
                          (NP (NN treasure))
                          (, ,))))))))
            (CC and)
            (VP
              (VP (VB trash))
              (, ,)
              (CONJP (RB as) (RB well) (IN as))
              (VP (VB pull)
                (NP (NNS mobs)
                  (CC or)
                  (NNS players))
                (ADVP (RBR closer))))))))
    (. .)))

amod(rods-2, Fishing-1)
nsubj(allow-3, rods-2)
det(player-5, the-4)
nsubj(go-7, player-5)
nsubj(trash-19, player-5)
aux(go-7, to-6)
xcomp(allow-3, go-7)
dobj(go-7, fishing-8)
dobj(trash-19, fishing-8)
aux(catch-10, to-9)
xcomp(go-7, catch-10)
amod(types-12, several-11)
dobj(catch-10, types-12)
prep_of(types-12, fish-14)
appos(fish-14, treasure-16)
xcomp(allow-3, trash-19)
conj_and(go-7, trash-19)
conj_and(go-7, pull-24)
conj_and(trash-19, pull-24)
dobj(pull-24, mobs-25)
dobj(pull-24, players-27)
conj_or(mobs-25, players-27)
advmod(pull-24, closer-28)

(ROOT
  (S
    (NP (DT These))
    (VP (VBP include)
      (NP
        (NP (NN wood) (NNS planks))
        (, ,)
        (NP (NNS sticks))
        (, ,)
        (NP (VBG crafting) (NNS tables))
        (, ,)
        (CC and)
        (NP
          (ADJP (RBS most) (JJ shapeless))
          (NNS recipes))))
    (. .)))

nsubj(include-2, These-1)
nn(planks-4, wood-3)
dobj(include-2, planks-4)
dobj(include-2, sticks-6)
conj_and(planks-4, sticks-6)
amod(tables-9, crafting-8)
dobj(include-2, tables-9)
conj_and(planks-4, tables-9)
advmod(shapeless-13, most-12)
amod(recipes-14, shapeless-13)
dobj(include-2, recipes-14)
conj_and(planks-4, recipes-14)

(ROOT
  (S
    (ADVP (RB However))
    (, ,)
    (NP (NN smelting))
    (VP (VBZ utilizes)
      (NP
        (NP (NN furnace) (NNS blocks))
        (, ,)
        (SBAR
          (WHNP (WDT which))
          (S
            (VP (VBP have)
              (NP
                (NP (DT a) (JJ unique) (NN interface))
                (: :)
                (NP
                  (NP (CD one)
                    (ADJP (`` ``) (NN input) ('' ''))
                    (NN field))
                  (PP (IN for)
                    (NP
                      (NP
                        (NP (DT the) (NN object))
                        (SBAR
                          (WHNP (WDT that))
                          (S
                            (VP (MD will)
                              (VP (VB be)
                                (VP (VBN heated)))))))
                      (, ,)
                      (NP
                        (NP (CD one) (NN field))
                        (PP (IN for)
                          (NP (DT the) (NN fuel))))
                      (, ,)
                      (CC and)
                      (NP
                        (NP (CD one)
                          (ADJP (`` ``) (NN output) ('' ''))
                          (NN field))
                        (PP (IN for)
                          (NP (DT the) (JJ final) (JJ smelted) (NN product)))))))))))))
    (. .)))

advmod(utilizes-4, However-1)
nsubj(utilizes-4, smelting-3)
nn(blocks-6, furnace-5)
dobj(utilizes-4, blocks-6)
nsubj(have-9, blocks-6)
rcmod(blocks-6, have-9)
det(interface-12, a-10)
amod(interface-12, unique-11)
dobj(have-9, interface-12)
num(field-18, one-14)
amod(field-18, input-16)
dep(interface-12, field-18)
det(object-21, the-20)
prep_for(field-18, object-21)
nsubjpass(heated-25, object-21)
aux(heated-25, will-23)
auxpass(heated-25, be-24)
rcmod(object-21, heated-25)
num(field-28, one-27)
prep_for(field-18, field-28)
conj_and(object-21, field-28)
det(fuel-31, the-30)
prep_for(field-28, fuel-31)
num(field-38, one-34)
amod(field-38, output-36)
prep_for(field-18, field-38)
conj_and(object-21, field-38)
det(product-43, the-40)
amod(product-43, final-41)
amod(product-43, smelted-42)
prep_for(field-38, product-43)

(ROOT
  (S
    (PP (TO To)
      (NP (VBN smelt) (NN something)))
    (, ,)
    (NP
      (NP (DT an) (NN input) (NN material))
      (CC and)
      (NP (DT a) (NN fuel)))
    (VP (MD must)
      (VP (VB be)
        (VP (VBN loaded)
          (PP (IN into)
            (NP (DT the) (NN furnace))))))
    (. .)))

amod(something-3, smelt-2)
prep_to(loaded-13, something-3)
det(material-7, an-5)
nn(material-7, input-6)
nsubjpass(loaded-13, material-7)
det(fuel-10, a-9)
conj_and(material-7, fuel-10)
nsubjpass(loaded-13, fuel-10)
aux(loaded-13, must-11)
auxpass(loaded-13, be-12)
det(furnace-16, the-15)
prep_into(loaded-13, furnace-16)

(ROOT
  (S
    (SBAR
      (WHADVP (WRB When))
      (S
        (NP (DT the) (NN furnace))
        (VP (VBZ begins)
          (S
            (VP (TO to)
              (VP (VBN smelt)))))))
    (, ,)
    (S
      (NP (PRP it))
      (VP (MD will)
        (VP (VB consume)
          (NP
            (NP (CD one) (NN piece))
            (PP (IN of)
              (NP (NN fuel)))))))
    (CC and)
    (S
      (NP (DT the) (NN fire) (NN gauge))
      (VP (MD will)
        (VP (VB fill)
          (PRT (RP up)))))
    (. .)))

advmod(begins-4, When-1)
det(furnace-3, the-2)
nsubj(begins-4, furnace-3)
xsubj(smelt-6, furnace-3)
dep(consume-10, begins-4)
aux(smelt-6, to-5)
xcomp(begins-4, smelt-6)
nsubj(consume-10, it-8)
aux(consume-10, will-9)
num(piece-12, one-11)
dobj(consume-10, piece-12)
dobj(fill-20, piece-12)
prep_of(piece-12, fuel-14)
det(gauge-18, the-16)
nn(gauge-18, fire-17)
nsubj(fill-20, gauge-18)
aux(fill-20, will-19)
conj_and(consume-10, fill-20)
prt(fill-20, up-21)

(ROOT
  (S
    (SBAR (IN If)
      (S
        (NP (EX there))
        (VP (VBZ is)
          (NP
            (NP (DT no) (JJR more) (NN fuel))
            (VP (VBN left))))))
    (, ,)
    (S
      (NP (DT the) (NN furnace))
      (VP (MD will)
        (VP (VB be)
          (VP (VBN interrupted)))))
    (CC and)
    (S
      (NP (DT the) (NN item))
      (VP (MD will)
        (VP (VB be)
          (VP (VBN uncooked)))))
    (. .)))

mark(is-3, If-1)
expl(is-3, there-2)
advcl(interrupted-13, is-3)
det(fuel-6, no-4)
amod(fuel-6, more-5)
nsubj(is-3, fuel-6)
partmod(fuel-6, left-7)
det(furnace-10, the-9)
nsubjpass(interrupted-13, furnace-10)
aux(interrupted-13, will-11)
auxpass(interrupted-13, be-12)
det(item-16, the-15)
nsubjpass(uncooked-19, item-16)
aux(uncooked-19, will-17)
auxpass(uncooked-19, be-18)
conj_and(interrupted-13, uncooked-19)

(ROOT
  (S
    (SBAR (IN If)
      (S
        (NP (DT the) (NN furnace))
        (VP (VBZ runs)
          (PRT (RP out))
          (PP (IN of)
            (NP (NN fuel)))
          (SBAR (IN before)
            (S
              (NP (DT the) (NN arrow))
              (VP (VBZ is)
                (VP (VBN filled)
                  (PRT (RP up)))))))))
    (, ,)
    (S
      (ADVP (RB then))
      (NP (DT the) (NN input))
      (VP (MD will) (RB not)
        (VP (VB be)
          (VP (VBN smelted)))))
    (CC and)
    (S
      (NP (DT the) (NN process))
      (VP (MD will)
        (VP (VB rewind)
          (PP (IN at)
            (NP (JJ 2x) (NN speed))))))
    (. .)))

mark(runs-4, If-1)
det(furnace-3, the-2)
nsubj(runs-4, furnace-3)
advcl(smelted-21, runs-4)
prep_out_of(runs-4, fuel-7)
mark(filled-12, before-8)
det(arrow-10, the-9)
nsubjpass(filled-12, arrow-10)
auxpass(filled-12, is-11)
advcl(runs-4, filled-12)
prt(filled-12, up-13)
advmod(smelted-21, then-15)
det(input-17, the-16)
nsubjpass(smelted-21, input-17)
aux(smelted-21, will-18)
neg(smelted-21, not-19)
auxpass(smelted-21, be-20)
det(process-24, the-23)
nsubj(rewind-26, process-24)
aux(rewind-26, will-25)
conj_and(smelted-21, rewind-26)
amod(speed-29, 2x-28)
prep_at(rewind-26, speed-29)

(ROOT
  (S
    (SBAR (IN If)
      (S
        (NP (DT the) (NN player))
        (VP (VBZ sleeps)
          (PP (IN in)
            (NP (DT a) (NN bed)))
          (SBAR (IN while)
            (S
              (NP (DT a) (NN furnace))
              (VP (VBZ is)
                (VP (VBG smelting))))))))
    (, ,)
    (NP
      (NP (DT the) (NN furnace) (POS 's))
      (NN progress))
    (VP (MD will)
      (VP (VB be)
        (NP (DT the) (JJ same))
        (SBAR (RB as) (IN if)
          (S
            (S
              (NP (DT the) (NN bed))
              (VP (VBD had) (RB not)
                (VP (VBN been)
                  (VP (VBN used)))))
            (CC and)
            (S
              (NP (DT no) (JJ additional) (NN time))
              (VP (VBD had)
                (VP (VBN passed))))))))
    (. .)))

mark(sleeps-4, If-1)
det(player-3, the-2)
nsubj(sleeps-4, player-3)
advcl(same-21, sleeps-4)
det(bed-7, a-6)
prep_in(sleeps-4, bed-7)
mark(smelting-12, while-8)
det(furnace-10, a-9)
nsubj(smelting-12, furnace-10)
aux(smelting-12, is-11)
advcl(sleeps-4, smelting-12)
det(furnace-15, the-14)
poss(progress-17, furnace-15)
nsubj(same-21, progress-17)
aux(same-21, will-18)
cop(same-21, be-19)
det(same-21, the-20)
advmod(used-29, as-22)
dep(used-29, if-23)
det(bed-25, the-24)
nsubjpass(used-29, bed-25)
aux(used-29, had-26)
neg(used-29, not-27)
auxpass(used-29, been-28)
dep(same-21, used-29)
det(time-33, no-31)
amod(time-33, additional-32)
nsubj(passed-35, time-33)
aux(passed-35, had-34)
dep(same-21, passed-35)
conj_and(used-29, passed-35)

(ROOT
  (S
    (S
      (PP (IN For)
        (NP (JJR larger) (NNS jobs)))
      (, ,)
      (NP
        (NP (DT a) (JJ single) (NN lava) (NN bucket))
        (CC or)
        (NP
          (NP (DT a) (NN block))
          (PP (IN of)
            (NP (NN coal)))))
      (VP (MD can)
        (VP (VB burn)
          (NP (JJR more) (NNS items))
          (SBAR (IN than)
            (S
              (VP (MD will)
                (VP (VB fit)
                  (PP (IN in)
                    (NP (DT the) (NN furnace))))))))))
    (: --)
    (S
      (S
        (NP (DT both) (NN input)
          (CC and)
          (NN output))
        (VP (VBP are)
          (VP (VBN limited)
            (S
              (VP (TO to)
                (VP
                  (ADVP (DT a))
                  (VB stack)
                  (PP (IN of)
                    (NP (CD 64)))))))))
      (, ,)
      (CC but)
      (S
        (NP
          (NP (DT a) (NN block))
          (PP (IN of)
            (NP (NN coal))))
        (VP (VBZ burns)
          (NP (CD 80)))))
    (, ,)
    (CC and)
    (S
      (NP (NN lava))
      (VP (MD can)
        (VP (VB burn)
          (NP (CD 100)))))
    (. .)))

amod(jobs-3, larger-2)
prep_for(burn-15, jobs-3)
det(bucket-8, a-5)
amod(bucket-8, single-6)
nn(bucket-8, lava-7)
nsubj(burn-15, bucket-8)
det(block-11, a-10)
conj_or(bucket-8, block-11)
nsubj(burn-15, block-11)
prep_of(block-11, coal-13)
aux(burn-15, can-14)
amod(items-17, more-16)
dobj(burn-15, items-17)
mark(fit-20, than-18)
aux(fit-20, will-19)
advcl(burn-15, fit-20)
det(furnace-23, the-22)
prep_in(fit-20, furnace-23)
preconj(input-26, both-25)
nsubjpass(limited-30, input-26)
xsubj(stack-33, input-26)
conj_and(input-26, output-28)
nsubjpass(limited-30, output-28)
xsubj(stack-33, output-28)
auxpass(limited-30, are-29)
parataxis(burn-15, limited-30)
aux(stack-33, to-31)
advmod(stack-33, a-32)
xcomp(limited-30, stack-33)
prep_of(stack-33, 64-35)
det(block-39, a-38)
nsubj(burns-42, block-39)
prep_of(block-39, coal-41)
parataxis(burn-15, burns-42)
conj_but(limited-30, burns-42)
dobj(burns-42, 80-43)
nsubj(burn-48, lava-46)
aux(burn-48, can-47)
conj_and(burn-15, burn-48)
dobj(burn-48, 100-49)

(ROOT
  (S
    (NP
      (NP (NN Burning) (NN wood))
      (PP (IN with)
        (NP (NN wood) (NNS planks)))
      (S
        (VP (TO to)
          (VP (VB make)
            (ADJP (JJ charcoal))))))
    (VP (VBZ is)
      (ADVP (IN over)
        (NP (CD 5) (NNS times)))
      (ADJP (RBR more) (JJ efficient)
        (PP (IN than)
          (S
            (VP (VBG using)
              (NP
                (NP
                  (NP (DT the) (NN wood))
                  (NP (PRP itself)))
                (PP (IN as)
                  (NP (NN fuel)))))))))
    (. .)))

nn(wood-2, Burning-1)
nsubj(efficient-14, wood-2)
nn(planks-5, wood-4)
prep_with(wood-2, planks-5)
aux(make-7, to-6)
infmod(wood-2, make-7)
acomp(make-7, charcoal-8)
cop(efficient-14, is-9)
advmod(efficient-14, over-10)
num(times-12, 5-11)
dep(over-10, times-12)
advmod(efficient-14, more-13)
prepc_than(efficient-14, using-16)
det(wood-18, the-17)
dobj(using-16, wood-18)
dep(wood-18, itself-19)
prep_as(wood-18, fuel-21)

(ROOT
  (S
    (ADVP (RB Currently))
    (, ,)
    (PP (IN in)
      (NP
        (NP
          (NP (NNP Pocket) (NNP Edition))
          (, ,)
          (SBAR
            (WHADVP (WRB when))
            (S
              (NP (DT the) (NN furnace))
              (VP (VBZ runs)
                (PRT (RP out))))))
        (PP (IN of)
          (NP (NN fuel)))))
    (, ,)
    (NP (PRP it))
    (VP
      (VP (MD will) (RB not)
        (VP (VB rewind)
          (ADVP (RB backwards))
          (PP (IN at)
            (NP (JJ x2) (NN speed)))))
      (, ,)
      (CC and)
      (VP (MD will) (RB simply)
        (VP (VB disappear)
          (ADVP (RB instantly)))))
    (. .)))

advmod(rewind-18, Currently-1)
nn(Edition-5, Pocket-4)
prep_in(rewind-18, Edition-5)
advmod(runs-10, when-7)
rel(runs-10, when-7)
det(furnace-9, the-8)
nsubj(runs-10, furnace-9)
dep(Edition-5, runs-10)
prt(runs-10, out-11)
prep_of(Edition-5, fuel-13)
nsubj(rewind-18, it-15)
nsubj(disappear-27, it-15)
aux(rewind-18, will-16)
neg(rewind-18, not-17)
advmod(rewind-18, backwards-19)
amod(speed-22, x2-21)
prep_at(rewind-18, speed-22)
aux(disappear-27, will-25)
advmod(disappear-27, simply-26)
conj_and(rewind-18, disappear-27)
advmod(disappear-27, instantly-28)

(ROOT
  (S
    (NP
      (NP (DT All) (NN ore) (NNS blocks))
      (PP (IN except)
        (NP (NN iron)
          (CC and)
          (NN gold))))
    (VP (VBP require)
      (NP (DT a) (NNP Silk) (NNP Touch) (NN pickaxe)
        (S
          (VP (TO to)
            (VP (VB drop)
              (NP (PRP themselves)))))))
    (. .)))

det(blocks-3, All-1)
nn(blocks-3, ore-2)
nsubj(require-8, blocks-3)
prep_except(blocks-3, iron-5)
prep_except(blocks-3, gold-7)
conj_and(iron-5, gold-7)
det(pickaxe-12, a-9)
nn(pickaxe-12, Silk-10)
nn(pickaxe-12, Touch-11)
dobj(require-8, pickaxe-12)
aux(drop-14, to-13)
infmod(pickaxe-12, drop-14)
dobj(drop-14, themselves-15)

(ROOT
  (S
    (VP (VBD Create)
      (NP
        (NP (DT a) (NN stone) (NN axe))
        (, ,)
        (NP (NN stone) (NN sword))
        (, ,)
        (CC and)
        (NP (NN stone) (NN pickaxe))))
    (. .)))

det(axe-4, a-2)
nn(axe-4, stone-3)
dobj(Create-1, axe-4)
nn(sword-7, stone-6)
dobj(Create-1, sword-7)
conj_and(axe-4, sword-7)
nn(pickaxe-11, stone-10)
dobj(Create-1, pickaxe-11)
conj_and(axe-4, pickaxe-11)

(ROOT
  (S
    (ADVP (RB Now))
    (PRN
      (S
        (VP (VB craft)
          (NP (DT a) (NN furnace))
          (S
            (VP (TO to)
              (VP (VB cook)
                (NP (NN meat))
                (PP (IN for)
                  (NP
                    (ADJP (NN food)
                      (CC and)
                      (VBN smelt))
                    (DT any) (NN iron)))))))))
    (NP (PRP you))
    (VP (VBP find)
      (PP (IN in)
        (NP (PRP$ your) (NNS travels))))
    (. .)))

advmod(find-15, Now-1)
parataxis(find-15, craft-2)
det(furnace-4, a-3)
dobj(craft-2, furnace-4)
aux(cook-6, to-5)
xcomp(craft-2, cook-6)
dobj(cook-6, meat-7)
amod(iron-13, food-9)
conj_and(food-9, smelt-11)
amod(iron-13, smelt-11)
det(iron-13, any-12)
prep_for(cook-6, iron-13)
nsubj(find-15, you-14)
poss(travels-18, your-17)
prep_in(find-15, travels-18)

(ROOT
  (S
    (VP (VB Save)
      (NP
        (NP
          (QP (IN around) (CD five))
          (NNS blocks))
        (PP (IN of)
          (NP (NN wood))))
      (PP (IN in)
        (NP (NN case)))
      (SBAR
        (S
          (NP (PRP you))
          (VP (VBP have)
            (ADVP (RB n't))
            (VP
              (VP (VBN found)
                (NP (DT any) (NN coal))
                (ADVP (RB yet)))
              (, ,)
              (CC and)
              (VP (VBN smelt)
                (S
                  (NP (PRP them))
                  (VP (TO to)
                    (VP (VB create)
                      (ADJP (JJ charcoal)))))))))))
    (. .)))

quantmod(five-3, around-2)
num(blocks-4, five-3)
dobj(Save-1, blocks-4)
prep_of(blocks-4, wood-6)
prep_in(Save-1, case-8)
nsubj(found-12, you-9)
nsubj(smelt-18, you-9)
aux(found-12, have-10)
neg(found-12, n't-11)
dep(Save-1, found-12)
det(coal-14, any-13)
dobj(found-12, coal-14)
dobj(smelt-18, coal-14)
advmod(found-12, yet-15)
dep(Save-1, smelt-18)
conj_and(found-12, smelt-18)
nsubj(create-21, them-19)
aux(create-21, to-20)
xcomp(smelt-18, create-21)
acomp(create-21, charcoal-22)

(ROOT
  (S
    (PP (IN On)
      (NP (DT the) (JJ other) (NN hand)))
    (, ,)
    (SBAR (IN if)
      (S
        (NP (PRP you))
        (VP (VBP 're)
          (VP (VBG seeking)
            (NP (NN adventure))))))
    (NP (PRP you))
    (VP (MD could) (RB always)
      (VP
        (VP (VB arm)
          (NP (PRP yourself))
          (PP (IN with)
            (NP (DT a) (NN stone) (NN sword))))
        (CC and)
        (VP (VB go)
          (VP (VB beat)
            (NP (DT some) (NNS mobs))
            (, ,)
            (SBAR (IN if)
              (S
                (NP (PRP you))
                (VP (VBP feel)
                  (PP (IN like)
                    (NP (PRP it))))))))))
    (. .)))

det(hand-4, the-2)
amod(hand-4, other-3)
prep_on(arm-14, hand-4)
mark(seeking-9, if-6)
nsubj(seeking-9, you-7)
aux(seeking-9, 're-8)
dep(arm-14, seeking-9)
dobj(seeking-9, adventure-10)
nsubj(arm-14, you-11)
nsubj(go-21, you-11)
aux(arm-14, could-12)
advmod(arm-14, always-13)
dobj(arm-14, yourself-15)
dobj(go-21, yourself-15)
det(sword-19, a-17)
nn(sword-19, stone-18)
prep_with(arm-14, sword-19)
conj_and(arm-14, go-21)
xcomp(go-21, beat-22)
det(mobs-24, some-23)
dobj(beat-22, mobs-24)
mark(feel-28, if-26)
nsubj(feel-28, you-27)
advcl(beat-22, feel-28)
prep_like(feel-28, it-30)

(ROOT
  (S
    (NP (DT The) (NNS torches))
    (VP (VBP are)
      (ADJP (JJ easy))
      (SBAR (IN though) (, ,)
        (S
          (NP (PRP you))
          (ADVP (RB just))
          (VP (VBP need)
            (S
              (VP (TO to)
                (VP (VB craft)
                  (ADJP (JJ charcoal\/coal))
                  (PP (IN on)
                    (NP
                      (NP (NN top))
                      (PP (IN of)
                        (NP (DT a) (NN stick))))))))))))
    (. .)))

det(torches-2, The-1)
nsubj(easy-4, torches-2)
cop(easy-4, are-3)
mark(need-9, though-5)
nsubj(need-9, you-7)
xsubj(craft-11, you-7)
advmod(need-9, just-8)
advcl(easy-4, need-9)
aux(craft-11, to-10)
xcomp(need-9, craft-11)
acomp(craft-11, charcoal\/coal-12)
det(stick-17, a-16)
prep_on_top_of(craft-11, stick-17)

(ROOT
  (S
    (PP (IN After)
      (S
        (VP (VBG marking)
          (NP (PRP$ your)))))
    (S
      (VP
        (VP (VB spawn)
          (NP (NN point)))
        (, ,)
        (VP (VB head)
          (PP (IN for)
            (NP (JJ high) (NN ground))))
        (CC and)
        (VP (VB look)
          (PRT (RP around))
          (PP (IN for)
            (NP
              (NP (JJ green) (NN grass))
              (CC and\/or)
              (NP
                (NP (NNS trees))
                (-LRB- -LRB-)
                (NP
                  (NP (NNS cacti))
                  (CC and)
                  (NP (NN sugar) (NN cane)))))))))
    (VP (VBP do) (RB n't)
      (VP (VB count)))
    (. .)))

prepc_after(count-26, marking-2)
dobj(marking-2, your-3)
csubj(count-26, spawn-4)
dobj(spawn-4, point-5)
dobj(head-7, point-5)
dobj(look-12, point-5)
conj_and(spawn-4, head-7)
csubj(count-26, head-7)
amod(ground-10, high-9)
prep_for(head-7, ground-10)
conj_and(spawn-4, look-12)
csubj(count-26, look-12)
prt(look-12, around-13)
amod(grass-16, green-15)
prep_for(look-12, grass-16)
prep_for(look-12, trees-18)
conj_and\/or(grass-16, trees-18)
dep(trees-18, cacti-20)
nn(cane-23, sugar-22)
dep(trees-18, cane-23)
conj_and(cacti-20, cane-23)
aux(count-26, do-24)
neg(count-26, n't-25)

(ROOT
  (S
    (ADVP (RB However))
    (, ,)
    (NP
      (NP (CD one) (NN thing))
      (SBAR
        (S
          (NP (DT the) (NN mushroom) (NN biome))
          (VP (VBZ does) (RB not)
            (VP (VB have)))
          (, ,))))
    (VP (VBZ is)
      (NP (NN wood))
      (: --)
      (SBAR (RB so) (IN before)
        (S
          (NP (PRP you))
          (VP (VBP go)
            (ADVP (RB there))
            (, ,)
            (SBAR
              (S
                (NP
                  (NP (NN head))
                  (PP (IN for)
                    (NP (DT a) (JJ grassy) (NN area))))
                (VP (TO to)
                  (VP (VB get)
                    (NP (DT some) (NN wood)
                      (CC and)
                      (NN stone))
                    (ADVP (RB first))))))))))
    (. .)))

advmod(wood-13, However-1)
num(thing-4, one-3)
nsubj(wood-13, thing-4)
det(biome-7, the-5)
nn(biome-7, mushroom-6)
nsubj(have-10, biome-7)
aux(have-10, does-8)
neg(have-10, not-9)
rcmod(thing-4, have-10)
cop(wood-13, is-12)
advmod(go-18, so-15)
dep(go-18, before-16)
nsubj(go-18, you-17)
parataxis(wood-13, go-18)
advmod(go-18, there-19)
nsubj(get-27, head-21)
det(area-25, a-23)
amod(area-25, grassy-24)
prep_for(head-21, area-25)
aux(get-27, to-26)
ccomp(go-18, get-27)
xcomp(go-18, get-27)
det(wood-29, some-28)
dobj(get-27, wood-29)
dobj(get-27, stone-31)
conj_and(wood-29, stone-31)
advmod(get-27, first-32)

(ROOT
  (S
    (S
      (NP (DT This))
      (VP (VBZ is)
        (NP (DT a) (JJ good) (NN place)
          (S
            (VP (TO to)
              (VP (VB live)
                (PP (IN in)
                  (ADJP (JJ general)))))))))
    (, ,)
    (S
      (SBAR (IN if)
        (S
          (S
            (NP (PRP you))
            (VP (MD can)
              (VP (VB make)
                (NP (DT a) (NN bed)))))
          (: :)
          (S
            (NP (DT the) (NNS farms))
            (VP (MD will)
              (VP (VB solve)
                (NP (PRP$ your) (NN food) (NNS worries))
                (PP (IN for)
                  (ADVP (RB now))))))))
      (, ,)
      (NP (PRP you))
      (VP (MD can)
        (VP (VB trade)
          (PP (IN with)
            (NP (DT the) (NNS villagers))))))
    (, ,)
    (CC and)
    (S
      (SBAR (IN if)
        (S
          (NP (EX there))
          (VP (VBZ 's)
            (NP
              (NP (DT a) (NN blacksmith))
              (PRN (-LRB- -LRB-)
                (SQ
                  (VP (VB look)
                    (PP (IN for)
                      (NP
                        (NP (DT a) (NN house))
                        (PP (IN with)
                          (NP (DT a) (NN stone) (NN slab) (NN roof)))))))
                (-RRB- -RRB-))))))
      (, ,)
      (NP (PRP it))
      (VP (MD will)
        (VP (VB contain)
          (NP (DT a) (NN chest))
          (PP (IN with)
            (NP (NN bonus) (NNS items))))))
    (. .)))

nsubj(place-5, This-1)
cop(place-5, is-2)
det(place-5, a-3)
amod(place-5, good-4)
aux(live-7, to-6)
infmod(place-5, live-7)
prep_in(live-7, general-9)
mark(make-14, if-11)
nsubj(make-14, you-12)
aux(make-14, can-13)
advcl(trade-30, make-14)
det(bed-16, a-15)
dobj(make-14, bed-16)
det(farms-19, the-18)
nsubj(solve-21, farms-19)
aux(solve-21, will-20)
parataxis(make-14, solve-21)
poss(worries-24, your-22)
nn(worries-24, food-23)
dobj(solve-21, worries-24)
prep(solve-21, for-25)
dep(for-25, now-26)
nsubj(trade-30, you-28)
aux(trade-30, can-29)
ccomp(place-5, trade-30)
conj_and(place-5, trade-30)
det(villagers-33, the-32)
prep_with(trade-30, villagers-33)
mark('s-38, if-36)
expl('s-38, there-37)
advcl(contain-55, 's-38)
det(blacksmith-40, a-39)
nsubj('s-38, blacksmith-40)
dep(-LRB--41, look-42)
det(house-45, a-44)
prep_for(look-42, house-45)
det(roof-50, a-47)
nn(roof-50, stone-48)
nn(roof-50, slab-49)
prep_with(house-45, roof-50)
nsubj(contain-55, it-53)
aux(contain-55, will-54)
conj_and(place-5, contain-55)
det(chest-57, a-56)
dobj(contain-55, chest-57)
nn(items-60, bonus-59)
prep_with(contain-55, items-60)

(ROOT
  (S
    (SBAR (IN If)
      (S
        (NP (EX there))
        (VP (VBP are)
          (NP (DT no) (NN sheep))
          (ADVP (RB around)))))
    (, ,)
    (S
      (VP (VB look)
        (PP (IN for)
          (NP (`` ``)
            (NP (NN lamp) (NNS posts))
            ('' '')
            (PP (IN in)
              (NP
                (NP (DT the) (NN village))
                (: --)
                (NP (DT the) (JJ black) (NN block))))))
        (PP (IN on)
          (NP (NN top)))))
    (VP (VBZ is)
      (NP
        (NP (NN wool))
        (PRN (-LRB- -LRB-)
          (SQ
            (VP (VB break)
              (NP (PRP it))
              (PP (IN with)
                (NP (PRP$ your) (NN hand)))))
          (-RRB- -RRB-))))
    (. .)))

mark(are-3, If-1)
expl(are-3, there-2)
advcl(is-23, are-3)
det(sheep-5, no-4)
nsubj(are-3, sheep-5)
advmod(are-3, around-6)
csubj(is-23, look-8)
nn(posts-12, lamp-11)
prep_for(look-8, posts-12)
det(village-16, the-15)
prep_in(posts-12, village-16)
det(block-20, the-18)
amod(block-20, black-19)
dep(village-16, block-20)
prep_on(look-8, top-22)
attr(is-23, wool-24)
dep(-LRB--25, break-26)
dobj(break-26, it-27)
poss(hand-30, your-29)
prep_with(break-26, hand-30)

(ROOT
  (S
    (SBAR (IN If)
      (S
        (NP (PRP you))
        (VP (MD ca) (RB n't)
          (VP (VB get)
            (NP (JJ enough) (NN wool))
            (PP (IN for)
              (NP (DT a) (NN bed)))))))
    (, ,)
    (NP (PRP$ your) (JJS best) (NNS bets))
    (VP
      (VP (VBP are)
        (PRN (-LRB- -LRB-)
          (NP (JJ first) (NN choice))
          (-RRB- -RRB-)))
      (CC either)
      (VP (VBP get)
        (ADJP
          (ADJP
            (ADVP
              (ADVP
                (ADVP (RB far) (RB away))
                (PRN (-LRB- -LRB-)
                  (ADJP
                    (NP (CD 150) (NNS blocks))
                    (CC or)
                    (ADJP (RB so)))
                  (-RRB- -RRB-))
                (PP (IN from)
                  (NP (DT the) (NN village))))
              (RB before))
            (JJ nightfall))
          (, ,)
          (CC or)
          (ADJP
            (ADJP
              (ADJP (-LRB- -LRB-)
                (NP
                  (NP (JJ second))
                  (NP (JJS best)))
                (-RRB- -RRB-))
              (S
                (VP (TO to)
                  (VP (VB spend)
                    (NP
                      (NP (PRP$ your) (JJ first) (NN night))
                      (PRN (-LRB- -LRB-)
                        (NP (PRP s))
                        (-RRB- -RRB-)))
                    (PP (IN atop)
                      (NP (DT a)
                        (ADJP (RB really) (JJ tall))
                        (NN pillar)))))))
            (, ,)
            (ADJP
              (NP (CD 40) (NNS blocks))
              (JJ high))
            (CC or)
            (ADJP (JJR more)))
          (PRN (-LRB- -LRB-)
            (S
              (NP (CD 64))
              (VP (VBZ is)
                (ADJP (RB even) (JJR better))))
            (-RRB- -RRB-)))))
    (. .)))

mark(get-5, If-1)
nsubj(get-5, you-2)
aux(get-5, ca-3)
neg(get-5, n't-4)
advcl(are-15, get-5)
amod(wool-7, enough-6)
dobj(get-5, wool-7)
det(bed-10, a-9)
prep_for(get-5, bed-10)
poss(bets-14, your-12)
amod(bets-14, best-13)
nsubj(are-15, bets-14)
amod(choice-18, first-17)
dep(are-15, choice-18)
dep(are-15, either-20)
dep(nightfall-34, get-21)
advmod(away-23, far-22)
advmod(before-33, away-23)
num(blocks-26, 150-25)
dep(away-23, blocks-26)
dep(away-23, so-28)
conj_or(blocks-26, so-28)
dep(away-23, from-30)
det(village-32, the-31)
pobj(from-30, village-32)
advmod(nightfall-34, before-33)
conj(are-15, nightfall-34)
conj(are-15, second-38)
conj_or(nightfall-34, second-38)
dep(second-38, best-39)
aux(spend-42, to-41)
xcomp(second-38, spend-42)
poss(night-45, your-43)
amod(night-45, first-44)
dobj(spend-42, night-45)
dep(night-45, s-47)
det(pillar-53, a-50)
advmod(tall-52, really-51)
amod(pillar-53, tall-52)
prep_atop(spend-42, pillar-53)
num(blocks-56, 40-55)
measure(high-57, blocks-56)
conj_or(nightfall-34, high-57)
conj_or(second-38, high-57)
conj_or(nightfall-34, more-59)
conj_or(second-38, more-59)
nsubj(better-64, 64-61)
cop(better-64, is-62)
advmod(better-64, even-63)
dep(nightfall-34, better-64)

(ROOT
  (S
    (VP
      (VP (VB Look)
        (PRT (RP around))
        (PP (IN for)
          (NP
            (NP (DT a) (JJ few) (NNS things))
            (PP (IN in)
              (NP (JJ particular))))))
      (, ,)
      (PP (IN in)
        (NP
          (NP
            (NP (NN order))
            (PP (IN of)
              (NP (NN priority))))
          (PRN (: :)
            (NP
              (NP (NNS trees))
              (, ,)
              (NP
                (NP (JJ visible) (NN stone))
                (-LRB- -LRB-)
                (CC and)
                (NP
                  (NP (RB especially) (NN coal) (NN ore))
                  (, ,)
                  (SBAR
                    (WHNP (WDT which))
                    (S
                      (VP (VBZ looks)
                        (PP (IN like)
                          (NP
                            (NP (NN stone))
                            (PP (IN with)
                              (NP (JJ black) (NNS spots)))))
                        (PP (IN on)
                          (NP (PRP it)))
                        (-RRB- -RRB-))))))
              (, ,)
              (NP (NNS animals))
              (, ,)
              (CC and)
              (NP (JJ tall) (NN grass)))))))
    (. .)))

prt(Look-1, around-2)
det(things-6, a-4)
amod(things-6, few-5)
prep_for(Look-1, things-6)
prep_in(things-6, particular-8)
prep_in(Look-1, order-11)
prep_of(order-11, priority-13)
dep(order-11, trees-15)
amod(stone-18, visible-17)
dep(order-11, stone-18)
conj_and(trees-15, stone-18)
advmod(ore-23, especially-21)
nn(ore-23, coal-22)
conj_and(trees-15, ore-23)
conj_and(stone-18, ore-23)
nsubj(looks-26, ore-23)
rcmod(ore-23, looks-26)
prep_like(looks-26, stone-28)
amod(spots-31, black-30)
prep_with(stone-28, spots-31)
prep_on(looks-26, it-33)
dep(order-11, animals-36)
conj_and(trees-15, animals-36)
amod(grass-40, tall-39)
dep(order-11, grass-40)
conj_and(trees-15, grass-40)

(ROOT
  (S
    (NP (PRP$ Your) (JJ first) (NN priority))
    (VP (VBZ is)
      (S
        (VP (TO to)
          (VP
            (VP (VB find)
              (NP (DT a) (JJ small) (NN tree)))
            (, ,)
            (VP (VB bash)
              (PP (IN through)
                (NP (DT the) (NNS leaves)))
              (SBAR (IN if)
                (S
                  (VP (VBN needed)))))
            (, ,)
            (CC and)
            (VP (`` ``) (VB punch) ('' '')
              (NP (DT the) (NN wood))))))
      (SBAR (IN until)
        (S
          (NP (DT each) (NN block))
          (VP (VBZ drops)
            (PP (IN as)
              (NP (DT an) (NN item)))))))
    (. .)))

poss(priority-3, Your-1)
amod(priority-3, first-2)
nsubj(is-4, priority-3)
xsubj(find-6, priority-3)
aux(find-6, to-5)
xcomp(is-4, find-6)
det(tree-9, a-7)
amod(tree-9, small-8)
dobj(find-6, tree-9)
dobj(bash-11, tree-9)
xcomp(is-4, bash-11)
conj_and(find-6, bash-11)
det(leaves-14, the-13)
prep_through(bash-11, leaves-14)
mark(needed-16, if-15)
advcl(bash-11, needed-16)
xcomp(is-4, punch-20)
conj_and(find-6, punch-20)
det(wood-23, the-22)
dobj(punch-20, wood-23)
mark(drops-27, until-24)
det(block-26, each-25)
nsubj(drops-27, block-26)
advcl(is-4, drops-27)
det(item-30, an-29)
prep_as(drops-27, item-30)

(ROOT
  (S
    (NP (DT The) (NNS planks))
    (VP (MD will)
      (VP (VB be)
        (NP (JJ different) (NNS colors))
        (PP (VBG depending)
          (PP (IN on)
            (SBAR
              (WHNP (WP what))
              (S
                (NP
                  (NP (NN sort))
                  (PP (IN of)
                    (NP (NN wood))))
                (NP (PRP you))
                (VP (VBP have))))))))
    (. .)))

det(planks-2, The-1)
nsubj(colors-6, planks-2)
aux(colors-6, will-3)
cop(colors-6, be-4)
amod(colors-6, different-5)
dobj(have-14, what-9)
nsubj(have-14, sort-10)
prep_of(sort-10, wood-12)
nsubj(have-14, you-13)
prepc_depending_on(colors-6, have-14)

(ROOT
  (S
    (PP (IN In)
      (ADJP (JJ particular)))
    (, ,)
    (NP (NNS sticks))
    (VP (VBP do) (RB n't)
      (VP (`` ``) (VB remember) ('' '')
        (NP
          (SBAR
            (WHNP (WP what))
            (S
              (NP
                (NP (NN sort))
                (PP (IN of)
                  (NP (NN wood))))
              (NP (PRP they))
              (VP (VBD came)
                (PP (IN from))))))))
    (. .)))

prep_in(remember-8, particular-2)
nsubj(remember-8, sticks-4)
aux(remember-8, do-5)
neg(remember-8, n't-6)
rel(came-15, what-10)
nsubj(came-15, sort-11)
prep_of(sort-11, wood-13)
nsubj(came-15, they-14)
dobj(remember-8, came-15)
prep(came-15, from-16)

(ROOT
  (S
    (NP
      (NP (NN n) (NN order))
      (SBAR
        (S
          (VP (TO to)
            (VP (VB collect)
              (NP
                (NP
                  (NP (NN stone)
                    (CC and)
                    (NN coal))
                  (, ,)
                  (NP (DT the) (JJ next) (NN staple)))
                (NNS resources)))))))
    (, ,)
    (NP (PRP you))
    (VP (MD will)
      (VP (VB need)
        (NP (DT a) (NN pickaxe))))
    (. .)))

nn(order-2, n-1)
nsubj(need-16, order-2)
aux(collect-4, to-3)
infmod(order-2, collect-4)
nn(resources-12, stone-5)
conj_and(stone-5, coal-7)
nn(resources-12, coal-7)
det(staple-11, the-9)
amod(staple-11, next-10)
appos(stone-5, staple-11)
dobj(collect-4, resources-12)
nsubj(need-16, you-14)
aux(need-16, will-15)
det(pickaxe-18, a-17)
dobj(need-16, pickaxe-18)

(ROOT
  (S
    (S
      (NP (PRP$ Your) (JJ first) (NN pickaxe))
      (VP (MD will)
        (VP (VB be)
          (VP (VBN made)
            (PP (IN of)
              (NP
                (NP (NN wood))
                (, ,)
                (SBAR
                  (WHNP (WDT which))
                  (S
                    (VP (VBZ is) (RB n't)
                      (ADJP (RB very) (JJ durable)
                        (CC or)
                        (JJ fast)))))))))))
    (, ,)
    (CC but)
    (S
      (SBAR (IN until)
        (S
          (NP (PRP you))
          (VP (VBP collect)
            (NP (DT some) (NN cobblestone)))))
      (NP (PRP it))
      (VP (VBZ 's)
        (SBAR (DT all)
          (S
            (NP (PRP you))
            (VP (VBP have))))))
    (. .)))

poss(pickaxe-3, Your-1)
amod(pickaxe-3, first-2)
nsubjpass(made-6, pickaxe-3)
aux(made-6, will-4)
auxpass(made-6, be-5)
prep_of(made-6, wood-8)
nsubj(durable-14, wood-8)
nsubj(fast-16, wood-8)
cop(durable-14, is-11)
neg(durable-14, n't-12)
advmod(durable-14, very-13)
rcmod(wood-8, durable-14)
rcmod(wood-8, fast-16)
conj_or(durable-14, fast-16)
mark(collect-21, until-19)
nsubj(collect-21, you-20)
advcl('s-25, collect-21)
det(cobblestone-23, some-22)
dobj(collect-21, cobblestone-23)
nsubj('s-25, it-24)
conj_but(made-6, 's-25)
dep(have-28, all-26)
nsubj(have-28, you-27)
ccomp('s-25, have-28)

(ROOT
  (S
    (S
      (VP (TO To)
        (VP (VB make)
          (NP (DT a) (NN pickaxe)))))
    (, ,)
    (NP (PRP you))
    (VP (MD will)
      (VP (VB need)
        (S
          (VP (TO to)
            (VP (VB craft)
              (NP (DT some) (NNS sticks)))))))
    (. .)))

aux(make-2, To-1)
dep(need-8, make-2)
det(pickaxe-4, a-3)
dobj(make-2, pickaxe-4)
nsubj(need-8, you-6)
xsubj(craft-10, you-6)
aux(need-8, will-7)
aux(craft-10, to-9)
xcomp(need-8, craft-10)
det(sticks-12, some-11)
dobj(craft-10, sticks-12)

(ROOT
  (S
    (S
      (ADVP (RB Now))
      (NP (PRP you))
      (VP (MD 'll)
        (VP (VB use)
          (NP (DT some) (NNS planks)))))
    (CC and)
    (S
      (NP (DT the))
      (VP (VBZ sticks)
        (S
          (NP (PRP you))
          (ADVP (RB just))
          (VP (VBN made)
            (S
              (VP (TO to)
                (VP (VB create)
                  (NP (DT the) (JJ final) (NN product)))))))))
    (. .)))

advmod(use-4, Now-1)
nsubj(use-4, you-2)
aux(use-4, 'll-3)
det(planks-6, some-5)
dobj(use-4, planks-6)
dobj(sticks-9, planks-6)
nsubj(sticks-9, the-8)
conj_and(use-4, sticks-9)
nsubj(made-12, you-10)
xsubj(create-14, you-10)
advmod(made-12, just-11)
ccomp(sticks-9, made-12)
aux(create-14, to-13)
xcomp(made-12, create-14)
det(product-17, the-15)
amod(product-17, final-16)
dobj(create-14, product-17)

(ROOT
  (S
    (SBAR (IN Once)
      (S
        (NP (PRP you))
        (VP (VBP 've)
          (VP (VBN crafted)
            (NP (DT a) (NN pickaxe))))))
    (, ,)
    (NP (PRP you))
    (VP (MD can) (RB successfully)
      (VP (VB acquire)
        (ADJP (JJ cobblestone)
          (S
            (VP (TO to)
              (VP (VB make)
                (NP (JJR better) (NNS tools))))))))
    (. .)))

mark(crafted-4, Once-1)
nsubj(crafted-4, you-2)
aux(crafted-4, 've-3)
advcl(acquire-11, crafted-4)
det(pickaxe-6, a-5)
dobj(crafted-4, pickaxe-6)
nsubj(acquire-11, you-8)
aux(acquire-11, can-9)
advmod(acquire-11, successfully-10)
acomp(acquire-11, cobblestone-12)
aux(make-14, to-13)
xcomp(cobblestone-12, make-14)
amod(tools-16, better-15)
dobj(make-14, tools-16)

(ROOT
  (S
    (SBAR (IN If)
      (S
        (NP (PRP you))
        (VP (VBP do) (RB n't)
          (VP
            (VP (VB see)
              (NP (DT any))
              (PP (IN on)
                (NP (DT the) (NN surface))))
            (, ,)
            (VP (VB dig)
              (PRT (RP down))
              (PP (IN in)
                (NP
                  (NP (DT a) (JJ staircase) (NN fashion)
                    (CC and)
                    (NN mine))
                  (NP (DT the) (NN stone))))
              (PP (IN with)
                (NP (PRP$ your) (NN pickaxe))))))))
    (: ;)
    (NP (PRP it))
    (VP (MD will)
      (VP (VB drop)
        (PP (IN as)
          (NP (JJ cobblestone) (NNS items)))))
    (. .)))

mark(see-5, If-1)
nsubj(see-5, you-2)
aux(see-5, do-3)
neg(see-5, n't-4)
advcl(drop-27, see-5)
dobj(see-5, any-6)
det(surface-9, the-8)
prep_on(see-5, surface-9)
dep(see-5, dig-11)
prt(dig-11, down-12)
det(fashion-16, a-14)
amod(fashion-16, staircase-15)
prep_in(dig-11, fashion-16)
prep_in(dig-11, mine-18)
conj_and(fashion-16, mine-18)
det(stone-20, the-19)
dep(fashion-16, stone-20)
poss(pickaxe-23, your-22)
prep_with(dig-11, pickaxe-23)
nsubj(drop-27, it-25)
aux(drop-27, will-26)
amod(items-30, cobblestone-29)
prep_as(drop-27, items-30)

(ROOT
  (S
    (S
      (VP (VB Gather) (RB enough)
        (VP (VB cobblestone)
          (S
            (VP (TO to)
              (VP
                (VP (VB upgrade)
                  (NP (PRP$ your) (NN pickaxe)))
                (CC and)
                (VP (VB make)
                  (NP (DT a) (NN stone) (NN shovel)))))))))
    (, ,)
    (NP
      (NP
        (NP (NN axe))
        (, ,)
        (CC and)
        (NP (NN sword))
        (, ,))
      (CC and)
      (NP
        (NP (DT a) (NN furnace))
        (-LRB- -LRB-)
        (NP
          (NP (DT the) (JJ exact) (NN number))
          (PP (IN of)
            (NP
              (NP (NN cobblestone))
              (VP (VBN required)
                (S
                  (VP (TO to)
                    (VP (VB make)
                      (NP (DT these)))))))))))
    (VP (VBZ is)
      (NP (CD 17)))
    (. .) (-RRB- -RRB-)))

ccomp(17-33, Gather-1)
advmod(Gather-1, enough-2)
dep(Gather-1, cobblestone-3)
aux(upgrade-5, to-4)
xcomp(cobblestone-3, upgrade-5)
poss(pickaxe-7, your-6)
dobj(upgrade-5, pickaxe-7)
xcomp(cobblestone-3, make-9)
conj_and(upgrade-5, make-9)
det(shovel-12, a-10)
nn(shovel-12, stone-11)
dobj(make-9, shovel-12)
nsubj(17-33, axe-14)
conj_and(axe-14, sword-17)
nsubj(17-33, sword-17)
det(furnace-21, a-20)
conj_and(axe-14, furnace-21)
nsubj(17-33, furnace-21)
det(number-25, the-23)
amod(number-25, exact-24)
dep(furnace-21, number-25)
prep_of(number-25, cobblestone-27)
xsubj(make-30, cobblestone-27)
partmod(cobblestone-27, required-28)
aux(make-30, to-29)
xcomp(required-28, make-30)
dobj(make-30, these-31)
cop(17-33, is-32)

(ROOT
  (S
    (S
      (NP (PRP You))
      (VP (MD can) (RB also)
        (VP (VB craft)
          (NP
            (NP (DT a) (NN stone) (NN hoe))
            (PRN (-LRB- -LRB-)
              (CC or)
              (RB even)
              (NP (DT a) (JJ wooden) (NN one))
              (-RRB- -RRB-))))))
    (, ,)
    (CC but)
    (S
      (NP (PRP it))
      (VP (MD wo) (RB n't)
        (VP (VB be)
          (ADJP (JJ useful))
          (SBAR (IN until)
            (S
              (NP (PRP you))
              (VP (VBP start)
                (NP
                  (NP (NNS farms))
                  (PRN (-LRB- -LRB-)
                    (VP (VBN explained)
                      (PP (IN on)
                        (NP (NN day) (CD two))))
                    (-RRB- -RRB-)))))))))
    (. .)))

nsubj(craft-4, You-1)
aux(craft-4, can-2)
advmod(craft-4, also-3)
det(hoe-7, a-5)
nn(hoe-7, stone-6)
dobj(craft-4, hoe-7)
dep(one-13, or-9)
dep(one-13, even-10)
det(one-13, a-11)
amod(one-13, wooden-12)
appos(hoe-7, one-13)
nsubj(useful-21, it-17)
aux(useful-21, wo-18)
neg(useful-21, n't-19)
cop(useful-21, be-20)
conj_but(craft-4, useful-21)
mark(start-24, until-22)
nsubj(start-24, you-23)
advcl(useful-21, start-24)
dobj(start-24, farms-25)
dep(farms-25, explained-27)
prep_on(explained-27, day-29)
num(day-29, two-30)

(ROOT
  (S
    (S
      (S
        (NP (DT A) (NN stone) (NN pickaxe))
        (VP (VBZ is)
          (ADJP
            (ADJP (RBR more) (JJ durable))
            (CC and)
            (ADJP (RBR more) (JJ efficient)
              (PP (IN than)
                (NP (DT a) (JJ wooden) (NN pickaxe)))))))
      (, ,)
      (CC and)
      (S
        (NP (PRP it))
        (VP (MD can))))
    (NP (PRP mine))
    (VP (VBZ ores)
      (SBAR (IN that)
        (S
          (NP (DT a) (JJ wooden) (NN pickaxe))
          (VP (MD ca) (RB n't)))))
    (. .)))

det(pickaxe-3, A-1)
nn(pickaxe-3, stone-2)
nsubj(durable-6, pickaxe-3)
nsubj(efficient-9, pickaxe-3)
cop(durable-6, is-4)
advmod(durable-6, more-5)
dep(ores-19, durable-6)
advmod(efficient-9, more-8)
conj_and(durable-6, efficient-9)
dep(ores-19, efficient-9)
det(pickaxe-13, a-11)
amod(pickaxe-13, wooden-12)
prep_than(efficient-9, pickaxe-13)
nsubj(can-17, it-16)
conj_and(durable-6, can-17)
dep(ores-19, can-17)
nsubj(ores-19, mine-18)
complm(ca-24, that-20)
det(pickaxe-23, a-21)
amod(pickaxe-23, wooden-22)
nsubj(ca-24, pickaxe-23)
ccomp(ores-19, ca-24)
neg(ca-24, n't-25)

(ROOT
  (S
    (NP (NNS Shovels))
    (VP (VBP are)
      (VP
        (ADVP (RB mainly))
        (VBN used)
        (S
          (VP (TO to)
            (VP (VB break)
              (NP
                (NP (NN dirt))
                (, ,)
                (NP (NN grass))
                (, ,)
                (NP (NN sand))
                (, ,)
                (NP (NN clay))
                (, ,)
                (CC and)
                (NP
                  (NP (JJ gravel) (NNS blocks))
                  (ADJP (JJR quicker)
                    (PP (IN than)
                      (PP (IN by)
                        (NP (NN hand))))))))))))
    (. .)))

nsubjpass(used-4, Shovels-1)
xsubj(break-6, Shovels-1)
auxpass(used-4, are-2)
advmod(used-4, mainly-3)
aux(break-6, to-5)
xcomp(used-4, break-6)
dobj(break-6, dirt-7)
dobj(break-6, grass-9)
conj_and(dirt-7, grass-9)
dobj(break-6, sand-11)
conj_and(dirt-7, sand-11)
dobj(break-6, clay-13)
conj_and(dirt-7, clay-13)
amod(blocks-17, gravel-16)
dobj(break-6, blocks-17)
conj_and(dirt-7, blocks-17)
amod(blocks-17, quicker-18)
prep(quicker-18, than-19)
dep(than-19, by-20)
pobj(by-20, hand-21)

(ROOT
  (S
    (ADVP (RB Now))
    (, ,)
    (NP (PRP you))
    (VP (MD should)
      (VP (VB gather)
        (NP (JJR more) (NN wood))
        (, ,)
        (S
          (VP (VBG using)
            (NP (PRP$ your) (JJ new) (NN stone) (NN axe))))))
    (. .)))

advmod(gather-5, Now-1)
nsubj(gather-5, you-3)
aux(gather-5, should-4)
amod(wood-7, more-6)
dobj(gather-5, wood-7)
xcomp(gather-5, using-9)
poss(axe-13, your-10)
amod(axe-13, new-11)
nn(axe-13, stone-12)
dobj(using-9, axe-13)

(ROOT
  (S
    (SBAR (IN If)
      (S
        (NP (PRP you))
        (VP (VBP happen)
          (PP (IN across)
            (NP
              (NP (DT a) (JJ coal-like) (NN ore))
              (PP (IN with)
                (NP
                  (NP (NN tan) (NNS specks))
                  (PP (IN in)
                    (NP
                      (NP (NN place))
                      (PP (IN of)
                        (NP (DT the) (JJ black))))))))))))
    (, ,)
    (NP (PRP you))
    (VP (VBP have)
      (VP (VBN found)
        (NP (DT some) (NN iron))))
    (. .)))

mark(happen-3, If-1)
nsubj(happen-3, you-2)
advcl(found-19, happen-3)
det(ore-7, a-5)
amod(ore-7, coal-like-6)
prep_across(happen-3, ore-7)
nn(specks-10, tan-9)
prep_with(ore-7, specks-10)
det(black-15, the-14)
prep_in_place_of(specks-10, black-15)
nsubj(found-19, you-17)
aux(found-19, have-18)
det(iron-21, some-20)
dobj(found-19, iron-21)

(ROOT
  (S
    (SBAR (IN As)
      (S
        (NP (PRP it))
        (VP (VBZ is)
          (VP (VBN made)
            (PP (IN with)
              (NP (NN cobblestone)))))))
    (, ,)
    (NP (PRP you))
    (VP (MD will)
      (VP (VB have)
        (S
          (VP (TO to)
            (VP (VB use)
              (NP (PRP$ your) (NN pickaxe))
              (S
                (VP (TO to)
                  (VP (VB collect)
                    (NP (PRP it))
                    (SBAR (IN if)
                      (S
                        (NP (PRP you))
                        (VP (VBP wish)
                          (S
                            (VP (TO to)
                              (VP (VB relocate)
                                (NP (PRP$ your) (NN furnace))))))))))))))))
    (. .)))

mark(made-4, As-1)
nsubjpass(made-4, it-2)
auxpass(made-4, is-3)
advcl(have-10, made-4)
prep_with(made-4, cobblestone-6)
nsubj(have-10, you-8)
xsubj(use-12, you-8)
aux(have-10, will-9)
aux(use-12, to-11)
xcomp(have-10, use-12)
poss(pickaxe-14, your-13)
dobj(use-12, pickaxe-14)
aux(collect-16, to-15)
xcomp(use-12, collect-16)
dobj(collect-16, it-17)
mark(wish-20, if-18)
nsubj(wish-20, you-19)
xsubj(relocate-22, you-19)
advcl(collect-16, wish-20)
aux(relocate-22, to-21)
xcomp(wish-20, relocate-22)
poss(furnace-24, your-23)
dobj(relocate-22, furnace-24)

(ROOT
  (S
    (VP (VBD Create)
      (NP
        (NP (DT a) (NN stone) (NN axe))
        (, ,)
        (NP (NN stone) (NN sword))
        (, ,)
        (CC and)
        (NP (NN stone) (NN pickaxe))))
    (. .)))

det(axe-4, a-2)
nn(axe-4, stone-3)
dobj(Create-1, axe-4)
nn(sword-7, stone-6)
dobj(Create-1, sword-7)
conj_and(axe-4, sword-7)
nn(pickaxe-11, stone-10)
dobj(Create-1, pickaxe-11)
conj_and(axe-4, pickaxe-11)

(ROOT
  (S
    (ADVP (RB Now))
    (PRN
      (S
        (VP (VB craft)
          (NP (DT a) (NN furnace))
          (S
            (VP (TO to)
              (VP (VB cook)
                (NP (NN meat))
                (PP (IN for)
                  (NP
                    (ADJP (NN food)
                      (CC and)
                      (VBN smelt))
                    (DT any) (NN iron)))))))))
    (NP (PRP you))
    (VP (VBP find)
      (PP (IN in)
        (NP (PRP$ your) (NNS travels))))
    (. .)))

advmod(find-15, Now-1)
parataxis(find-15, craft-2)
det(furnace-4, a-3)
dobj(craft-2, furnace-4)
aux(cook-6, to-5)
xcomp(craft-2, cook-6)
dobj(cook-6, meat-7)
amod(iron-13, food-9)
conj_and(food-9, smelt-11)
amod(iron-13, smelt-11)
det(iron-13, any-12)
prep_for(cook-6, iron-13)
nsubj(find-15, you-14)
poss(travels-18, your-17)
prep_in(find-15, travels-18)

(ROOT
  (S
    (VP (VB Save)
      (NP
        (NP
          (QP (IN around) (CD five))
          (NNS blocks))
        (PP (IN of)
          (NP (NN wood))))
      (PP (IN in)
        (NP (NN case)))
      (SBAR
        (S
          (NP (PRP you))
          (VP (VBP have)
            (ADVP (RB n't))
            (VP
              (VP (VBN found)
                (NP (DT any) (NN coal))
                (ADVP (RB yet)))
              (, ,)
              (CC and)
              (VP (VBN smelt)
                (S
                  (NP (PRP them))
                  (VP (TO to)
                    (VP (VB create)
                      (ADJP (JJ charcoal)))))))))))
    (. .)))

quantmod(five-3, around-2)
num(blocks-4, five-3)
dobj(Save-1, blocks-4)
prep_of(blocks-4, wood-6)
prep_in(Save-1, case-8)
nsubj(found-12, you-9)
nsubj(smelt-18, you-9)
aux(found-12, have-10)
neg(found-12, n't-11)
dep(Save-1, found-12)
det(coal-14, any-13)
dobj(found-12, coal-14)
dobj(smelt-18, coal-14)
advmod(found-12, yet-15)
dep(Save-1, smelt-18)
conj_and(found-12, smelt-18)
nsubj(create-21, them-19)
aux(create-21, to-20)
xcomp(smelt-18, create-21)
acomp(create-21, charcoal-22)

(ROOT
  (S
    (PP (IN On)
      (NP (DT the) (JJ other) (NN hand)))
    (, ,)
    (SBAR (IN if)
      (S
        (NP (PRP you))
        (VP (VBP 're)
          (VP (VBG seeking)
            (NP (NN adventure))))))
    (NP (PRP you))
    (VP (MD could) (RB always)
      (VP
        (VP (VB arm)
          (NP (PRP yourself))
          (PP (IN with)
            (NP (DT a) (NN stone) (NN sword))))
        (CC and)
        (VP (VB go)
          (VP (VB beat)
            (NP (DT some) (NNS mobs))
            (, ,)
            (SBAR (IN if)
              (S
                (NP (PRP you))
                (VP (VBP feel)
                  (PP (IN like)
                    (NP (PRP it))))))))))
    (. .)))

det(hand-4, the-2)
amod(hand-4, other-3)
prep_on(arm-14, hand-4)
mark(seeking-9, if-6)
nsubj(seeking-9, you-7)
aux(seeking-9, 're-8)
dep(arm-14, seeking-9)
dobj(seeking-9, adventure-10)
nsubj(arm-14, you-11)
nsubj(go-21, you-11)
aux(arm-14, could-12)
advmod(arm-14, always-13)
dobj(arm-14, yourself-15)
dobj(go-21, yourself-15)
det(sword-19, a-17)
nn(sword-19, stone-18)
prep_with(arm-14, sword-19)
conj_and(arm-14, go-21)
xcomp(go-21, beat-22)
det(mobs-24, some-23)
dobj(beat-22, mobs-24)
mark(feel-28, if-26)
nsubj(feel-28, you-27)
advcl(beat-22, feel-28)
prep_like(feel-28, it-30)

(ROOT
  (S
    (NP (DT The) (NNS torches))
    (VP (VBP are)
      (ADJP (JJ easy))
      (SBAR (IN though) (, ,)
        (S
          (NP (PRP you))
          (ADVP (RB just))
          (VP (VBP need)
            (S
              (VP (TO to)
                (VP (VB craft)
                  (ADJP (JJ charcoal\/coal))
                  (PP (IN on)
                    (NP
                      (NP (NN top))
                      (PP (IN of)
                        (NP (DT a) (NN stick))))))))))))
    (. .)))

det(torches-2, The-1)
nsubj(easy-4, torches-2)
cop(easy-4, are-3)
mark(need-9, though-5)
nsubj(need-9, you-7)
xsubj(craft-11, you-7)
advmod(need-9, just-8)
advcl(easy-4, need-9)
aux(craft-11, to-10)
xcomp(need-9, craft-11)
acomp(craft-11, charcoal\/coal-12)
det(stick-17, a-16)
prep_on_top_of(craft-11, stick-17)

(ROOT
  (S
    (PP (IN After)
      (S
        (VP (VBG marking)
          (NP (PRP$ your)))))
    (S
      (VP
        (VP (VB spawn)
          (NP (NN point)))
        (, ,)
        (VP (VB head)
          (PP (IN for)
            (NP (JJ high) (NN ground))))
        (CC and)
        (VP (VB look)
          (PRT (RP around))
          (PP (IN for)
            (NP
              (NP (JJ green) (NN grass))
              (CC and\/or)
              (NP
                (NP (NNS trees))
                (-LRB- -LRB-)
                (NP
                  (NP (NNS cacti))
                  (CC and)
                  (NP (NN sugar) (NN cane)))))))))
    (VP (VBP do) (RB n't)
      (VP (VB count)))
    (. .)))

prepc_after(count-26, marking-2)
dobj(marking-2, your-3)
csubj(count-26, spawn-4)
dobj(spawn-4, point-5)
dobj(head-7, point-5)
dobj(look-12, point-5)
conj_and(spawn-4, head-7)
csubj(count-26, head-7)
amod(ground-10, high-9)
prep_for(head-7, ground-10)
conj_and(spawn-4, look-12)
csubj(count-26, look-12)
prt(look-12, around-13)
amod(grass-16, green-15)
prep_for(look-12, grass-16)
prep_for(look-12, trees-18)
conj_and\/or(grass-16, trees-18)
dep(trees-18, cacti-20)
nn(cane-23, sugar-22)
dep(trees-18, cane-23)
conj_and(cacti-20, cane-23)
aux(count-26, do-24)
neg(count-26, n't-25)

(ROOT
  (S
    (ADVP (RB However))
    (, ,)
    (NP
      (NP (CD one) (NN thing))
      (SBAR
        (S
          (NP (DT the) (NN mushroom) (NN biome))
          (VP (VBZ does) (RB not)
            (VP (VB have)))
          (, ,))))
    (VP (VBZ is)
      (NP (NN wood))
      (: --)
      (SBAR (RB so) (IN before)
        (S
          (NP (PRP you))
          (VP (VBP go)
            (ADVP (RB there))
            (, ,)
            (SBAR
              (S
                (NP
                  (NP (NN head))
                  (PP (IN for)
                    (NP (DT a) (JJ grassy) (NN area))))
                (VP (TO to)
                  (VP (VB get)
                    (NP (DT some) (NN wood)
                      (CC and)
                      (NN stone))
                    (ADVP (RB first))))))))))
    (. .)))

advmod(wood-13, However-1)
num(thing-4, one-3)
nsubj(wood-13, thing-4)
det(biome-7, the-5)
nn(biome-7, mushroom-6)
nsubj(have-10, biome-7)
aux(have-10, does-8)
neg(have-10, not-9)
rcmod(thing-4, have-10)
cop(wood-13, is-12)
advmod(go-18, so-15)
dep(go-18, before-16)
nsubj(go-18, you-17)
parataxis(wood-13, go-18)
advmod(go-18, there-19)
nsubj(get-27, head-21)
det(area-25, a-23)
amod(area-25, grassy-24)
prep_for(head-21, area-25)
aux(get-27, to-26)
ccomp(go-18, get-27)
xcomp(go-18, get-27)
det(wood-29, some-28)
dobj(get-27, wood-29)
dobj(get-27, stone-31)
conj_and(wood-29, stone-31)
advmod(get-27, first-32)

(ROOT
  (S
    (S
      (NP (DT This))
      (VP (VBZ is)
        (NP (DT a) (JJ good) (NN place)
          (S
            (VP (TO to)
              (VP (VB live)
                (PP (IN in)
                  (ADJP (JJ general)))))))))
    (, ,)
    (S
      (SBAR (IN if)
        (S
          (S
            (NP (PRP you))
            (VP (MD can)
              (VP (VB make)
                (NP (DT a) (NN bed)))))
          (: :)
          (S
            (NP (DT the) (NNS farms))
            (VP (MD will)
              (VP (VB solve)
                (NP (PRP$ your) (NN food) (NNS worries))
                (PP (IN for)
                  (ADVP (RB now))))))))
      (, ,)
      (NP (PRP you))
      (VP (MD can)
        (VP (VB trade)
          (PP (IN with)
            (NP (DT the) (NNS villagers))))))
    (, ,)
    (CC and)
    (S
      (SBAR (IN if)
        (S
          (NP (EX there))
          (VP (VBZ 's)
            (NP
              (NP (DT a) (NN blacksmith))
              (PRN (-LRB- -LRB-)
                (SQ
                  (VP (VB look)
                    (PP (IN for)
                      (NP
                        (NP (DT a) (NN house))
                        (PP (IN with)
                          (NP (DT a) (NN stone) (NN slab) (NN roof)))))))
                (-RRB- -RRB-))))))
      (, ,)
      (NP (PRP it))
      (VP (MD will)
        (VP (VB contain)
          (NP (DT a) (NN chest))
          (PP (IN with)
            (NP (NN bonus) (NNS items))))))
    (. .)))

nsubj(place-5, This-1)
cop(place-5, is-2)
det(place-5, a-3)
amod(place-5, good-4)
aux(live-7, to-6)
infmod(place-5, live-7)
prep_in(live-7, general-9)
mark(make-14, if-11)
nsubj(make-14, you-12)
aux(make-14, can-13)
advcl(trade-30, make-14)
det(bed-16, a-15)
dobj(make-14, bed-16)
det(farms-19, the-18)
nsubj(solve-21, farms-19)
aux(solve-21, will-20)
parataxis(make-14, solve-21)
poss(worries-24, your-22)
nn(worries-24, food-23)
dobj(solve-21, worries-24)
prep(solve-21, for-25)
dep(for-25, now-26)
nsubj(trade-30, you-28)
aux(trade-30, can-29)
ccomp(place-5, trade-30)
conj_and(place-5, trade-30)
det(villagers-33, the-32)
prep_with(trade-30, villagers-33)
mark('s-38, if-36)
expl('s-38, there-37)
advcl(contain-55, 's-38)
det(blacksmith-40, a-39)
nsubj('s-38, blacksmith-40)
dep(-LRB--41, look-42)
det(house-45, a-44)
prep_for(look-42, house-45)
det(roof-50, a-47)
nn(roof-50, stone-48)
nn(roof-50, slab-49)
prep_with(house-45, roof-50)
nsubj(contain-55, it-53)
aux(contain-55, will-54)
conj_and(place-5, contain-55)
det(chest-57, a-56)
dobj(contain-55, chest-57)
nn(items-60, bonus-59)
prep_with(contain-55, items-60)

(ROOT
  (S
    (SBAR (IN If)
      (S
        (NP (EX there))
        (VP (VBP are)
          (NP (DT no) (NN sheep))
          (ADVP (RB around)))))
    (, ,)
    (S
      (VP (VB look)
        (PP (IN for)
          (NP (`` ``)
            (NP (NN lamp) (NNS posts))
            ('' '')
            (PP (IN in)
              (NP
                (NP (DT the) (NN village))
                (: --)
                (NP (DT the) (JJ black) (NN block))))))
        (PP (IN on)
          (NP (NN top)))))
    (VP (VBZ is)
      (NP
        (NP (NN wool))
        (PRN (-LRB- -LRB-)
          (SQ
            (VP (VB break)
              (NP (PRP it))
              (PP (IN with)
                (NP (PRP$ your) (NN hand)))))
          (-RRB- -RRB-))))
    (. .)))

mark(are-3, If-1)
expl(are-3, there-2)
advcl(is-23, are-3)
det(sheep-5, no-4)
nsubj(are-3, sheep-5)
advmod(are-3, around-6)
csubj(is-23, look-8)
nn(posts-12, lamp-11)
prep_for(look-8, posts-12)
det(village-16, the-15)
prep_in(posts-12, village-16)
det(block-20, the-18)
amod(block-20, black-19)
dep(village-16, block-20)
prep_on(look-8, top-22)
attr(is-23, wool-24)
dep(-LRB--25, break-26)
dobj(break-26, it-27)
poss(hand-30, your-29)
prep_with(break-26, hand-30)

(ROOT
  (S
    (SBAR (IN If)
      (S
        (NP (PRP you))
        (VP (MD ca) (RB n't)
          (VP (VB get)
            (NP (JJ enough) (NN wool))
            (PP (IN for)
              (NP (DT a) (NN bed)))))))
    (, ,)
    (NP (PRP$ your) (JJS best) (NNS bets))
    (VP
      (VP (VBP are)
        (PRN (-LRB- -LRB-)
          (NP (JJ first) (NN choice))
          (-RRB- -RRB-)))
      (CC either)
      (VP (VBP get)
        (ADJP
          (ADJP
            (ADVP
              (ADVP
                (ADVP (RB far) (RB away))
                (PRN (-LRB- -LRB-)
                  (ADJP
                    (NP (CD 150) (NNS blocks))
                    (CC or)
                    (ADJP (RB so)))
                  (-RRB- -RRB-))
                (PP (IN from)
                  (NP (DT the) (NN village))))
              (RB before))
            (JJ nightfall))
          (, ,)
          (CC or)
          (ADJP
            (ADJP
              (ADJP (-LRB- -LRB-)
                (NP
                  (NP (JJ second))
                  (NP (JJS best)))
                (-RRB- -RRB-))
              (S
                (VP (TO to)
                  (VP (VB spend)
                    (NP
                      (NP (PRP$ your) (JJ first) (NN night))
                      (PRN (-LRB- -LRB-)
                        (NP (PRP s))
                        (-RRB- -RRB-)))
                    (PP (IN atop)
                      (NP (DT a)
                        (ADJP (RB really) (JJ tall))
                        (NN pillar)))))))
            (, ,)
            (ADJP
              (NP (CD 40) (NNS blocks))
              (JJ high))
            (CC or)
            (ADJP (JJR more)))
          (PRN (-LRB- -LRB-)
            (S
              (NP (CD 64))
              (VP (VBZ is)
                (ADJP (RB even) (JJR better))))
            (-RRB- -RRB-)))))
    (. .)))

mark(get-5, If-1)
nsubj(get-5, you-2)
aux(get-5, ca-3)
neg(get-5, n't-4)
advcl(are-15, get-5)
amod(wool-7, enough-6)
dobj(get-5, wool-7)
det(bed-10, a-9)
prep_for(get-5, bed-10)
poss(bets-14, your-12)
amod(bets-14, best-13)
nsubj(are-15, bets-14)
amod(choice-18, first-17)
dep(are-15, choice-18)
dep(are-15, either-20)
dep(nightfall-34, get-21)
advmod(away-23, far-22)
advmod(before-33, away-23)
num(blocks-26, 150-25)
dep(away-23, blocks-26)
dep(away-23, so-28)
conj_or(blocks-26, so-28)
dep(away-23, from-30)
det(village-32, the-31)
pobj(from-30, village-32)
advmod(nightfall-34, before-33)
conj(are-15, nightfall-34)
conj(are-15, second-38)
conj_or(nightfall-34, second-38)
dep(second-38, best-39)
aux(spend-42, to-41)
xcomp(second-38, spend-42)
poss(night-45, your-43)
amod(night-45, first-44)
dobj(spend-42, night-45)
dep(night-45, s-47)
det(pillar-53, a-50)
advmod(tall-52, really-51)
amod(pillar-53, tall-52)
prep_atop(spend-42, pillar-53)
num(blocks-56, 40-55)
measure(high-57, blocks-56)
conj_or(nightfall-34, high-57)
conj_or(second-38, high-57)
conj_or(nightfall-34, more-59)
conj_or(second-38, more-59)
nsubj(better-64, 64-61)
cop(better-64, is-62)
advmod(better-64, even-63)
dep(nightfall-34, better-64)

(ROOT
  (S
    (VP
      (VP (VB Look)
        (PRT (RP around))
        (PP (IN for)
          (NP
            (NP (DT a) (JJ few) (NNS things))
            (PP (IN in)
              (NP (JJ particular))))))
      (, ,)
      (PP (IN in)
        (NP
          (NP
            (NP (NN order))
            (PP (IN of)
              (NP (NN priority))))
          (PRN (: :)
            (NP
              (NP (NNS trees))
              (, ,)
              (NP
                (NP (JJ visible) (NN stone))
                (-LRB- -LRB-)
                (CC and)
                (NP
                  (NP (RB especially) (NN coal) (NN ore))
                  (, ,)
                  (SBAR
                    (WHNP (WDT which))
                    (S
                      (VP (VBZ looks)
                        (PP (IN like)
                          (NP
                            (NP (NN stone))
                            (PP (IN with)
                              (NP (JJ black) (NNS spots)))))
                        (PP (IN on)
                          (NP (PRP it)))
                        (-RRB- -RRB-))))))
              (, ,)
              (NP (NNS animals))
              (, ,)
              (CC and)
              (NP (JJ tall) (NN grass)))))))
    (. .)))

prt(Look-1, around-2)
det(things-6, a-4)
amod(things-6, few-5)
prep_for(Look-1, things-6)
prep_in(things-6, particular-8)
prep_in(Look-1, order-11)
prep_of(order-11, priority-13)
dep(order-11, trees-15)
amod(stone-18, visible-17)
dep(order-11, stone-18)
conj_and(trees-15, stone-18)
advmod(ore-23, especially-21)
nn(ore-23, coal-22)
conj_and(trees-15, ore-23)
conj_and(stone-18, ore-23)
nsubj(looks-26, ore-23)
rcmod(ore-23, looks-26)
prep_like(looks-26, stone-28)
amod(spots-31, black-30)
prep_with(stone-28, spots-31)
prep_on(looks-26, it-33)
dep(order-11, animals-36)
conj_and(trees-15, animals-36)
amod(grass-40, tall-39)
dep(order-11, grass-40)
conj_and(trees-15, grass-40)

(ROOT
  (S
    (NP (PRP$ Your) (JJ first) (NN priority))
    (VP (VBZ is)
      (S
        (VP (TO to)
          (VP
            (VP (VB find)
              (NP (DT a) (JJ small) (NN tree)))
            (, ,)
            (VP (VB bash)
              (PP (IN through)
                (NP (DT the) (NNS leaves)))
              (SBAR (IN if)
                (S
                  (VP (VBN needed)))))
            (, ,)
            (CC and)
            (VP (`` ``) (VB punch) ('' '')
              (NP (DT the) (NN wood))))))
      (SBAR (IN until)
        (S
          (NP (DT each) (NN block))
          (VP (VBZ drops)
            (PP (IN as)
              (NP (DT an) (NN item)))))))
    (. .)))

poss(priority-3, Your-1)
amod(priority-3, first-2)
nsubj(is-4, priority-3)
xsubj(find-6, priority-3)
aux(find-6, to-5)
xcomp(is-4, find-6)
det(tree-9, a-7)
amod(tree-9, small-8)
dobj(find-6, tree-9)
dobj(bash-11, tree-9)
xcomp(is-4, bash-11)
conj_and(find-6, bash-11)
det(leaves-14, the-13)
prep_through(bash-11, leaves-14)
mark(needed-16, if-15)
advcl(bash-11, needed-16)
xcomp(is-4, punch-20)
conj_and(find-6, punch-20)
det(wood-23, the-22)
dobj(punch-20, wood-23)
mark(drops-27, until-24)
det(block-26, each-25)
nsubj(drops-27, block-26)
advcl(is-4, drops-27)
det(item-30, an-29)
prep_as(drops-27, item-30)

(ROOT
  (S
    (NP (DT The) (NNS planks))
    (VP (MD will)
      (VP (VB be)
        (NP (JJ different) (NNS colors))
        (PP (VBG depending)
          (PP (IN on)
            (SBAR
              (WHNP (WP what))
              (S
                (NP
                  (NP (NN sort))
                  (PP (IN of)
                    (NP (NN wood))))
                (NP (PRP you))
                (VP (VBP have))))))))
    (. .)))

det(planks-2, The-1)
nsubj(colors-6, planks-2)
aux(colors-6, will-3)
cop(colors-6, be-4)
amod(colors-6, different-5)
dobj(have-14, what-9)
nsubj(have-14, sort-10)
prep_of(sort-10, wood-12)
nsubj(have-14, you-13)
prepc_depending_on(colors-6, have-14)

(ROOT
  (S
    (PP (IN In)
      (ADJP (JJ particular)))
    (, ,)
    (NP (NNS sticks))
    (VP (VBP do) (RB n't)
      (VP (`` ``) (VB remember) ('' '')
        (NP
          (SBAR
            (WHNP (WP what))
            (S
              (NP
                (NP (NN sort))
                (PP (IN of)
                  (NP (NN wood))))
              (NP (PRP they))
              (VP (VBD came)
                (PP (IN from))))))))
    (. .)))

prep_in(remember-8, particular-2)
nsubj(remember-8, sticks-4)
aux(remember-8, do-5)
neg(remember-8, n't-6)
rel(came-15, what-10)
nsubj(came-15, sort-11)
prep_of(sort-11, wood-13)
nsubj(came-15, they-14)
dobj(remember-8, came-15)
prep(came-15, from-16)

(ROOT
  (S
    (PP (IN In)
      (NP (NN order)
        (S
          (VP (TO to)
            (VP (VB collect)
              (NP
                (NP (NN stone)
                  (CC and)
                  (NN coal))
                (, ,)
                (NP (DT the) (JJ next) (JJ staple) (NNS resources))))))))
    (, ,)
    (NP (PRP you))
    (VP (MD will)
      (VP (VB need)
        (NP (DT a) (NN pickaxe))))
    (. .)))

prep_in(need-16, order-2)
aux(collect-4, to-3)
infmod(order-2, collect-4)
dobj(collect-4, stone-5)
dobj(collect-4, coal-7)
conj_and(stone-5, coal-7)
det(resources-12, the-9)
amod(resources-12, next-10)
amod(resources-12, staple-11)
appos(stone-5, resources-12)
nsubj(need-16, you-14)
aux(need-16, will-15)
det(pickaxe-18, a-17)
dobj(need-16, pickaxe-18)

(ROOT
  (S
    (S
      (NP (PRP$ Your) (JJ first) (NN pickaxe))
      (VP (MD will)
        (VP (VB be)
          (VP (VBN made)
            (PP (IN of)
              (NP
                (NP (NN wood))
                (, ,)
                (SBAR
                  (WHNP (WDT which))
                  (S
                    (VP (VBZ is) (RB n't)
                      (ADJP (RB very) (JJ durable)
                        (CC or)
                        (JJ fast)))))))))))
    (, ,)
    (CC but)
    (S
      (SBAR (IN until)
        (S
          (NP (PRP you))
          (VP (VBP collect)
            (NP (DT some) (NN cobblestone)))))
      (NP (PRP it))
      (VP (VBZ 's)
        (SBAR (DT all)
          (S
            (NP (PRP you))
            (VP (VBP have))))))
    (. .)))

poss(pickaxe-3, Your-1)
amod(pickaxe-3, first-2)
nsubjpass(made-6, pickaxe-3)
aux(made-6, will-4)
auxpass(made-6, be-5)
prep_of(made-6, wood-8)
nsubj(durable-14, wood-8)
nsubj(fast-16, wood-8)
cop(durable-14, is-11)
neg(durable-14, n't-12)
advmod(durable-14, very-13)
rcmod(wood-8, durable-14)
rcmod(wood-8, fast-16)
conj_or(durable-14, fast-16)
mark(collect-21, until-19)
nsubj(collect-21, you-20)
advcl('s-25, collect-21)
det(cobblestone-23, some-22)
dobj(collect-21, cobblestone-23)
nsubj('s-25, it-24)
conj_but(made-6, 's-25)
dep(have-28, all-26)
nsubj(have-28, you-27)
ccomp('s-25, have-28)

(ROOT
  (S
    (S
      (VP (TO To)
        (VP (VB make)
          (NP (DT a) (NN pickaxe)))))
    (, ,)
    (NP (PRP you))
    (VP (MD will)
      (VP (VB need)
        (S
          (VP (TO to)
            (VP (VB craft)
              (NP (DT some) (NNS sticks)))))))
    (. .)))

aux(make-2, To-1)
dep(need-8, make-2)
det(pickaxe-4, a-3)
dobj(make-2, pickaxe-4)
nsubj(need-8, you-6)
xsubj(craft-10, you-6)
aux(need-8, will-7)
aux(craft-10, to-9)
xcomp(need-8, craft-10)
det(sticks-12, some-11)
dobj(craft-10, sticks-12)

(ROOT
  (S
    (S
      (ADVP (RB Now))
      (NP (PRP you))
      (VP (MD 'll)
        (VP (VB use)
          (NP (DT some) (NNS planks)))))
    (CC and)
    (S
      (NP (DT the))
      (VP (VBZ sticks)
        (S
          (NP (PRP you))
          (ADVP (RB just))
          (VP (VBN made)
            (S
              (VP (TO to)
                (VP (VB create)
                  (NP (DT the) (JJ final) (NN product)))))))))
    (. .)))

advmod(use-4, Now-1)
nsubj(use-4, you-2)
aux(use-4, 'll-3)
det(planks-6, some-5)
dobj(use-4, planks-6)
dobj(sticks-9, planks-6)
nsubj(sticks-9, the-8)
conj_and(use-4, sticks-9)
nsubj(made-12, you-10)
xsubj(create-14, you-10)
advmod(made-12, just-11)
ccomp(sticks-9, made-12)
aux(create-14, to-13)
xcomp(made-12, create-14)
det(product-17, the-15)
amod(product-17, final-16)
dobj(create-14, product-17)

(ROOT
  (S
    (SBAR (IN Once)
      (S
        (NP (PRP you))
        (VP (VBP 've)
          (VP (VBN crafted)
            (NP (DT a) (NN pickaxe))))))
    (, ,)
    (NP (PRP you))
    (VP (MD can) (RB successfully)
      (VP (VB acquire)
        (ADJP (JJ cobblestone)
          (S
            (VP (TO to)
              (VP (VB make)
                (NP (JJR better) (NNS tools))))))))
    (. .)))

mark(crafted-4, Once-1)
nsubj(crafted-4, you-2)
aux(crafted-4, 've-3)
advcl(acquire-11, crafted-4)
det(pickaxe-6, a-5)
dobj(crafted-4, pickaxe-6)
nsubj(acquire-11, you-8)
aux(acquire-11, can-9)
advmod(acquire-11, successfully-10)
acomp(acquire-11, cobblestone-12)
aux(make-14, to-13)
xcomp(cobblestone-12, make-14)
amod(tools-16, better-15)
dobj(make-14, tools-16)

(ROOT
  (S
    (SBAR (IN If)
      (S
        (NP (PRP you))
        (VP (VBP do) (RB n't)
          (VP
            (VP (VB see)
              (NP (DT any))
              (PP (IN on)
                (NP (DT the) (NN surface))))
            (, ,)
            (VP (VB dig)
              (PRT (RP down))
              (PP (IN in)
                (NP
                  (NP (DT a) (JJ staircase) (NN fashion)
                    (CC and)
                    (NN mine))
                  (NP (DT the) (NN stone))))
              (PP (IN with)
                (NP (PRP$ your) (NN pickaxe))))))))
    (: ;)
    (NP (PRP it))
    (VP (MD will)
      (VP (VB drop)
        (PP (IN as)
          (NP (JJ cobblestone) (NNS items)))))
    (. .)))

mark(see-5, If-1)
nsubj(see-5, you-2)
aux(see-5, do-3)
neg(see-5, n't-4)
advcl(drop-27, see-5)
dobj(see-5, any-6)
det(surface-9, the-8)
prep_on(see-5, surface-9)
dep(see-5, dig-11)
prt(dig-11, down-12)
det(fashion-16, a-14)
amod(fashion-16, staircase-15)
prep_in(dig-11, fashion-16)
prep_in(dig-11, mine-18)
conj_and(fashion-16, mine-18)
det(stone-20, the-19)
dep(fashion-16, stone-20)
poss(pickaxe-23, your-22)
prep_with(dig-11, pickaxe-23)
nsubj(drop-27, it-25)
aux(drop-27, will-26)
amod(items-30, cobblestone-29)
prep_as(drop-27, items-30)

(ROOT
  (S
    (S
      (VP (VB Gather) (RB enough)
        (VP (VB cobblestone)
          (S
            (VP (TO to)
              (VP
                (VP (VB upgrade)
                  (NP (PRP$ your) (NN pickaxe)))
                (CC and)
                (VP (VB make)
                  (NP (DT a) (NN stone) (NN shovel)))))))))
    (, ,)
    (NP
      (NP
        (NP (NN axe))
        (, ,)
        (CC and)
        (NP (NN sword))
        (, ,))
      (CC and)
      (NP
        (NP (DT a) (NN furnace))
        (-LRB- -LRB-)
        (NP
          (NP (DT the) (JJ exact) (NN number))
          (PP (IN of)
            (NP
              (NP (NN cobblestone))
              (VP (VBN required)
                (S
                  (VP (TO to)
                    (VP (VB make)
                      (NP (DT these)))))))))))
    (VP (VBZ is)
      (NP (CD 17)))
    (. .) (-RRB- -RRB-)))

ccomp(17-33, Gather-1)
advmod(Gather-1, enough-2)
dep(Gather-1, cobblestone-3)
aux(upgrade-5, to-4)
xcomp(cobblestone-3, upgrade-5)
poss(pickaxe-7, your-6)
dobj(upgrade-5, pickaxe-7)
xcomp(cobblestone-3, make-9)
conj_and(upgrade-5, make-9)
det(shovel-12, a-10)
nn(shovel-12, stone-11)
dobj(make-9, shovel-12)
nsubj(17-33, axe-14)
conj_and(axe-14, sword-17)
nsubj(17-33, sword-17)
det(furnace-21, a-20)
conj_and(axe-14, furnace-21)
nsubj(17-33, furnace-21)
det(number-25, the-23)
amod(number-25, exact-24)
dep(furnace-21, number-25)
prep_of(number-25, cobblestone-27)
xsubj(make-30, cobblestone-27)
partmod(cobblestone-27, required-28)
aux(make-30, to-29)
xcomp(required-28, make-30)
dobj(make-30, these-31)
cop(17-33, is-32)

(ROOT
  (S
    (S
      (NP (PRP You))
      (VP (MD can) (RB also)
        (VP (VB craft)
          (NP
            (NP (DT a) (NN stone) (NN hoe))
            (PRN (-LRB- -LRB-)
              (CC or)
              (RB even)
              (NP (DT a) (JJ wooden) (NN one))
              (-RRB- -RRB-))))))
    (, ,)
    (CC but)
    (S
      (NP (PRP it))
      (VP (MD wo) (RB n't)
        (VP (VB be)
          (ADJP (JJ useful))
          (SBAR (IN until)
            (S
              (NP (PRP you))
              (VP (VBP start)
                (NP
                  (NP (NNS farms))
                  (PRN (-LRB- -LRB-)
                    (VP (VBN explained)
                      (PP (IN on)
                        (NP (NN day) (CD two))))
                    (-RRB- -RRB-)))))))))
    (. .)))

nsubj(craft-4, You-1)
aux(craft-4, can-2)
advmod(craft-4, also-3)
det(hoe-7, a-5)
nn(hoe-7, stone-6)
dobj(craft-4, hoe-7)
dep(one-13, or-9)
dep(one-13, even-10)
det(one-13, a-11)
amod(one-13, wooden-12)
appos(hoe-7, one-13)
nsubj(useful-21, it-17)
aux(useful-21, wo-18)
neg(useful-21, n't-19)
cop(useful-21, be-20)
conj_but(craft-4, useful-21)
mark(start-24, until-22)
nsubj(start-24, you-23)
advcl(useful-21, start-24)
dobj(start-24, farms-25)
dep(farms-25, explained-27)
prep_on(explained-27, day-29)
num(day-29, two-30)

(ROOT
  (S
    (S
      (S
        (NP (DT A) (NN stone) (NN pickaxe))
        (VP (VBZ is)
          (ADJP
            (ADJP (RBR more) (JJ durable))
            (CC and)
            (ADJP (RBR more) (JJ efficient)
              (PP (IN than)
                (NP (DT a) (JJ wooden) (NN pickaxe)))))))
      (, ,)
      (CC and)
      (S
        (NP (PRP it))
        (VP (MD can))))
    (NP (PRP mine))
    (VP (VBZ ores)
      (SBAR (IN that)
        (S
          (NP (DT a) (JJ wooden) (NN pickaxe))
          (VP (MD ca) (RB n't)))))
    (. .)))

det(pickaxe-3, A-1)
nn(pickaxe-3, stone-2)
nsubj(durable-6, pickaxe-3)
nsubj(efficient-9, pickaxe-3)
cop(durable-6, is-4)
advmod(durable-6, more-5)
dep(ores-19, durable-6)
advmod(efficient-9, more-8)
conj_and(durable-6, efficient-9)
dep(ores-19, efficient-9)
det(pickaxe-13, a-11)
amod(pickaxe-13, wooden-12)
prep_than(efficient-9, pickaxe-13)
nsubj(can-17, it-16)
conj_and(durable-6, can-17)
dep(ores-19, can-17)
nsubj(ores-19, mine-18)
complm(ca-24, that-20)
det(pickaxe-23, a-21)
amod(pickaxe-23, wooden-22)
nsubj(ca-24, pickaxe-23)
ccomp(ores-19, ca-24)
neg(ca-24, n't-25)

(ROOT
  (S
    (NP (NNS Shovels))
    (VP (VBP are)
      (VP
        (ADVP (RB mainly))
        (VBN used)
        (S
          (VP (TO to)
            (VP (VB break)
              (NP
                (NP (NN dirt))
                (, ,)
                (NP (NN grass))
                (, ,)
                (NP (NN sand))
                (, ,)
                (NP (NN clay))
                (, ,)
                (CC and)
                (NP
                  (NP (JJ gravel) (NNS blocks))
                  (ADJP (JJR quicker)
                    (PP (IN than)
                      (PP (IN by)
                        (NP (NN hand))))))))))))
    (. .)))

nsubjpass(used-4, Shovels-1)
xsubj(break-6, Shovels-1)
auxpass(used-4, are-2)
advmod(used-4, mainly-3)
aux(break-6, to-5)
xcomp(used-4, break-6)
dobj(break-6, dirt-7)
dobj(break-6, grass-9)
conj_and(dirt-7, grass-9)
dobj(break-6, sand-11)
conj_and(dirt-7, sand-11)
dobj(break-6, clay-13)
conj_and(dirt-7, clay-13)
amod(blocks-17, gravel-16)
dobj(break-6, blocks-17)
conj_and(dirt-7, blocks-17)
amod(blocks-17, quicker-18)
prep(quicker-18, than-19)
dep(than-19, by-20)
pobj(by-20, hand-21)

(ROOT
  (S
    (ADVP (RB Now))
    (, ,)
    (NP (PRP you))
    (VP (MD should)
      (VP (VB gather)
        (NP (JJR more) (NN wood))
        (, ,)
        (S
          (VP (VBG using)
            (NP (PRP$ your) (JJ new) (NN stone) (NN axe))))))
    (. .)))

advmod(gather-5, Now-1)
nsubj(gather-5, you-3)
aux(gather-5, should-4)
amod(wood-7, more-6)
dobj(gather-5, wood-7)
xcomp(gather-5, using-9)
poss(axe-13, your-10)
amod(axe-13, new-11)
nn(axe-13, stone-12)
dobj(using-9, axe-13)

(ROOT
  (S
    (SBAR (IN If)
      (S
        (NP (PRP you))
        (VP (VBP happen)
          (PP (IN across)
            (NP
              (NP (DT a) (JJ coal-like) (NN ore))
              (PP (IN with)
                (NP
                  (NP (NN tan) (NNS specks))
                  (PP (IN in)
                    (NP
                      (NP (NN place))
                      (PP (IN of)
                        (NP (DT the) (JJ black))))))))))))
    (, ,)
    (NP (PRP you))
    (VP (VBP have)
      (VP (VBN found)
        (NP (DT some) (NN iron))))
    (. .)))

mark(happen-3, If-1)
nsubj(happen-3, you-2)
advcl(found-19, happen-3)
det(ore-7, a-5)
amod(ore-7, coal-like-6)
prep_across(happen-3, ore-7)
nn(specks-10, tan-9)
prep_with(ore-7, specks-10)
det(black-15, the-14)
prep_in_place_of(specks-10, black-15)
nsubj(found-19, you-17)
aux(found-19, have-18)
det(iron-21, some-20)
dobj(found-19, iron-21)

(ROOT
  (S
    (SBAR (IN As)
      (S
        (NP (PRP it))
        (VP (VBZ is)
          (VP (VBN made)
            (PP (IN with)
              (NP (NN cobblestone)))))))
    (, ,)
    (NP (PRP you))
    (VP (MD will)
      (VP (VB have)
        (S
          (VP (TO to)
            (VP (VB use)
              (NP (PRP$ your) (NN pickaxe))
              (S
                (VP (TO to)
                  (VP (VB collect)
                    (NP (PRP it))
                    (SBAR (IN if)
                      (S
                        (NP (PRP you))
                        (VP (VBP wish)
                          (S
                            (VP (TO to)
                              (VP (VB relocate)
                                (NP (PRP$ your) (NN furnace))))))))))))))))
    (. .)))

mark(made-4, As-1)
nsubjpass(made-4, it-2)
auxpass(made-4, is-3)
advcl(have-10, made-4)
prep_with(made-4, cobblestone-6)
nsubj(have-10, you-8)
xsubj(use-12, you-8)
aux(have-10, will-9)
aux(use-12, to-11)
xcomp(have-10, use-12)
poss(pickaxe-14, your-13)
dobj(use-12, pickaxe-14)
aux(collect-16, to-15)
xcomp(use-12, collect-16)
dobj(collect-16, it-17)
mark(wish-20, if-18)
nsubj(wish-20, you-19)
xsubj(relocate-22, you-19)
advcl(collect-16, wish-20)
aux(relocate-22, to-21)
xcomp(wish-20, relocate-22)
poss(furnace-24, your-23)
dobj(relocate-22, furnace-24)

(ROOT
  (S
    (S
      (VP (VBN Ration)
        (PRT (RP out))
        (NP
          (NP (DT a) (NN piece))
          (PP (IN of)
            (NP (NN coal\/charcoal))))
        (PP (IN for)
          (NP (DT the) (NN food)))))
    (, ,)
    (CC and)
    (S
      (VP (VB cook)
        (NP (DT the) (NN food))
        (ADVP (RB just))
        (PP (IN like)
          (S
            (VP (VBG smelting)
              (NP
                (NP (DT the) (NN wood))
                (PP (IN above) (: :)
                  (NP
                    (NP (NN food))
                    (PP (IN in)
                      (NP
                        (NP (DT the) (JJ upper) (NN input) (NN box))
                        (, ,)
                        (NP
                          (NP (NN fuel))
                          (PRN (-LRB- -LRB-)
                            (NP (NN coal))
                            (-RRB- -RRB-))))))))
              (PP (IN in)
                (NP (DT the) (JJR lower) (NN one))))))))
    (. .)))

prt(Ration-1, out-2)
det(piece-4, a-3)
dobj(Ration-1, piece-4)
prep_of(piece-4, coal\/charcoal-6)
det(food-9, the-8)
prep_for(Ration-1, food-9)
conj_and(Ration-1, cook-12)
det(food-14, the-13)
dobj(cook-12, food-14)
advmod(cook-12, just-15)
prepc_like(cook-12, smelting-17)
det(wood-19, the-18)
dobj(smelting-17, wood-19)
prep_above(wood-19, food-22)
det(box-27, the-24)
amod(box-27, upper-25)
nn(box-27, input-26)
prep_in(food-22, box-27)
appos(box-27, fuel-29)
appos(fuel-29, coal-31)
det(one-36, the-34)
amod(one-36, lower-35)
prep_in(smelting-17, one-36)

(ROOT
  (S
    (NP
      (NP
        (NP (NNP Use))
        (NP
          (NP (DT the) (NN rest))
          (PRN (-LRB- -LRB-)
            (PP
              (ADVP (RB up)
                (PP (TO to)
                  (NP (CD 8))))
              (IN for)
              (NP (RB now)))
            (-RRB- -RRB-))))
      (PP (IN of)
        (NP
          (NP (DT the) (NN coal)
            (CC or)
            (NN charcoal))
          (PP (IN with)
            (NP (DT some))))))
    (VP (VBZ sticks)
      (S
        (VP (TO to)
          (VP (VB craft)
            (PP (IN into)
              (NP (NNS torches)))))))
    (. .)))

nsubj(sticks-18, Use-1)
xsubj(craft-20, Use-1)
det(rest-3, the-2)
dep(Use-1, rest-3)
dep(for-8, up-5)
dep(up-5, to-6)
pobj(to-6, 8-7)
dep(rest-3, for-8)
pobj(for-8, now-9)
det(coal-13, the-12)
prep_of(Use-1, coal-13)
prep_of(Use-1, charcoal-15)
conj_or(coal-13, charcoal-15)
prep_with(coal-13, some-17)
aux(craft-20, to-19)
xcomp(sticks-18, craft-20)
prep_into(craft-20, torches-22)

(ROOT
  (S
    (NP (PRP One))
    (VP (VBP log)
      (NP (NNS crafts))
      (PP (IN into)
        (NP (CD 8) (NNS sticks)))
      (S
        (VP (TO to)
          (VP (VB match)
            (NP
              (NP (CD 8) (NNS pieces))
              (PP (IN of)
                (NP (NN coal)
                  (CC or)
                  (NN charcoal)))
              (, ,)
              (VP (VBG producing)
                (NP (CD 32) (NNS torches))))
            (SBAR
              (S (-LRB- -LRB-)
                (NP (PDT half) (DT a))
                (VP
                  (S
                    (VP (VB stack))))))))))
    (. .) (-RRB- -RRB-)))

nsubj(log-2, One-1)
xsubj(match-8, One-1)
dobj(log-2, crafts-3)
num(sticks-6, 8-5)
prep_into(log-2, sticks-6)
aux(match-8, to-7)
xcomp(log-2, match-8)
num(pieces-10, 8-9)
dobj(match-8, pieces-10)
prep_of(pieces-10, coal-12)
prep_of(pieces-10, charcoal-14)
conj_or(coal-12, charcoal-14)
partmod(pieces-10, producing-16)
num(torches-18, 32-17)
dobj(producing-16, torches-18)
predet(a-21, half-20)
nsubj(stack-22, a-21)
dep(match-8, stack-22)

(ROOT
  (S
    (PP (IN Throughout)
      (NP (DT the) (NN game)))
    (, ,)
    (NP (PRP you))
    (VP (MD will)
      (VP (VB be)
        (S
          (VP (VBG crafting)
            (NP
              (ADJP (JJR more)
                (CC and)
                (JJR more))
              (NNS torches))))
        (SBAR (IN as)
          (S
            (NP (PRP you))
            (VP
              (VP (VBP need)
                (NP (PRP them)))
              (, ,) (RB so)
              (VP
                (ADVP (RB always))
                (VBP keep)
                (NP
                  (NP (DT some) (NN coal)
                    (CC or)
                    (NN charcoal))
                  (PP (IN at)
                    (NP (NN hand))))))))))
    (. .)))

det(game-3, the-2)
prep_throughout(be-7, game-3)
nsubj(be-7, you-5)
aux(be-7, will-6)
xcomp(be-7, crafting-8)
amod(torches-12, more-9)
conj_and(more-9, more-11)
amod(torches-12, more-11)
dobj(crafting-8, torches-12)
mark(need-15, as-13)
nsubj(need-15, you-14)
advcl(be-7, need-15)
dobj(need-15, them-16)
advmod(need-15, so-18)
advmod(keep-20, always-19)
dep(need-15, keep-20)
det(coal-22, some-21)
dobj(keep-20, coal-22)
dobj(keep-20, charcoal-24)
conj_or(coal-22, charcoal-24)
prep_at(coal-22, hand-26)

(ROOT
  (S
    (VP
      (VP (VB Keep)
        (NP (PRP$ your) (NN stone) (NN sword))
        (PP (IN in)
          (NP (NN hand))))
      (CC and)
      (VP (VB whack)
        (NP (PRP them))
        (ADVP
          (ADVP (RB as) (RB soon))
          (SBAR (IN as)
            (S
              (NP (PRP they))
              (VP (VBP come)
                (PP (IN into)
                  (NP (NN reach)))))))
        (, ,)
        (SBAR (IN before)
          (S
            (NP (PRP they))
            (VP (VBP get)
              (PRT (RP up))
              (PP (TO to)
                (NP (PRP you)))
              (: -)
              (S
                (VP (VBG attacking)
                  (SBAR
                    (S
                      (NP (PRP them))
                      (VP (MD will)
                        (VP (VB knock)
                          (NP (PRP them))
                          (ADVP (RB back) (RB down)))))))))))))
    (. .)))

poss(sword-4, your-2)
nn(sword-4, stone-3)
dobj(Keep-1, sword-4)
prep_in(Keep-1, hand-6)
conj_and(Keep-1, whack-8)
dobj(whack-8, them-9)
advmod(soon-11, as-10)
advmod(whack-8, soon-11)
mark(come-14, as-12)
nsubj(come-14, they-13)
dep(soon-11, come-14)
prep_into(come-14, reach-16)
mark(get-20, before-18)
nsubj(get-20, they-19)
advcl(whack-8, get-20)
prt(get-20, up-21)
prep_to(get-20, you-23)
parataxis(get-20, attacking-25)
xcomp(get-20, attacking-25)
nsubj(knock-28, them-26)
aux(knock-28, will-27)
ccomp(attacking-25, knock-28)
dobj(knock-28, them-29)
advmod(down-31, back-30)
advmod(knock-28, down-31)

(ROOT
  (S
    (NP (PRP You))
    (VP (MD can)
      (ADVP (RB also) (RB simply))
      (VP (VB build)
        (NP (DT a)
          (ADJP (CD three) (NN block))
          (JJ high) (NN hut))
        (PP (IN from)
          (NP (DT any) (NN material)))
        (, ,)
        (PP (IN for)
          (NP
            (NP (NN example) (NN cobblestone))
            (, ,)
            (NP (NN wood)
              (CC or)
              (NN dirt))))))
    (. .)))

nsubj(build-5, You-1)
aux(build-5, can-2)
advmod(simply-4, also-3)
advmod(build-5, simply-4)
det(hut-10, a-6)
dep(block-8, three-7)
amod(hut-10, block-8)
amod(hut-10, high-9)
dobj(build-5, hut-10)
det(material-13, any-12)
prep_from(build-5, material-13)
nn(cobblestone-17, example-16)
prep_for(build-5, cobblestone-17)
appos(cobblestone-17, wood-19)
appos(cobblestone-17, dirt-21)
conj_or(wood-19, dirt-21)

(ROOT
  (S
    (NP (DT Some) (JJ natural) (NNS extensions))
    (VP (VBP include)
      (NP
        (NP (DT a) (JJ back) (NN door))
        (, ,)
        (NP (NNS windows))
        (, ,)
        (NP (DT a) (VBG surrounding) (NN fence))
        (, ,)
        (CC and)
        (NP
          (NP (RB even) (NNS traps))
          (PP (IN for)
            (NP (NNS monsters))))))
    (. .)))

det(extensions-3, Some-1)
amod(extensions-3, natural-2)
nsubj(include-4, extensions-3)
det(door-7, a-5)
amod(door-7, back-6)
dobj(include-4, door-7)
dobj(include-4, windows-9)
conj_and(door-7, windows-9)
det(fence-13, a-11)
amod(fence-13, surrounding-12)
dobj(include-4, fence-13)
conj_and(door-7, fence-13)
advmod(traps-17, even-16)
dobj(include-4, traps-17)
conj_and(door-7, traps-17)
prep_for(traps-17, monsters-19)

(ROOT
  (S
    (S
      (NP (NNP Extreme) (NNPS Hills) (NNS biomes))
      (VP (MD will)
        (VP (VB have)
          (NP (NNS caves))
          (PP (IN inside)
            (NP (NNS mountains))))))
    (, ,)
    (CC but)
    (S
      (NP (DT these))
      (VP (VBP are)
        (SBAR
          (ADVP (RB generally) (RB not))
          (WHNP (WP what))
          (S
            (NP (PRP you))
            (VP (VBP want))))
        (, ,)
        (SBAR (IN because)
          (S
            (NP (JJ only) (NN coal) (NN ore))
            (VP (MD will)
              (VP (VB appear)
                (PP (IN above)
                  (NP (NN sea) (NN level)))
                (PRN (-LRB- -LRB-)
                  (S
                    (NP (NNP Y))
                    (VP (JJ =)
                      (NP (CD 64))))
                  (-RRB- -RRB-))))))))
    (. .)))

nn(biomes-3, Extreme-1)
nn(biomes-3, Hills-2)
nsubj(have-5, biomes-3)
aux(have-5, will-4)
dobj(have-5, caves-6)
dobj(are-12, caves-6)
prep_inside(have-5, mountains-8)
nsubj(are-12, these-11)
conj_but(have-5, are-12)
advmod(not-14, generally-13)
neg(want-17, not-14)
dep(want-17, what-15)
nsubj(want-17, you-16)
ccomp(are-12, want-17)
mark(appear-24, because-19)
amod(ore-22, only-20)
nn(ore-22, coal-21)
nsubj(appear-24, ore-22)
aux(appear-24, will-23)
advcl(are-12, appear-24)
nn(level-27, sea-26)
prep_above(appear-24, level-27)
nsubj(=-30, Y-29)
parataxis(appear-24, =-30)
dobj(=-30, 64-31)

(ROOT
  (S
    (S
      (NP (DT This))
      (VP (VBZ is)
        (NP
          (NP (DT the) (JJ only) (NN ore))
          (SBAR
            (WHNP (WDT that))
            (S
              (VP (VBZ appears)
                (PP (IN above)
                  (NP (NN sea) (NN level)))
                (PRN (-LRB- -LRB-)
                  (S
                    (ADVP (RB anywhere))
                    (NP (EX there))
                    (VP (VBZ is)
                      (NP (NN stone))))
                  (-RRB- -RRB-))))))))
    (, ,)
    (CC and)
    (S
      (NP (PRP it))
      (VP (VBZ is)
        (ADJP (RB often) (JJ visible)
          (PP
            (PP (IN in)
              (NP
                (NP (NN stone) (NNS outcrops))
                (PP (IN on)
                  (NP (DT the) (NN surface)))))
            (CC or)
            (ADVP (RB even))
            (PP (IN on)
              (NP (NNS mountains)))))))
    (. .)))

nsubj(ore-5, This-1)
cop(ore-5, is-2)
det(ore-5, the-3)
amod(ore-5, only-4)
nsubj(appears-7, ore-5)
rcmod(ore-5, appears-7)
nn(level-10, sea-9)
prep_above(appears-7, level-10)
advmod(is-14, anywhere-12)
expl(is-14, there-13)
parataxis(appears-7, is-14)
nsubj(is-14, stone-15)
nsubj(visible-22, it-19)
nsubj(visible-22', it-19)
cop(visible-22, is-20)
advmod(visible-22, often-21)
conj_and(ore-5, visible-22)
conj_and(ore-5, visible-22')
conj_or(visible-22, visible-22')
nn(outcrops-25, stone-24)
prep_in(visible-22, outcrops-25)
det(surface-28, the-27)
prep_on(outcrops-25, surface-28)
conj(visible-22, even-30)
prep_on(visible-22', mountains-32)

(ROOT
  (S
    (CONJP (RB Gather) (IN as))
    (SINV
      (NP (RB much))
      (PP (IN of)
        (NP (PRP it)))
      (PP (IN as)
        (ADJP (JJ possible))))
    (, ,)
    (CC but)
    (S
      (NP (PRP it))
      (VP (VBZ needs)
        (NP
          (NP (DT a) (NN stone) (NN pickaxe))
          (CC or)
          (NP (JJR better)))
        (S
          (VP (TO to)
            (VP (NN mine)
              (NP (PRP it))
              (, ,)
              (ADVP (RB so))))
          (VP (VB be)
            (ADJP (JJ careful)
              (S (RB not)
                (VP (TO to)
                  (VP (VB use)
                    (NP (DT a) (JJ wooden) (NN pick))
                    (PP (IN on)
                      (NP (PRP it)))))))))))
    (. .)))

cc(needs-11, Gather-1)
dep(needs-11, much-3)
dep(much-3, of-4)
pobj(of-4, it-5)
dep(much-3, as-6)
pobj(as-6, possible-7)
cc(needs-11, but-9)
nsubj(needs-11, it-10)
det(pickaxe-14, a-12)
nn(pickaxe-14, stone-13)
dobj(needs-11, pickaxe-14)
dobj(needs-11, better-16)
conj_or(pickaxe-14, better-16)
aux(mine-18, to-17)
xcomp(needs-11, mine-18)
dobj(mine-18, it-19)
advmod(mine-18, so-21)
cop(careful-23, be-22)
pred(mine-18, careful-23)
neg(use-26, not-24)
aux(use-26, to-25)
dep(careful-23, use-26)
det(pick-29, a-27)
amod(pick-29, wooden-28)
dobj(use-26, pick-29)
prep_on(use-26, it-31)

(ROOT
  (S
    (SBAR (IN Once)
      (S
        (NP (PRP you))
        (VP (VBP have)
          (NP (DT some) (NN iron) (NN ore)))))
    (, ,)
    (VP (VB make)
      (NP (DT a) (NN furnace))
      (S
        (VP (TO to)
          (VP (VBN smelt)
            (NP (PRP it))
            (PP (IN into)
              (NP (NN iron) (NNS ingots)))
            (, ,)
            (SBAR (IN that)
              (S
                (NP (PRP you))
                (VP (MD can) (RB then)
                  (VP (VB craft)
                    (PP (IN into)
                      (NP (JJ other) (NNS items)))))))))))
    (. .)))

mark(have-3, Once-1)
nsubj(have-3, you-2)
advcl(make-8, have-3)
det(ore-6, some-4)
nn(ore-6, iron-5)
dobj(have-3, ore-6)
det(furnace-10, a-9)
dobj(make-8, furnace-10)
aux(smelt-12, to-11)
xcomp(make-8, smelt-12)
dobj(smelt-12, it-13)
nn(ingots-16, iron-15)
prep_into(smelt-12, ingots-16)
complm(craft-22, that-18)
nsubj(craft-22, you-19)
aux(craft-22, can-20)
advmod(craft-22, then-21)
ccomp(smelt-12, craft-22)
amod(items-25, other-24)
prep_into(craft-22, items-25)

(ROOT
  (S
    (NP
      (NP
        (NP
          (NP (NNP First))
          (PP (IN of)
            (NP (DT all) (NN craft))))
        (NP (DT a) (NN pickaxe)))
      (, ,)
      (NP (DT a) (NN sword))
      (, ,)
      (CC and)
      (NP
        (NP (DT a) (NN bucket))
        (PRN (-LRB- -LRB-)
          (SQ
            (VP (VB fill)
              (NP (PRP it))
              (PP (IN with)
                (NP (NN water)))))
          (-RRB- -RRB-)))
      (, ,))
    (ADVP (RB then))
    (VP (VB craft)
      (NP (NN iron) (NN armor)))
    (. .)))

nsubj(craft-22, First-1)
det(craft-4, all-3)
prep_of(First-1, craft-4)
det(pickaxe-6, a-5)
dep(First-1, pickaxe-6)
det(sword-9, a-8)
conj_and(First-1, sword-9)
nsubj(craft-22, sword-9)
det(bucket-13, a-12)
conj_and(First-1, bucket-13)
nsubj(craft-22, bucket-13)
dep(-LRB--14, fill-15)
dobj(fill-15, it-16)
prep_with(fill-15, water-18)
advmod(craft-22, then-21)
nn(armor-24, iron-23)
dobj(craft-22, armor-24)

(ROOT
  (S
    (SBAR (IN If)
      (S
        (NP (PRP you))
        (VP (VBP have)
          (ADJP (JJ extra)))))
    (, ,)
    (VP (VB go)
      (PRT (RP on))
      (S
        (VP (TO to)
          (VP (VB make)
            (NP
              (NP (NNS shears))
              (, ,)
              (NP
                (NP (DT another) (NN bucket))
                (PRN (-LRB- -LRB-)
                  (S
                    (VP (TO to)
                      (VP (VB hold)
                        (NP
                          (NP (DT a) (JJ second) (NN water) (NN source))
                          (CC or)
                          (NP (JJ stray) (NN lava))))))
                  (-RRB- -RRB-)))
              (, ,)
              (CC and)
              (ADVP (RB perhaps))
              (NP
                (NP (DT an) (NN iron) (NN shovel))
                (CC or)
                (NP (JJ other) (NNS tools))))))))
    (. .)))

mark(extra-4, If-1)
nsubj(extra-4, you-2)
dep(extra-4, have-3)
advcl(go-6, extra-4)
prt(go-6, on-7)
aux(make-9, to-8)
xcomp(go-6, make-9)
dobj(make-9, shears-10)
det(bucket-13, another-12)
dobj(make-9, bucket-13)
conj_and(shears-10, bucket-13)
aux(hold-16, to-15)
dep(bucket-13, hold-16)
det(source-20, a-17)
amod(source-20, second-18)
nn(source-20, water-19)
dobj(hold-16, source-20)
amod(lava-23, stray-22)
dobj(hold-16, lava-23)
conj_or(source-20, lava-23)
dobj(make-9, perhaps-27)
advmod(shears-10, perhaps-27)
conj_and(shears-10, perhaps-27)
det(shovel-30, an-28)
nn(shovel-30, iron-29)
dobj(make-9, shovel-30)
conj_and(shears-10, shovel-30)
amod(tools-33, other-32)
conj_and(shears-10, tools-33)
conj_or(shovel-30, tools-33)

(ROOT
  (S
    (NP
      (NP (NNP Gold))
      (CC and)
      (NP (NN redstone)))
    (VP (VBP need)
      (NP (DT an) (NN iron) (NN pickaxe))
      (PP (TO to)
        (NP (NN mine))))
    (. .)))

nsubj(need-4, Gold-1)
conj_and(Gold-1, redstone-3)
nsubj(need-4, redstone-3)
det(pickaxe-7, an-5)
nn(pickaxe-7, iron-6)
dobj(need-4, pickaxe-7)
prep_to(need-4, mine-9)

(ROOT
  (S (-LRB- -LRB-)
    (NP (NNP Lapis))
    (VP (MD can)
      (VP (VB be)
        (VP (VBN mined)
          (PP (IN with)
            (NP (DT a) (NN stone) (NN pickaxe))))))
    (. .)))

nsubjpass(mined-5, Lapis-2)
aux(mined-5, can-3)
auxpass(mined-5, be-4)
det(pickaxe-9, a-7)
nn(pickaxe-9, stone-8)
prep_with(mined-5, pickaxe-9)

(ROOT
  (S
    (SBAR (IN Once)
      (S
        (NP (PRP you))
        (VP (VBP find)
          (NP (DT some) (NN sugar) (NN cane)))))
    (, ,)
    (NP (PRP you))
    (VP (MD can)
      (VP (VB add)
        (NP
          (NP (DT a) (NN map))
          (PRN (-LRB- -LRB-)
            (NP (NN paper)
              (CC +)
              (NNS compass))
            (-RRB- -RRB-)))
        (S
          (VP (TO to)
            (VP
              (VP (VB keep)
                (NP
                  (NP (NN track))
                  (PP (IN of)
                    (NP (PRP$ your) (NNS explorations)))))
              (CC and)
              (VP (VB help)
                (VP (VB avoid)
                  (VP (VBG getting)
                    (VP (VBN lost))))))))))
    (. .)))

mark(find-3, Once-1)
nsubj(find-3, you-2)
advcl(add-10, find-3)
det(cane-6, some-4)
nn(cane-6, sugar-5)
dobj(find-3, cane-6)
nsubj(add-10, you-8)
aux(add-10, can-9)
det(map-12, a-11)
dobj(add-10, map-12)
appos(map-12, paper-14)
appos(map-12, compass-16)
conj_+(paper-14, compass-16)
aux(keep-19, to-18)
xcomp(add-10, keep-19)
dobj(keep-19, track-20)
dobj(help-25, track-20)
poss(explorations-23, your-22)
prep_of(track-20, explorations-23)
xcomp(add-10, help-25)
conj_and(keep-19, help-25)
aux(lost-28, avoid-26)
auxpass(lost-28, getting-27)
dep(help-25, lost-28)

(ROOT
  (S
    (NP (DT The) (NN ore))
    (VP
      (VP (MD can)
        (VP (VB be)
          (VP (VBN found)
            (PP (IN at)
              (NP
                (NP
                  (NP (DT the) (JJ very) (NN bottom))
                  (PP (IN of)
                    (NP (DT the) (NN world))))
                (, ,)
                (NP
                  (NP (DT the) (JJ bottom) (CD 15) (NNS layers))
                  (PP (IN of)
                    (NP (DT the) (NN map)))))))))
      (, ,)
      (CC and)
      (VP (VBZ requires)
        (NP
          (NP (DT an) (NN iron) (NN pickaxe))
          (PP (TO to)
            (NP (NN mine))))))
    (. .)))

det(ore-2, The-1)
nsubjpass(found-5, ore-2)
nsubjpass(requires-23, ore-2)
aux(found-5, can-3)
auxpass(found-5, be-4)
det(bottom-9, the-7)
amod(bottom-9, very-8)
prep_at(found-5, bottom-9)
det(world-12, the-11)
prep_of(bottom-9, world-12)
det(layers-17, the-14)
amod(layers-17, bottom-15)
num(layers-17, 15-16)
appos(bottom-9, layers-17)
det(map-20, the-19)
prep_of(layers-17, map-20)
conj_and(found-5, requires-23)
det(pickaxe-26, an-24)
nn(pickaxe-26, iron-25)
dobj(requires-23, pickaxe-26)
prep_to(pickaxe-26, mine-28)

(ROOT
  (S
    (S
      (NP (JJ Emerald) (NN ore))
      (VP (VBZ is)
        (VP (VBN found)
          (PP (IN at)
            (NP (DT the) (JJ same) (NNS depths)))
          (PP (IN as)
            (NP (NN gold) (NN ore))))))
    (, ,)
    (CC and)
    (SINV
      (ADVP (RB likewise))
      (VP (VBZ requires))
      (NP (DT an) (NN iron) (NN pickaxe)))
    (. .)))

amod(ore-2, Emerald-1)
nsubjpass(found-4, ore-2)
auxpass(found-4, is-3)
det(depths-8, the-6)
amod(depths-8, same-7)
prep_at(found-4, depths-8)
nn(ore-11, gold-10)
prep_as(found-4, ore-11)
advmod(requires-15, likewise-14)
conj_and(found-4, requires-15)
det(pickaxe-18, an-16)
nn(pickaxe-18, iron-17)
nsubj(requires-15, pickaxe-18)

(ROOT
  (S
    (VP (VBZ Collect)
      (NP
        (NP (JJR more) (NN wood))
        (, ,)
        (NP (NN coal))
        (, ,)
        (CC and)
        (NP
          (NP (NN iron))
          (PP (IN for)
            (NP (VBG crafting))))))
    (. .)))

amod(wood-3, more-2)
dobj(Collect-1, wood-3)
dobj(Collect-1, coal-5)
conj_and(wood-3, coal-5)
dobj(Collect-1, iron-8)
conj_and(wood-3, iron-8)
prep_for(iron-8, crafting-10)

(ROOT
  (S
    (NP (PRP You))
    (VP (VBP need)
      (NP
        (NP (DT this))
        (PP (IN for)
          (NP
            (NP (NNS bows))
            (, ,)
            (NP (NN fishing) (NNS rods))
            (, ,)
            (CC and)
            (NP (NNS leads))))))
    (. .)))

nsubj(need-2, You-1)
dobj(need-2, this-3)
prep_for(this-3, bows-5)
nn(rods-8, fishing-7)
prep_for(this-3, rods-8)
conj_and(bows-5, rods-8)
prep_for(this-3, leads-11)
conj_and(bows-5, leads-11)

(ROOT
  (S
    (SBAR (IN If)
      (S
        (NP (PRP you))
        (ADVP (RB still))
        (VP (VBP have)
          (ADVP (RB n't))
          (VP (VBN found)
            (NP (NN sheep))))))
    (, ,)
    (NP (CD 12) (NN string))
    (VP (MD can)
      (VP (VB be)
        (VP (VBN crafted)
          (PP (IN into)
            (NP (DT the) (CD 3) (NN wool)))
          (SBAR
            (S
              (NP (PRP you))
              (VP (VBP need)
                (PP (IN for)
                  (NP (DT a) (NN bed)))))))))
    (. .)))

mark(found-6, If-1)
nsubj(found-6, you-2)
advmod(found-6, still-3)
aux(found-6, have-4)
neg(found-6, n't-5)
advcl(crafted-13, found-6)
dobj(found-6, sheep-7)
num(string-10, 12-9)
nsubjpass(crafted-13, string-10)
aux(crafted-13, can-11)
auxpass(crafted-13, be-12)
det(wool-17, the-15)
num(wool-17, 3-16)
prep_into(crafted-13, wool-17)
nsubj(need-19, you-18)
ccomp(crafted-13, need-19)
det(bed-22, a-21)
prep_for(need-19, bed-22)

(ROOT
  (NP
    (NP
      (NP (JJ Gather) (NN sugar) (NN cane))
      (PP (IN for)
        (NP (NNS maps)
          (CC and)
          (NNS books))))
    (S (-LRB- -LRB-)
      (NP (PRP you))
      (VP (MD will) (RB also)
        (VP (VB need)
          (NP (NN iron)
            (CC and)
            (NN redstone))
          (PP (IN for)
            (NP
              (NP (NNS maps))
              (, ,)
              (CC and)
              (NP
                (NP (NN leather))
                (PP (IN for)
                  (NP (NNS books))))
              (-RRB- -RRB-)))))
      (. .))))

amod(cane-3, Gather-1)
nn(cane-3, sugar-2)
prep_for(cane-3, maps-5)
prep_for(cane-3, books-7)
conj_and(maps-5, books-7)
nsubj(need-12, you-9)
aux(need-12, will-10)
advmod(need-12, also-11)
dep(cane-3, need-12)
dobj(need-12, iron-13)
dobj(need-12, redstone-15)
conj_and(iron-13, redstone-15)
prep_for(need-12, maps-17)
prep_for(need-12, leather-20)
conj_and(maps-17, leather-20)
prep_for(leather-20, books-22)

(ROOT
  (S
    (S
      (NP
        (NP (NNS Cows))
        (, ,)
        (NP (NNS mooshrooms))
        (, ,)
        (CC and)
        (NP (NN sheep)))
      (VP (VBP eat)
        (NP (NN wheat))))
    (PRN (, ,)
      (S
        (NP (NNS pigs))
        (VP (VBP eat)
          (ADJP (JJ carrots))
          (PRN (-LRB- -LRB-)
            (S
              (NP (PRP you))
              (ADVP (RB probably))
              (VP (MD wo) (RB n't)
                (VP (VB have)
                  (NP (DT these))
                  (PP (IN at)
                    (ADJP (JJ first))))))
            (-RRB- -RRB-))))
      (, ,))
    (CC and)
    (S
      (NP (NNS chickens))
      (VP (VBP eat)
        (NP
          (NP (NNS seeds))
          (PRN (-LRB- -LRB-)
            (S
              (NP (PRP you))
              (VP (VBP 've)
                (ADVP (RB probably))
                (VP (VBN picked)
                  (X (DT some))
                  (PRT (RP up))
                  (PP (RB already) (IN from)
                    (S
                      (VP (VBG breaking)
                        (NP (NN grass))))))))
            (-RRB- -RRB-)))))
    (. .)))

nsubj(eat-7, Cows-1)
conj_and(Cows-1, mooshrooms-3)
nsubj(eat-7, mooshrooms-3)
conj_and(Cows-1, sheep-6)
nsubj(eat-7, sheep-6)
dobj(eat-7, wheat-8)
nsubj(carrots-12, pigs-10)
dep(carrots-12, eat-11)
dep(eat-7, carrots-12)
nsubj(have-18, you-14)
advmod(have-18, probably-15)
aux(have-18, wo-16)
neg(have-18, n't-17)
parataxis(carrots-12, have-18)
dobj(have-18, these-19)
prep_at(have-18, first-21)
nsubj(eat-26, chickens-25)
conj_and(eat-7, eat-26)
dobj(eat-26, seeds-27)
nsubj(picked-32, you-29)
aux(picked-32, 've-30)
advmod(picked-32, probably-31)
dep(seeds-27, picked-32)
dep(picked-32, some-33)
prt(picked-32, up-34)
dep(picked-32, already-35)
prepc_from(picked-32, breaking-37)
dobj(breaking-37, grass-38)

(ROOT
  (S
    (NP (NN Fishing))
    (VP (MD will)
      (VP (VB be)
        (NP
          (NP
            (ADJP
              (ADJP
                (NP
                  (QP (IN about) (CD 20))
                  (NN %))
                (JJR faster))
              (SBAR
                (WHADVP (WRB when))
                (S
                  (S
                    (NP (PRP it))
                    (VP (VBZ 's)
                      (VP (VBG raining))))
                  (, ,)
                  (CC and)
                  (S
                    (NP (NN fishing))
                    (VP (MD will) (RB occasionally)
                      (VP (VB get)
                        (NP (PRP you))))))))
            (NX
              (NX (NNS saddles))
              (CC and)
              (NX
                (NX (NN name) (NNS tags))
                (PRN (-LRB- -LRB-)
                  (ADVP (RB otherwise))
                  (ADJP (RB quite) (JJ hard)
                    (S
                      (VP (TO to)
                        (VP (VB find)))))
                  (-RRB- -RRB-)))))
          (, ,)
          (ADVP (IN along)
            (PP (IN with)
              (NP
                (NP
                  (NP (JJ extra) (NNS bits))
                  (PP (IN of)
                    (NP (NN leather)
                      (CC and)
                      (NN string))))
                (: ...)
                (S (RB not)
                  (VP (TO to)
                    (VP (VB mention)
                      (NP (JJ enchanted) (NN fishing) (NNS rods)))))))))))
    (. .) (-RRB- -RRB-)))

nsubj(saddles-19, Fishing-1)
aux(saddles-19, will-2)
cop(saddles-19, be-3)
quantmod(20-5, about-4)
num(%-6, 20-5)
measure(faster-7, %-6)
amod(saddles-19, faster-7)
advmod(raining-11, when-8)
nsubj(raining-11, it-9)
aux(raining-11, 's-10)
dep(faster-7, raining-11)
nsubj(get-17, fishing-14)
aux(get-17, will-15)
advmod(get-17, occasionally-16)
dep(faster-7, get-17)
conj_and(raining-11, get-17)
dobj(get-17, you-18)
dep(tags-22, name-21)
conj_and(saddles-19, tags-22)
dep(hard-26, otherwise-24)
advmod(hard-26, quite-25)
dep(tags-22, hard-26)
aux(find-28, to-27)
xcomp(hard-26, find-28)
amod(bits-34, extra-33)
prep_along_with(saddles-19, bits-34)
prep_of(bits-34, leather-36)
prep_of(bits-34, string-38)
conj_and(leather-36, string-38)
neg(mention-42, not-40)
aux(mention-42, to-41)
infmod(bits-34, mention-42)
amod(rods-45, enchanted-43)
nn(rods-45, fishing-44)
dobj(mention-42, rods-45)

(ROOT
  (S
    (S
      (VP (VB Add)
        (NP (DT a) (JJ few) (NNS fences))
        (PP (IN for)
          (NP
            (NP (NN safety))
            (, ,) (RB optionally)
            (NP
              (NP (DT a) (NN roof))
              (PRN (-LRB- -LRB-)
                (S
                  (S
                    (NP (NN lightning))
                    (VP (VBZ is)
                      (ADJP (JJ unlikely)
                        (S
                          (VP (TO to)
                            (VP (VB hit)
                              (NP (PRP you))))))))
                  (, ,)
                  (CC but)
                  (S
                    (NP (PRP it))
                    (VP (VBZ does)
                      (VP (VB happen)))))
                (-RRB- -RRB-)))))))
    (, ,)
    (CC and)
    (S
      (NP (PRP you))
      (VP (VBP have)
        (NP
          (NP (DT a) (JJ nice) (JJ secure) (NN spot))
          (PP (TO to)
            (NP (NN fish))))
        (PP
          (PP (IN from))
          (, ,)
          (PP
            (ADVP (RB even))
            (IN during)
            (NP (NNS thunderstorms)))
          (CC and)
          (PP (IN at)
            (NP (NN night))))))
    (. .)))

det(fences-4, a-2)
amod(fences-4, few-3)
dobj(Add-1, fences-4)
prep_for(Add-1, safety-6)
advmod(safety-6, optionally-8)
det(roof-10, a-9)
dep(safety-6, roof-10)
nsubj(unlikely-14, lightning-12)
cop(unlikely-14, is-13)
dep(roof-10, unlikely-14)
aux(hit-16, to-15)
xcomp(unlikely-14, hit-16)
dobj(hit-16, you-17)
nsubj(happen-22, it-20)
aux(happen-22, does-21)
dep(roof-10, happen-22)
conj_but(unlikely-14, happen-22)
nsubj(have-27, you-26)
conj_and(Add-1, have-27)
det(spot-31, a-28)
amod(spot-31, nice-29)
amod(spot-31, secure-30)
dobj(have-27, spot-31)
prep_to(spot-31, fish-33)
prep(have-27, from-34)
dep(during-37, even-36)
prep(have-27, during-37)
conj_and(from-34, during-37)
pobj(during-37, thunderstorms-38)
prep(have-27, at-40)
conj_and(from-34, at-40)
pobj(at-40, night-41)

(ROOT
  (S
    (S
      (S
        (NP (NNP Food))
        (VP
          (VP (VBZ is)
            (ADVP (RB not))
            (VP (VBN required)))
          (, ,)
          (CC but)
          (VP (MD can)
            (VP (VB help)))))
      (, ,)
      (CC and)
      (S
        (NP
          (NP (DT any))
          (PP (IN of)
            (NP (JJ several) (NNS foods))))
        (VP (MD will)
          (VP (VB do)))))
    (, ,)
    (CC but)
    (S
      (NP (NN wheat)
        (CC or)
        (NN bread))
      (VP (VBZ is) (RB probably)
        (ADJP (JJS easiest))))
    (. .)))

nsubjpass(required-4, Food-1)
nsubj(help-8, Food-1)
auxpass(required-4, is-2)
neg(required-4, not-3)
aux(help-8, can-7)
conj_but(required-4, help-8)
nsubj(do-16, any-11)
amod(foods-14, several-13)
prep_of(any-11, foods-14)
aux(do-16, will-15)
conj_and(required-4, do-16)
nsubj(easiest-24, wheat-19)
conj_or(wheat-19, bread-21)
nsubj(easiest-24, bread-21)
cop(easiest-24, is-22)
advmod(easiest-24, probably-23)
conj_but(required-4, easiest-24)

(ROOT
  (S
    (SBAR
      (X (SYM f))
      (S
        (NP (PRP you))
        (VP
          (VP (VBP read)
            (NP
              (NP (DT the) (NNP Beginner) (POS 's))
              (NNP Guide)))
          (CC and)
          (VP (VBN followed)
            (NP (PRP it))))))
    (NP (PRP you))
    (VP (MD should)
      (VP (VB have)
        (NP
          (NP
            (QP (IN at) (JJS least) (DT a))
            (NN hole))
          (PP (IN in)
            (NP
              (NP (DT a) (NN hill))
              (PP (IN with)
                (NP
                  (NP
                    (QP (IN about) (CD 2))
                    (NNS torches))
                  (, ,)
                  (NP (DT a) (NN workbench))
                  (, ,)
                  (CC and)
                  (NP (DT a) (JJ worn-down) (JJ wooden) (NN pickaxe)))))))))
    (. .)))

dep(read-3, f-1)
nsubj(read-3, you-2)
nsubj(followed-9, you-2)
dep(have-13, read-3)
det(Beginner-5, the-4)
poss(Guide-7, Beginner-5)
dobj(read-3, Guide-7)
conj_and(read-3, followed-9)
dep(have-13, followed-9)
dobj(followed-9, it-10)
nsubj(have-13, you-11)
aux(have-13, should-12)
quantmod(a-16, at-14)
dep(at-14, least-15)
num(hole-17, a-16)
dobj(have-13, hole-17)
det(hill-20, a-19)
prep_in(hole-17, hill-20)
quantmod(2-23, about-22)
num(torches-24, 2-23)
prep_with(hill-20, torches-24)
det(workbench-27, a-26)
prep_with(hill-20, workbench-27)
conj_and(torches-24, workbench-27)
det(pickaxe-33, a-30)
amod(pickaxe-33, worn-down-31)
amod(pickaxe-33, wooden-32)
prep_with(hill-20, pickaxe-33)
conj_and(torches-24, pickaxe-33)

(ROOT
  (S
    (VP (VBN Begin)
      (PP (IN by)
        (S
          (VP (VBG mining)
            (NP (DT some) (NN stone))
            (PP (IN with)
              (NP (PRP$ your) (NN pickaxe)))))))
    (. .)))

prepc_by(Begin-1, mining-3)
det(stone-5, some-4)
dobj(mining-3, stone-5)
poss(pickaxe-8, your-7)
prep_with(mining-3, pickaxe-8)

(ROOT
  (S
    (NP (PRP You))
    (VP (MD should)
      (VP (VB craft)
        (NP (DT a) (NN stone) (NN pickaxe))
        (SBAR (IN because)
          (S
            (NP (PRP it))
            (ADVP
              (NP (NNS mines))
              (RBR faster))
            (VP (CC and)
              (VP (VBZ has)
                (NP (JJR more) (NN durability))))))))
    (. .)))

nsubj(craft-3, You-1)
aux(craft-3, should-2)
det(pickaxe-6, a-4)
nn(pickaxe-6, stone-5)
dobj(craft-3, pickaxe-6)
mark(has-12, because-7)
nsubj(has-12, it-8)
dep(faster-10, mines-9)
advmod(has-12, faster-10)
cc(has-12, and-11)
advcl(craft-3, has-12)
amod(durability-14, more-13)
dobj(has-12, durability-14)

(ROOT
  (S
    (SBAR
      (WHADVP (WRB When))
      (S
        (NP (PRP you))
        (VP (VBP mine)
          (NP (DT a) (NN stone) (NN block)))))
    (, ,)
    (NP (PRP it))
    (VP (MD should)
      (VP (VB drop)
        (NP (DT a) (NN crumbly))
        (S
          (VP (VB block)
            (VP (VBN called)
              (ADJP (JJ cobblestone)))))))
    (. .)))

advmod(mine-3, When-1)
nsubj(mine-3, you-2)
dep(drop-10, mine-3)
det(block-6, a-4)
nn(block-6, stone-5)
dobj(mine-3, block-6)
nsubj(drop-10, it-8)
aux(drop-10, should-9)
det(crumbly-12, a-11)
dobj(drop-10, crumbly-12)
dep(drop-10, block-13)
dep(block-13, called-14)
acomp(called-14, cobblestone-15)

(ROOT
  (S
    (NP (PRP You))
    (VP (MD can) (RB also)
      (VP (VB use)
        (NP (NN cobblestone))
        (S
          (VP (TO to)
            (VP (VB make)
              (NP (NN stone) (NNS weapons)
                (CC and)
                (NNS tools)))))))
    (. .)))

nsubj(use-4, You-1)
aux(use-4, can-2)
advmod(use-4, also-3)
dobj(use-4, cobblestone-5)
aux(make-7, to-6)
xcomp(use-4, make-7)
nn(weapons-9, stone-8)
dobj(make-7, weapons-9)
dobj(make-7, tools-11)
conj_and(weapons-9, tools-11)

(ROOT
  (S
    (NP (PRP You))
    (VP (MD can)
      (VP (VB make)
        (NP (DT a) (NN stone) (NN pickaxe))
        (PP (IN by)
          (S
            (VP (VBG replacing)
              (NP (DT the) (JJ wooden) (NNS planks))
              (PP (IN with)
                (NP (NN cobblestone))))))
        (SBAR
          (WHADVP (WRB when))
          (S
            (VP (VBG making)
              (NP (DT a) (NN pickaxe)))))))
    (. .)))

nsubj(make-3, You-1)
aux(make-3, can-2)
det(pickaxe-6, a-4)
nn(pickaxe-6, stone-5)
dobj(make-3, pickaxe-6)
prepc_by(make-3, replacing-8)
det(planks-11, the-9)
amod(planks-11, wooden-10)
dobj(replacing-8, planks-11)
prep_with(replacing-8, cobblestone-13)
advmod(making-15, when-14)
advcl(make-3, making-15)
det(pickaxe-17, a-16)
dobj(making-15, pickaxe-17)

(ROOT
  (S
    (NP (JJS Most) (NNS players))
    (VP (VBP find)
      (S
        (NP (PRP it))
        (ADJP (JJ helpful)
          (S
            (VP (TO to)
              (VP (VB bring)
                (NP
                  (NP (NN food))
                  (, ,)
                  (NP (NN wood))
                  (, ,)
                  (NP (NN coal))
                  (, ,)
                  (NP (NNS torches))
                  (, ,)
                  (NP (DT a) (NN sword))
                  (CC and)
                  (NP (DT a) (NN water) (NN bucket)))))))))
    (. .)))

amod(players-2, Most-1)
nsubj(find-3, players-2)
nsubj(helpful-5, it-4)
xcomp(find-3, helpful-5)
aux(bring-7, to-6)
xcomp(helpful-5, bring-7)
dobj(bring-7, food-8)
dobj(bring-7, wood-10)
conj_and(food-8, wood-10)
dobj(bring-7, coal-12)
conj_and(food-8, coal-12)
dobj(bring-7, torches-14)
conj_and(food-8, torches-14)
det(sword-17, a-16)
dobj(bring-7, sword-17)
conj_and(food-8, sword-17)
det(bucket-21, a-19)
nn(bucket-21, water-20)
dobj(bring-7, bucket-21)
conj_and(food-8, bucket-21)

(ROOT
  (S
    (ADVP (RB Also))
    (, ,)
    (NP (PRP it))
    (VP (VBZ 's)
      (NP (DT a) (JJ good) (NN idea)
        (S
          (VP (TO to)
            (VP (VB bring)
              (NP
                (NP (NN iron) (NNS pickaxes))
                (PP (RB instead) (IN of)
                  (NP (NN stone) (NNS pickaxes))))))))
      (, ,)
      (SBAR (IN if)
        (S
          (NP (PRP you))
          (VP (MD can)
            (VP (VB spare)
              (NP (DT the) (NN iron)))))))
    (. .)))

advmod(idea-7, Also-1)
nsubj(idea-7, it-3)
cop(idea-7, 's-4)
det(idea-7, a-5)
amod(idea-7, good-6)
aux(bring-9, to-8)
infmod(idea-7, bring-9)
nn(pickaxes-11, iron-10)
dobj(bring-9, pickaxes-11)
nn(pickaxes-15, stone-14)
prep_instead_of(pickaxes-11, pickaxes-15)
mark(spare-20, if-17)
nsubj(spare-20, you-18)
aux(spare-20, can-19)
advcl(idea-7, spare-20)
det(iron-22, the-21)
dobj(spare-20, iron-22)

(ROOT
  (S
    (SBAR (IN With)
      (S
        (NP
          (NP (DT the) (JJ vast) (NN amount))
          (PP (IN of)
            (NP
              (NP (NN iron))
              (SBAR
                (WHNP (WDT that))
                (S
                  (VP (VBZ is)
                    (PP (IN in)
                      (NP (DT the) (NN world)))
                    (, ,)
                    (SBAR
                      (S
                        (NP (PRP you))
                        (VP (VBP are)
                          (ADJP (JJ likely)
                            (S
                              (VP (TO to)
                                (VP (VB find)
                                  (NP (DT an) (NN iron) (NN pickaxe)))))))))))))))
        (VP (MD will)
          (ADVP (RBR more) (IN than))
          (VP (VB make)
            (PRT (RP up))
            (PP (IN for)
              (NP (PRP itself)))
            (PP (IN in)
              (NP
                (NP (NNS terms))
                (PP (IN of)
                  (NP (NN iron) (NN mined)))))))))
    (, ,)
    (SBAR (IN if)
      (S
        (NP (PRP you))
        (VP (VBP use)
          (NP (DT a) (NN stone) (NN pickaxe))
          (SBAR
            (S
              (NP (PRP it))
              (VP (VBZ goes)
                (PP (IN by)
                  (ADVP (RB slowly)))))))))
    (, ,)
    (ADVP (RB so))
    (PP (IN in)
      (NP (NN theory)))
    (NP (PRP you))
    (VP (VBP are)
      (VP (VBG wasting)
        (NP (NN iron))
        (SBAR (IN if)
          (S
            (NP (PRP you))
            (VP (VBP do) (RB n't)
              (VP (VB use)
                (NP (DT an) (NN iron) (NN pickaxe))))))))
    (. .)))

mark(make-24, With-1)
det(amount-4, the-2)
amod(amount-4, vast-3)
nsubj(make-24, amount-4)
prep_of(amount-4, iron-6)
nsubj(is-8, iron-6)
rcmod(iron-6, is-8)
det(world-11, the-10)
prep_in(is-8, world-11)
nsubj(likely-15, you-13)
cop(likely-15, are-14)
ccomp(is-8, likely-15)
aux(find-17, to-16)
xcomp(likely-15, find-17)
det(pickaxe-20, an-18)
nn(pickaxe-20, iron-19)
dobj(find-17, pickaxe-20)
aux(make-24, will-21)
advmod(make-24, more-22)
dep(more-22, than-23)
advcl(wasting-50, make-24)
prt(make-24, up-25)
prep_for(make-24, itself-27)
prep_in(make-24, terms-29)
nn(mined-32, iron-31)
prep_of(terms-29, mined-32)
mark(use-36, if-34)
nsubj(use-36, you-35)
dep(wasting-50, use-36)
det(pickaxe-39, a-37)
nn(pickaxe-39, stone-38)
dobj(use-36, pickaxe-39)
nsubj(goes-41, it-40)
dep(use-36, goes-41)
prep(goes-41, by-42)
dep(by-42, slowly-43)
advmod(wasting-50, so-45)
prep_in(wasting-50, theory-47)
nsubj(wasting-50, you-48)
aux(wasting-50, are-49)
dobj(wasting-50, iron-51)
mark(use-56, if-52)
nsubj(use-56, you-53)
aux(use-56, do-54)
neg(use-56, n't-55)
advcl(wasting-50, use-56)
det(pickaxe-59, an-57)
nn(pickaxe-59, iron-58)
dobj(use-56, pickaxe-59)

(ROOT
  (S
    (SBAR
      (WHADVP (WRB When))
      (S
        (NP (PRP you))
        (VP (VB obtain)
          (NP (DT a) (NN diamond) (NN pickaxe)))))
    (NP (PRP you))
    (VP (MD should)
      (VP (VB use)
        (NP (PRP it))
        (SBAR (IN till)
          (S
            (NP (PRP it))
            (VP (VBZ breaks) (, ,)
              (NP (PRP$ its)
                (ADJP (DT the) (JJ same))
                (NN argument))
              (PP (IN as)
                (NP (NN iron))))))))
    (. .)))

advmod(obtain-3, When-1)
nsubj(obtain-3, you-2)
dep(use-9, obtain-3)
det(pickaxe-6, a-4)
nn(pickaxe-6, diamond-5)
dobj(obtain-3, pickaxe-6)
nsubj(use-9, you-7)
aux(use-9, should-8)
dobj(use-9, it-10)
mark(breaks-13, till-11)
nsubj(breaks-13, it-12)
advcl(use-9, breaks-13)
poss(argument-18, its-15)
dep(same-17, the-16)
amod(argument-18, same-17)
dobj(breaks-13, argument-18)
prep_as(breaks-13, iron-20)

(ROOT
  (S
    (SBAR (IN Although) (, ,)
      (S
        (NP (EX there))
        (VP (VBZ is)
          (NP
            (ADJP (RB considerably) (JJR less))
            (NN diamond))
          (PP (IN than)
            (NP (NN iron))))))
    (, ,)
    (NP
      (NP (NN diamond))
      (PP (IN on)
        (NP
          (NP (NN average))
          (VP (VBG spawning)
            (NP
              (NP
                (QP (JJR less) (IN than) (RB once)))
              (PP (IN per)
                (NP
                  (NP (NN chunk))
                  (, ,)
                  (NP (DT a) (NN diamond) (NN pickaxe)))))))))
    (VP (MD should)
      (ADVP (RBR more) (IN than))
      (VP (VB make)
        (PRT (RP up))
        (PP (IN for)
          (NP (PRP itself)))
        (SBAR
          (WHADVP (WRB when))
          (S
            (NP (PRP you))
            (VP (VBP mine)
              (PP (IN for)
                (ADVP (RB strictly)))
              (PP (IN for)
                (NP (NN diamond))))))))
    (. .)))

mark(is-4, Although-1)
expl(is-4, there-3)
advcl(make-27, is-4)
advmod(less-6, considerably-5)
amod(diamond-7, less-6)
nsubj(is-4, diamond-7)
prep_than(is-4, iron-9)
nsubj(make-27, diamond-11)
prep_on(diamond-11, average-13)
partmod(average-13, spawning-14)
quantmod(than-16, less-15)
dobj(spawning-14, than-16)
quantmod(than-16, once-17)
prep_per(than-16, chunk-19)
det(pickaxe-23, a-21)
nn(pickaxe-23, diamond-22)
appos(chunk-19, pickaxe-23)
aux(make-27, should-24)
advmod(make-27, more-25)
dep(more-25, than-26)
prt(make-27, up-28)
prep_for(make-27, itself-30)
advmod(mine-33, when-31)
nsubj(mine-33, you-32)
advcl(make-27, mine-33)
prep(mine-33, for-34)
dep(for-34, strictly-35)
prep_for(mine-33, diamond-37)

(ROOT
  (S
    (SBAR (IN If)
      (S
        (NP (PRP you))
        (VP (VBP keep)
          (VP (VBG losing)
            (NP (PRP$ your) (NN way))))))
    (, ,)
    (VP (VB try)
      (S
        (VP (VBG marking)
          (NP (PRP$ your) (NN path))
          (PP (IN with)
            (NP
              (NP
                (NP (NNS torches))
                (CC or)
                (NP (DT a) (JJ unique) (NN entity)))
              (, ,)
              (PP (JJ such) (IN as)
                (NP
                  (NP (NNS signs))
                  (CC or)
                  (NP (JJ birch) (NNS planks)))))))))
    (. .)))

mark(keep-3, If-1)
nsubj(keep-3, you-2)
advcl(try-8, keep-3)
dep(keep-3, losing-4)
poss(way-6, your-5)
dobj(losing-4, way-6)
xcomp(try-8, marking-9)
poss(path-11, your-10)
dobj(marking-9, path-11)
prep_with(marking-9, torches-13)
det(entity-17, a-15)
amod(entity-17, unique-16)
prep_with(marking-9, entity-17)
conj_or(torches-13, entity-17)
prep_such_as(torches-13, signs-21)
amod(planks-24, birch-23)
prep_such_as(torches-13, planks-24)
conj_or(signs-21, planks-24)

(ROOT
  (S
    (S
      (VP (VBG Carving)
        (PRT (RP out))
        (NP
          (NP (DT a) (JJ safe) (NN room))
          (PP (VBG containing)
            (NP
              (NP (NNS furnaces))
              (, ,)
              (NP (DT a) (VBG crafting) (NN table)))))))
    (, ,)
    (NP
      (NP (DT a) (NN bed))
      (CC and)
      (NP (DT a) (NN chest)))
    (VP (MD might)
      (VP (VB be)
        (PP (JJ worth)
          (NP (PRP$ your) (NN time)))))
    (. .)))

dep(be-19, Carving-1)
prt(Carving-1, out-2)
det(room-5, a-3)
amod(room-5, safe-4)
dobj(Carving-1, room-5)
prep_containing(room-5, furnaces-7)
det(table-11, a-9)
amod(table-11, crafting-10)
appos(furnaces-7, table-11)
det(bed-14, a-13)
nsubj(be-19, bed-14)
det(chest-17, a-16)
conj_and(bed-14, chest-17)
nsubj(be-19, chest-17)
aux(be-19, might-18)
prep(be-19, worth-20)
poss(time-22, your-21)
dep(worth-20, time-22)

(ROOT
  (S
    (VP (VB Be)
      (ADJP (JJ careful))
      (SBAR
        (WHADVP (WRB where))
        (S
          (S
            (NP (PRP you))
            (VP (VBP place)
              (NP (NNS rails))))
          (, ,)
          (CC and)
          (S
            (NP (PRP you))
            (VP (MD may)
              (VP (VB want)
                (S
                  (VP (TO to)
                    (VP (VB protect)
                      (NP
                        (NP (DT some))
                        (PP (IN of)
                          (NP (PRP them))))
                      (PP (IN with)
                        (NP
                          (NP (NNS fences))
                          (CC or)
                          (RB even)
                          (NP (NN stone)))))))))))))
    (. .)))

cop(careful-2, Be-1)
advmod(place-5, where-3)
nsubj(place-5, you-4)
advcl(careful-2, place-5)
dobj(place-5, rails-6)
dobj(want-11, rails-6)
nsubj(want-11, you-9)
xsubj(protect-13, you-9)
aux(want-11, may-10)
advcl(careful-2, want-11)
conj_and(place-5, want-11)
aux(protect-13, to-12)
xcomp(want-11, protect-13)
dobj(protect-13, some-14)
prep_of(some-14, them-16)
prep_with(protect-13, fences-18)
prep_with(protect-13, even-20)
advmod(fences-18, even-20)
conj_or(fences-18, even-20)
dep(fences-18, stone-21)

(ROOT
  (S
    (ADVP (RB Even))
    (NP (NN shallow) (NNS caves))
    (VP (MD will)
      (VP (VB offer)
        (NP
          (NP (NN plenty))
          (PP (IN of)
            (NP
              (NP (NN coal)
                (CC and)
                (NN iron))
              (, ,)
              (CC and)
              (RB later)
              (NP
                (NP (NN gold))
                (CC and)
                (NP (JJ other) (NNS ores))))))))
    (. .)))

advmod(offer-5, Even-1)
nn(caves-3, shallow-2)
nsubj(offer-5, caves-3)
aux(offer-5, will-4)
dobj(offer-5, plenty-6)
prep_of(plenty-6, coal-8)
prep_of(plenty-6, iron-10)
conj_and(coal-8, iron-10)
prep_of(plenty-6, later-13)
advmod(coal-8, later-13)
conj_and(coal-8, later-13)
dep(coal-8, gold-14)
amod(ores-17, other-16)
dep(coal-8, ores-17)
conj_and(gold-14, ores-17)

(ROOT
  (S
    (NP (NNS Caves))
    (VP (VBP offer)
      (NP
        (NP (DT the) (NN advantage))
        (SBAR (IN that)
          (S
            (NP
              (NP (DT a) (JJ great) (NN deal))
              (PP (IN of)
                (NP (NN stone))))
            (VP (VBZ has) (RB already)
              (VP (VBN been)
                (VP (VBN excavated)
                  (PP (IN for)
                    (NP (PRP you)))
                  (, ,)
                  (S
                    (VP (VBG exposing)
                      (NP (JJ many) (NN ore) (NNS veins)))))))))))
    (. .)))

nsubj(offer-2, Caves-1)
det(advantage-4, the-3)
dobj(offer-2, advantage-4)
complm(excavated-14, that-5)
det(deal-8, a-6)
amod(deal-8, great-7)
nsubjpass(excavated-14, deal-8)
prep_of(deal-8, stone-10)
aux(excavated-14, has-11)
advmod(excavated-14, already-12)
auxpass(excavated-14, been-13)
dep(advantage-4, excavated-14)
prep_for(excavated-14, you-16)
xcomp(excavated-14, exposing-18)
amod(veins-21, many-19)
nn(veins-21, ore-20)
dobj(exposing-18, veins-21)

(ROOT
  (S
    (NP (PRP It))
    (VP (VBZ is)
      (NP
        (NP (DT a) (JJ good) (NN idea))
        (PP (TO to)
          (NP (JJ mine) (NN everything))))
      (PP (IN out)
        (S
          (VP (VBG including)
            (NP (NN coal)))))
      (SBAR (IN as)
        (S
          (NP (PRP you))
          (ADVP (RB never))
          (VP
            (VP (VBP know)
              (SBAR
                (WHADVP (WRB when))
                (S
                  (NP (PRP you))
                  (VP (MD might)
                    (VP (VB be)
                      (VP (VBN lost)))))))
            (CC and)
            (VP (VBP need)
              (NP (JJR more) (NNS torches)))))))
    (. .)))

nsubj(idea-5, It-1)
cop(idea-5, is-2)
det(idea-5, a-3)
amod(idea-5, good-4)
amod(everything-8, mine-7)
prep_to(idea-5, everything-8)
prepc_out(idea-5, including-10)
dobj(including-10, coal-11)
mark(know-15, as-12)
nsubj(know-15, you-13)
nsubj(need-22, you-13)
neg(know-15, never-14)
advcl(idea-5, know-15)
advmod(lost-20, when-16)
nsubjpass(lost-20, you-17)
aux(lost-20, might-18)
auxpass(lost-20, be-19)
advcl(know-15, lost-20)
advcl(idea-5, need-22)
conj_and(know-15, need-22)
amod(torches-24, more-23)
dobj(need-22, torches-24)

(ROOT
  (S
    (NP (NNP Cave) (NN mining))
    (VP (VBZ has)
      (NP
        (NP (DT a) (JJ high) (NN return))
        (PP (IN on)
          (NP (NN investment)))
        (, ,)
        (VP
          (VP (VBG yielding)
            (NP
              (NP (JJR more) (NN ore))
              (PP (IN per)
                (NP
                  (NP (NN time))
                  (VP (VBN spent))))))
          (CC and)
          (VP (VBG requiring)
            (NP (JJR fewer) (NNS tools)))))
      (PRN (-LRB- -LRB-)
        (S
          (NP
            (NP (JJR less) (NN pickaxe))
            (CC and)
            (NP (NN shovel) (NN durability)))
          (VP (VBZ is)
            (VP (VBN lost)
              (NP
                (NP (NN mining) (NN stone))
                (, ,)
                (NP (NN dirt))
                (, ,)
                (CC and)
                (NP (NN gravel))))))
        (-RRB- -RRB-))
      (PP (IN than)
        (NP (JJ other) (NNS approaches))))
    (. .)))

nn(mining-2, Cave-1)
nsubj(return-6, mining-2)
dep(return-6, has-3)
det(return-6, a-4)
amod(return-6, high-5)
prep_on(return-6, investment-8)
dep(return-6, yielding-10)
amod(ore-12, more-11)
dobj(yielding-10, ore-12)
prep_per(ore-12, time-14)
partmod(time-14, spent-15)
dep(return-6, requiring-17)
conj_and(yielding-10, requiring-17)
amod(tools-19, fewer-18)
dobj(requiring-17, tools-19)
amod(pickaxe-22, less-21)
nsubjpass(lost-27, pickaxe-22)
nn(durability-25, shovel-24)
conj_and(pickaxe-22, durability-25)
nsubjpass(lost-27, durability-25)
auxpass(lost-27, is-26)
parataxis(return-6, lost-27)
nn(stone-29, mining-28)
dobj(lost-27, stone-29)
dobj(lost-27, dirt-31)
conj_and(stone-29, dirt-31)
dobj(lost-27, gravel-34)
conj_and(stone-29, gravel-34)
amod(approaches-38, other-37)
prep_than(return-6, approaches-38)

(ROOT
  (S
    (NP
      (NP (DT A) (NN bucket))
      (PP (IN of)
        (NP (NN water))))
    (VP (VBZ serves)
      (PP (IN as)
        (NP (PDT both) (DT a) (NN fire) (NN extinguisher)))
      (, ,)
      (SBAR (IN if)
        (S
          (NP (PRP you))
          (VP (VBP fall)
            (PP
              (PP (IN in))
              (: ;)
              (CC and)
              (PP (IN as)
                (NP (DT a) (NN way)
                  (S
                    (VP (TO to)
                      (VP (VB form)
                        (NP (NN obsidian) (NNS surfaces))
                        (PP (IN over)
                          (NP (NN lava) (NNS pools)))
                        (PRN (-LRB- -LRB-)
                          (S
                            (VP (VB pour)
                              (NP (NN water))
                              (PP (IN onto)
                                (NP
                                  (NP (DT a) (JJ solid) (NN block))
                                  (ADJP (JJ adjacent)
                                    (PP (TO to)
                                      (NP
                                        (NP (DT a) (NN lava) (NN pool))
                                        (: ;)
                                        (SBAR
                                          (S
                                            (VP (VBP do) (RB not)
                                              (VP (VB stand)
                                                (PP (IN between)
                                                  (NP
                                                    (NP (DT that) (NN spot))
                                                    (CC and)
                                                    (NP (DT the) (NN lava)))))))))))))))
                          (-RRB- -RRB-))))))))))))
    (. .)))

det(bucket-2, A-1)
nsubj(serves-5, bucket-2)
prep_of(bucket-2, water-4)
predet(extinguisher-10, both-7)
det(extinguisher-10, a-8)
nn(extinguisher-10, fire-9)
prep_as(serves-5, extinguisher-10)
mark(fall-14, if-12)
nsubj(fall-14, you-13)
advcl(serves-5, fall-14)
prep(fall-14, in-15)
prep(fall-14, as-18)
conj_and(in-15, as-18)
det(way-20, a-19)
pobj(as-18, way-20)
aux(form-22, to-21)
infmod(way-20, form-22)
nn(surfaces-24, obsidian-23)
dobj(form-22, surfaces-24)
nn(pools-27, lava-26)
prep_over(form-22, pools-27)
parataxis(form-22, pour-29)
dobj(pour-29, water-30)
det(block-34, a-32)
amod(block-34, solid-33)
prep_onto(pour-29, block-34)
amod(block-34, adjacent-35)
det(pool-39, a-37)
nn(pool-39, lava-38)
prep_to(adjacent-35, pool-39)
aux(stand-43, do-41)
neg(stand-43, not-42)
rcmod(pool-39, stand-43)
det(spot-46, that-45)
prep_between(stand-43, spot-46)
det(lava-49, the-48)
prep_between(stand-43, lava-49)
conj_and(spot-46, lava-49)

(ROOT
  (S
    (SBAR (IN If)
      (S
        (NP (PRP it))
        (VP (VBZ is)
          (NP (PRP$ your) (JJ first) (NN mining) (NN trip)))))
    (, ,)
    (NP (PRP mine))
    (VP
      (VP
        (ADVP (DT some))
        (VBP cobblestone))
      (CC and)
      (VP (VB make)
        (NP (DT a) (NN stone) (NN pickaxe))))
    (. .)))

mark(trip-7, If-1)
nsubj(trip-7, it-2)
cop(trip-7, is-3)
poss(trip-7, your-4)
amod(trip-7, first-5)
nn(trip-7, mining-6)
advcl(cobblestone-11, trip-7)
nsubj(cobblestone-11, mine-9)
nsubj(make-13, mine-9)
advmod(cobblestone-11, some-10)
conj_and(cobblestone-11, make-13)
det(pickaxe-16, a-14)
nn(pickaxe-16, stone-15)
dobj(make-13, pickaxe-16)

(ROOT
  (S
    (SBAR (IN If)
      (S
        (NP (PRP you))
        (VP (VBP are)
          (ADVP (RBR further) (RB along))
          (PP (IN in)
            (NP (DT the) (NN game))))))
    (, ,)
    (NP (CC and))
    (VP (VBP expect)
      (PP (TO to)
        (NP (NN mine)))
      (PP (IN for)
        (NP (DT a) (NN while)))
      (, ,)
      (S
        (VP (VB bring)
          (NP
            (NP (CD two) (NN iron) (NNS pickaxes))
            (CC and)
            (NP
              (QP (IN at) (JJS least) (CD 12))
              (NN stone) (NNS pickaxes))))))
    (. .)))

mark(are-3, If-1)
nsubj(are-3, you-2)
advcl(expect-11, are-3)
advmod(along-5, further-4)
advmod(are-3, along-5)
det(game-8, the-7)
prep_in(are-3, game-8)
nsubj(expect-11, and-10)
prep_to(expect-11, mine-13)
det(while-16, a-15)
prep_for(expect-11, while-16)
ccomp(expect-11, bring-18)
num(pickaxes-21, two-19)
nn(pickaxes-21, iron-20)
dobj(bring-18, pickaxes-21)
quantmod(12-25, at-23)
dep(at-23, least-24)
num(pickaxes-27, 12-25)
nn(pickaxes-27, stone-26)
dobj(bring-18, pickaxes-27)
conj_and(pickaxes-21, pickaxes-27)

(ROOT
  (S
    (SBAR (IN If)
      (S
        (NP (PRP you))
        (VP (VBP prefer)
          (S
            (VP (TO to)
              (VP
                (VP (VB save)
                  (NP (JJ valuable) (NNS materials)))
                (, ,)
                (VP (VB take)
                  (NP (DT a) (JJ few) (NN stone)))))))))
    (NP
      (NP (NNS pickaxes))
      (PP (IN for)
        (NP
          (NP (NN mining) (NN stone))
          (CC and)
          (NP (CD one) (NN iron)))))
    (VP (VBP pickaxe)
      (ADVP (RB only))
      (PP (IN for)
        (NP (NN mining) (NNS ores))))
    (. .)))

mark(prefer-3, If-1)
nsubj(prefer-3, you-2)
xsubj(save-5, you-2)
advcl(pickaxe-20, prefer-3)
aux(save-5, to-4)
xcomp(prefer-3, save-5)
amod(materials-7, valuable-6)
dobj(save-5, materials-7)
dep(save-5, take-9)
det(stone-12, a-10)
amod(stone-12, few-11)
dobj(take-9, stone-12)
nsubj(pickaxe-20, pickaxes-13)
nn(stone-16, mining-15)
prep_for(pickaxes-13, stone-16)
num(iron-19, one-18)
prep_for(pickaxes-13, iron-19)
conj_and(stone-16, iron-19)
advmod(pickaxe-20, only-21)
nn(ores-24, mining-23)
prep_for(pickaxe-20, ores-24)

(ROOT
  (S
    (S
      (VP (VBG Having)
        (NP
          (QP (IN at) (JJS least) (CD one))
          (NN iron) (NN shovel))))
    (VP (MD can)
      (VP (VB get)
        (PP (IN through)
          (NP
            (NP (JJ cumbersome) (NNS patches))
            (PP (IN of)
              (NP (NN dirt)
                (CC and)
                (NN gravel)))))
        (ADVP (RB quickly))
        (PP (IN without)
          (S
            (VP (VBG using)
              (NP (PRP$ your) (NNS hands)))))))
    (. .)))

csubj(get-8, Having-1)
quantmod(one-4, at-2)
dep(at-2, least-3)
num(shovel-6, one-4)
nn(shovel-6, iron-5)
dobj(Having-1, shovel-6)
aux(get-8, can-7)
amod(patches-11, cumbersome-10)
prep_through(get-8, patches-11)
prep_of(patches-11, dirt-13)
prep_of(patches-11, gravel-15)
conj_and(dirt-13, gravel-15)
advmod(get-8, quickly-16)
prepc_without(get-8, using-18)
poss(hands-20, your-19)
dobj(using-18, hands-20)

(ROOT
  (S
    (NP
      (QP (RB Just) (CD one)
        (CC or)
        (CD two))
      (NN stone) (NNS shovels))
    (ADVP (RB also))
    (VP (VBZ works)
      (SBAR (IN if)
        (S
          (NP (PRP you))
          (VP (VBP want)
            (S
              (VP (TO to)
                (VP (VB use)
                  (NP (PRP$ your) (NN iron))
                  (PP (IN for)
                    (NP (JJ other) (NNS things))))))))))
    (. .)))

quantmod(one-2, Just-1)
num(shovels-6, one-2)
conj_or(one-2, two-4)
num(shovels-6, two-4)
nn(shovels-6, stone-5)
nsubj(works-8, shovels-6)
advmod(works-8, also-7)
mark(want-11, if-9)
nsubj(want-11, you-10)
xsubj(use-13, you-10)
advcl(works-8, want-11)
aux(use-13, to-12)
xcomp(want-11, use-13)
poss(iron-15, your-14)
dobj(use-13, iron-15)
amod(things-18, other-17)
prep_for(use-13, things-18)

(ROOT
  (S
    (S
      (SBAR (IN If)
        (S
          (NP (PRP you))
          (VP (VBP run)
            (PRT (RP out))
            (PP (IN of)
              (NP (NNS tools)
                (CC or)
                (NNS torches))))))
      (, ,)
      (NP (PRP you))
      (VP
        (VP (MD can)
          (VP (VB make)
            (NP (DT a) (VBG crafting) (NN table))))
        (CC and)
        (VP (VBZ sticks)
          (S
            (VP (TO to)
              (VP (VB replenish)
                (NP
                  (NP (PRP$ your) (NNS supplies))
                  (PP (IN of)
                    (NP
                      (NP (NNS pickaxes))
                      (, ,)
                      (NP (NNS shovels))
                      (, ,)
                      (CC and)
                      (NP (NNS torches)))))))))))
    (PRN (-LRB- -LRB-)
      (S
        (NP (PRP you))
        (VP (MD can)
          (VP (VB get)
            (NP (JJR more) (NN coal))
            (PP (IN for)
              (NP (PRP them)))
            (PP (IN from)
              (NP (NN mining))))))
      (-RRB- -RRB-))
    (. .)))

mark(run-3, If-1)
nsubj(run-3, you-2)
advcl(make-12, run-3)
prep_out_of(run-3, tools-6)
prep_out_of(run-3, torches-8)
conj_or(tools-6, torches-8)
nsubj(make-12, you-10)
nsubj(sticks-17, you-10)
xsubj(replenish-19, you-10)
aux(make-12, can-11)
det(table-15, a-13)
amod(table-15, crafting-14)
dobj(make-12, table-15)
dobj(sticks-17, table-15)
conj_and(make-12, sticks-17)
aux(replenish-19, to-18)
xcomp(sticks-17, replenish-19)
poss(supplies-21, your-20)
dobj(replenish-19, supplies-21)
prep_of(supplies-21, pickaxes-23)
prep_of(supplies-21, shovels-25)
conj_and(pickaxes-23, shovels-25)
prep_of(supplies-21, torches-28)
conj_and(pickaxes-23, torches-28)
nsubj(get-32, you-30)
aux(get-32, can-31)
dep(make-12, get-32)
amod(coal-34, more-33)
dobj(get-32, coal-34)
prep_for(get-32, them-36)
prep_from(get-32, mining-38)

(ROOT
  (S
    (S
      (NP (DT A) (JJ spare) (NN bucket))
      (VP (VBZ is)
        (ADJP (JJ useful)
          (PP (IN for)
            (S
              (VP (VBG collecting)
                (NP (NN lava))
                (S
                  (VP (TO to)
                    (VP (VB use)
                      (PP (IN as)
                        (NP (NN fuel)))
                      (PP (IN in)
                        (NP (DT a) (NN furnace)))
                      (, ,)
                      (S
                        (VP (TO to)
                          (VP (VB block)
                            (PP (CC or)
                              (NP (NN slaughter) (NNS monsters)))))))))))))
        (PRN (-LRB- -LRB-)
          (S
            (NP (PRP you))
            (VP (MD 'll)
              (VP (VB lose)
                (NP
                  (NP (JJS most))
                  (PP (IN of)
                    (NP (PRP$ their) (NNS drops)))))))
          (-RRB- -RRB-))))
    (, ,)
    (CC or)
    (S (RB just)
      (VP (TO to)
        (VP (VB get)
          (NP (DT the) (NN lava))
          (PRT (RP out))
          (PP (IN of)
            (NP (PRP$ your) (NN way))))))
    (. .)))

det(bucket-3, A-1)
amod(bucket-3, spare-2)
nsubj(useful-5, bucket-3)
nsubj(get-35, bucket-3)
cop(useful-5, is-4)
prepc_for(useful-5, collecting-7)
dobj(collecting-7, lava-8)
aux(use-10, to-9)
xcomp(collecting-7, use-10)
prep_as(use-10, fuel-12)
det(furnace-15, a-14)
prep_in(use-10, furnace-15)
aux(block-18, to-17)
xcomp(use-10, block-18)
prep(block-18, or-19)
nn(monsters-21, slaughter-20)
dep(or-19, monsters-21)
nsubj(lose-25, you-23)
aux(lose-25, 'll-24)
parataxis(useful-5, lose-25)
dobj(lose-25, most-26)
poss(drops-29, their-28)
prep_of(most-26, drops-29)
advmod(get-35, just-33)
aux(get-35, to-34)
conj_or(useful-5, get-35)
det(lava-37, the-36)
dobj(get-35, lava-37)
poss(way-41, your-40)
prep_out_of(get-35, way-41)

(ROOT
  (S
    (SBAR (IN If)
      (S
        (NP (EX there))
        (VP (VBP are)
          (S
            (NP (NNS mushrooms))
            (ADJP (JJ present))))))
    (, ,)
    (NP (PRP you))
    (VP (MD might)
      (VP
        (VP (VB carry))
        (CC or)
        (VP (VB make)
          (NP (DT a) (NN bowl)
            (S
              (VP (TO to)
                (VP (VB make)
                  (NP (NN mushroom) (NN stew)))))))))
    (. .)))

mark(are-3, If-1)
expl(are-3, there-2)
advcl(carry-9, are-3)
nsubj(present-5, mushrooms-4)
xcomp(are-3, present-5)
nsubj(carry-9, you-7)
nsubj(make-11, you-7)
aux(carry-9, might-8)
conj_or(carry-9, make-11)
det(bowl-13, a-12)
dobj(make-11, bowl-13)
aux(make-15, to-14)
infmod(bowl-13, make-15)
nn(stew-17, mushroom-16)
dobj(make-15, stew-17)

(ROOT
  (S
    (S
      (PP (IN In)
        (ADJP (JJ general)))
      (, ,)
      (NP (PRP you))
      (VP (VBP want)
        (NP
          (QP (IN at) (JJS least) (NN iron))
          (NN armor))))
    (: --)
    (S
      (SBAR (IN if)
        (FRAG
          (ADJP (JJ necessary))))
      (, ,)
      (NP (PRP you))
      (VP (MD can)
        (VP (VBN smelt)
          (S
            (VP (NN ore)
              (CC and)
              (NN craft)
              (NP (PRP$ your) (NN armor))))
          (PP (IN in)
            (NP (DT the) (NNS caves))))))
    (. .)))

prep_in(want-5, general-2)
nsubj(want-5, you-4)
quantmod(iron-8, at-6)
quantmod(iron-8, least-7)
num(armor-9, iron-8)
dobj(want-5, armor-9)
mark(necessary-12, if-11)
advcl(smelt-16, necessary-12)
nsubj(smelt-16, you-14)
aux(smelt-16, can-15)
parataxis(want-5, smelt-16)
ccomp(smelt-16, ore-17)
ccomp(smelt-16, craft-19)
conj_and(ore-17, craft-19)
poss(armor-21, your-20)
dobj(ore-17, armor-21)
det(caves-24, the-23)
prep_in(smelt-16, caves-24)

(ROOT
  (S
    (NP (NNS Chests))
    (VP (VBP are)
      (ADJP (JJ invaluable))
      (SBAR
        (SBAR
          (WHADVP (WRB when))
          (S
            (S
              (VP (VBG exploring)
                (NP
                  (NP
                    (NP (NN lava) (NNS caves))
                    (SBAR (IN since)
                      (S
                        (NP (PRP you))
                        (VP (MD can)
                          (VP (VB store)
                            (NP (PRP$ your) (NNS items))
                            (PP (IN in)
                              (NP (NN case)))
                            (SBAR
                              (S
                                (NP (PRP you))
                                (VP (VB die) (: ;)
                                  (ADVP (RB instead))))))))))
                  (PP (IN of)
                    (S
                      (VP (VBG losing)
                        (S
                          (NP
                            (NP (DT a) (NN whole) (VB stack))
                            (PP (IN of)
                              (NP
                                (NP (NN iron))
                                (CC and)
                                (NP (PDT half) (DT a)))))
                          (VP (VB stack))))))
                  (PP (IN of)
                    (NP (NN gold))))
                (PRT (RP along))
                (PP (IN with)
                  (NP
                    (NP (PDT all))
                    (PP (IN of)
                      (NP (PRP$ your) (NN food)
                        (CC and)
                        (NNS weapons)))))))
            (, ,)
            (NP (PRP you))
            (VP (MD can)
              (VP
                (VP (VB drop)
                  (NP
                    (NP (DT a) (NN chest))
                    (CC and)
                    (NP (DT a) (VBG crafting) (NN table)))
                  (ADVP (RB nearby)))
                (, ,)
                (CC and)
                (VP (VB lose)
                  (NP (RB only) (PRP$ your) (JJ current) (NNS tools)))))))
        (CC and)
        (SBAR
          (WHNP (WDT whatever))
          (S
            (NP (PRP you))
            (VP (VBD had) (RB n't)
              (VP (VBD stashed)
                (ADVP (RB yet))))))))
    (. .)))

nsubj(invaluable-3, Chests-1)
cop(invaluable-3, are-2)
advmod(drop-44, when-4)
dep(drop-44, exploring-5)
nn(caves-7, lava-6)
dobj(exploring-5, caves-7)
mark(store-11, since-8)
nsubj(store-11, you-9)
aux(store-11, can-10)
dep(caves-7, store-11)
poss(items-13, your-12)
dobj(store-11, items-13)
prep_in(store-11, case-15)
nsubj(die-17, you-16)
dep(store-11, die-17)
advmod(die-17, instead-19)
prepc_of(caves-7, losing-21)
det(whole-23, a-22)
nsubj(stack-30, whole-23)
dep(whole-23, stack-24)
prep_of(whole-23, iron-26)
predet(a-29, half-28)
prep_of(whole-23, a-29)
conj_and(iron-26, a-29)
ccomp(losing-21, stack-30)
prep_of(caves-7, gold-32)
prep_along_with(exploring-5, all-35)
poss(food-38, your-37)
prep_of(all-35, food-38)
prep_of(all-35, weapons-40)
conj_and(food-38, weapons-40)
nsubj(drop-44, you-42)
nsubj(lose-54, you-42)
aux(drop-44, can-43)
dep(invaluable-3, drop-44)
det(chest-46, a-45)
dobj(drop-44, chest-46)
det(table-50, a-48)
amod(table-50, crafting-49)
dobj(drop-44, table-50)
conj_and(chest-46, table-50)
advmod(drop-44, nearby-51)
dep(invaluable-3, lose-54)
conj_and(drop-44, lose-54)
advmod(tools-58, only-55)
poss(tools-58, your-56)
amod(tools-58, current-57)
dobj(lose-54, tools-58)
dobj(stashed-64, whatever-60)
nsubj(stashed-64, you-61)
aux(stashed-64, had-62)
neg(stashed-64, n't-63)
dep(invaluable-3, stashed-64)
conj_and(drop-44, stashed-64)
advmod(stashed-64, yet-65)

(ROOT
  (S
    (NP (PRP You))
    (VP (MD can)
      (VP (VB create)
        (NP (DT an) (JJ underground) (NN tree) (NN farm))
        (S
          (VP (TO to)
            (VP (VB replenish)
              (NP
                (NP (PRP$ your) (NN supply))
                (PP (IN of)
                  (NP
                    (NP (NN wood))
                    (CC and)
                    (NP (DT a) (JJ small) (NN wheat) (NN farm)))))
              (S
                (VP (TO to)
                  (VP
                    (ADVP (RB continuously))
                    (VB grow)
                    (NP
                      (NP (NN wheat))
                      (PP (IN for)
                        (NP (NN bread)))
                      (, ,)
                      (VP (VBG allowing)
                        (S
                          (NP (PRP you))
                          (VP (TO to)
                            (VP (VB stay)
                              (ADVP (RB underground))
                              (PP (IN for)
                                (NP
                                  (NP (DT an) (JJ infinite) (NN period))
                                  (PP (IN of)
                                    (NP (NN time))))))))))))))))))
    (. .)))

nsubj(create-3, You-1)
aux(create-3, can-2)
det(farm-7, an-4)
amod(farm-7, underground-5)
nn(farm-7, tree-6)
dobj(create-3, farm-7)
aux(replenish-9, to-8)
xcomp(create-3, replenish-9)
poss(supply-11, your-10)
dobj(replenish-9, supply-11)
prep_of(supply-11, wood-13)
det(farm-18, a-15)
amod(farm-18, small-16)
nn(farm-18, wheat-17)
prep_of(supply-11, farm-18)
conj_and(wood-13, farm-18)
aux(grow-21, to-19)
advmod(grow-21, continuously-20)
xcomp(replenish-9, grow-21)
dobj(grow-21, wheat-22)
prep_for(wheat-22, bread-24)
partmod(wheat-22, allowing-26)
nsubj(stay-29, you-27)
aux(stay-29, to-28)
xcomp(allowing-26, stay-29)
advmod(stay-29, underground-30)
det(period-34, an-32)
amod(period-34, infinite-33)
prep_for(stay-29, period-34)
prep_of(period-34, time-36)

(ROOT
  (S
    (NP
      (NP (DT The) (VBG crafting) (NN recipe))
      (PP (IN for)
        (NP (JJ wooden) (NNS doors))))
    (VP (VBZ creates)
      (NP
        (NP (CD three) (NNS doors))
        (PP
          (PP (IN from)
            (NP
              (NP (CD six) (NN wood) (NNS planks))
              (, ,)
              (SBAR
                (S
                  (NP (RB hence) (DT each) (NN door))
                  (VP (VBZ uses)
                    (NP
                      (NP (CD two) (NN wood) (NNS planks))
                      (: -)
                      (NP (DT the)
                        (ADJP (JJ same)
                          (PP (IN as)
                            (SBAR
                              (WHNP (WP what))
                              (S
                                (VP (MD would)
                                  (VP (VB be)
                                    (VP (VBN required)
                                      (S
                                        (VP (TO to)
                                          (VP (VB block)
                                            (NP
                                              (NP
                                                (QP (DT a) (CD 2)))
                                              (X (SYM x))))))))))))
                          (NP (CD 1)))
                        (NN hole))))))))
          (CC but)
          (PP (IN with)
            (NP (DT the) (NN ability)
              (S
                (VP (TO to)
                  (VP
                    (VP (VB pass)
                      (PRT (RP through))
                      (PP (IN with)
                        (NP (VB ease))))
                    (, ,)
                    (CC and)
                    (VP (VB return)
                      (PP (IN in)
                        (NP (DT a) (NN hurry)))
                      (SBAR (IN if)
                        (S
                          (NP (EX there))
                          (VP (VBP are)
                            (NP
                              (NP (DT a) (JJ large) (NN number))
                              (PP (IN of)
                                (NP
                                  (NP (NNS mobs))
                                  (PP (IN on)
                                    (NP (DT the) (JJ other) (NN side))))))))))))))))))
    (. .)))

det(recipe-3, The-1)
amod(recipe-3, crafting-2)
nsubj(creates-7, recipe-3)
amod(doors-6, wooden-5)
prep_for(recipe-3, doors-6)
num(doors-9, three-8)
dobj(creates-7, doors-9)
dobj(creates-7, doors-9')
conj_but(doors-9, doors-9')
num(planks-13, six-11)
nn(planks-13, wood-12)
prep_from(doors-9, planks-13)
advmod(door-17, hence-15)
det(door-17, each-16)
nsubj(uses-18, door-17)
rcmod(planks-13, uses-18)
num(planks-21, two-19)
nn(planks-21, wood-20)
dobj(uses-18, planks-21)
det(hole-36, the-23)
amod(hole-36, same-24)
nsubjpass(required-29, what-26)
aux(required-29, would-27)
auxpass(required-29, be-28)
prepc_as(same-24, required-29)
aux(block-31, to-30)
purpcl(required-29, block-31)
quantmod(2-33, a-32)
dobj(block-31, 2-33)
dep(2-33, x-34)
dep(same-24, 1-35)
dep(planks-21, hole-36)
det(ability-40, the-39)
prep_with(doors-9', ability-40)
aux(pass-42, to-41)
infmod(ability-40, pass-42)
prt(pass-42, through-43)
prep_with(pass-42, ease-45)
infmod(ability-40, return-48)
conj_and(pass-42, return-48)
det(hurry-51, a-50)
prep_in(return-48, hurry-51)
mark(are-54, if-52)
expl(are-54, there-53)
advcl(return-48, are-54)
det(number-57, a-55)
amod(number-57, large-56)
nsubj(are-54, number-57)
prep_of(number-57, mobs-59)
det(side-63, the-61)
amod(side-63, other-62)
prep_on(mobs-59, side-63)

