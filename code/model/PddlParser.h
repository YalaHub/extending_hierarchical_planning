/** \file
 *  This C header file was generated by $ANTLR version 3.1.3 Mar 17, 2009 19:23:44
 *
 *     -  From the grammar source file : ../../model/subgoal_learning/Pddl.g
 *     -                            On : 2011-12-04 10:25:05
 *     -                for the parser : PddlParserParser *
 * Editing it, at least manually, is not wise. 
 *
 * C language generator and runtime by Jim Idle, jimi|hereisanat|idle|dotgoeshere|ws.
 *
 *
 * The parser PddlParser has the callable functions (rules) shown below,
 * which will invoke the code for the associated rule in the source grammar
 * assuming that the input stream is pointing to a token/text stream that could begin
 * this rule.
 * 
 * For instance if you call the first (topmost) rule in a parser grammar, you will
 * get the results of a full parse, but calling a rule half way through the grammar will
 * allow you to pass part of a full token stream to the parser, such as for syntax checking
 * in editors and so on.
 *
 * The parser entry points are called indirectly (by function pointer to function) via
 * a parser context typedef pPddlParser, which is returned from a call to PddlParserNew().
 *
 * The methods in pPddlParser are  as follows:
 *
 *  - PddlParser_getDomain_return      pPddlParser->getDomain(pPddlParser)
 *  - PddlParser_getProblem_return      pPddlParser->getProblem(pPddlParser)
 *  - PddlParser_pddlDoc_return      pPddlParser->pddlDoc(pPddlParser)
 *  - PddlParser_domain_return      pPddlParser->domain(pPddlParser)
 *  - PddlParser_domainName_return      pPddlParser->domainName(pPddlParser)
 *  - PddlParser_requireDef_return      pPddlParser->requireDef(pPddlParser)
 *  - PddlParser_typesDef_return      pPddlParser->typesDef(pPddlParser)
 *  - PddlParser_typedNameList_return      pPddlParser->typedNameList(pPddlParser)
 *  - PddlParser_singleTypeNameList_return      pPddlParser->singleTypeNameList(pPddlParser)
 *  - PddlParser_type_return      pPddlParser->type(pPddlParser)
 *  - PddlParser_primType_return      pPddlParser->primType(pPddlParser)
 *  - PddlParser_functionsDef_return      pPddlParser->functionsDef(pPddlParser)
 *  - PddlParser_functionList_return      pPddlParser->functionList(pPddlParser)
 *  - PddlParser_atomicFunctionSkeleton_return      pPddlParser->atomicFunctionSkeleton(pPddlParser)
 *  - PddlParser_functionSymbol_return      pPddlParser->functionSymbol(pPddlParser)
 *  - PddlParser_functionType_return      pPddlParser->functionType(pPddlParser)
 *  - PddlParser_constantsDef_return      pPddlParser->constantsDef(pPddlParser)
 *  - PddlParser_predicatesDef_return      pPddlParser->predicatesDef(pPddlParser)
 *  - PddlParser_atomicFormulaSkeleton_return      pPddlParser->atomicFormulaSkeleton(pPddlParser)
 *  - PddlParser_predicate_return      pPddlParser->predicate(pPddlParser)
 *  - PddlParser_typedVariableList_return      pPddlParser->typedVariableList(pPddlParser)
 *  - PddlParser_singleTypeVarList_return      pPddlParser->singleTypeVarList(pPddlParser)
 *  - PddlParser_constraints_return      pPddlParser->constraints(pPddlParser)
 *  - PddlParser_structureDef_return      pPddlParser->structureDef(pPddlParser)
 *  - PddlParser_actionDef_return      pPddlParser->actionDef(pPddlParser)
 *  - PddlParser_actionSymbol_return      pPddlParser->actionSymbol(pPddlParser)
 *  - PddlParser_actionDefBody_return      pPddlParser->actionDefBody(pPddlParser)
 *  - PddlParser_goalDesc_return      pPddlParser->goalDesc(pPddlParser)
 *  - PddlParser_fComp_return      pPddlParser->fComp(pPddlParser)
 *  - PddlParser_atomicTermFormula_return      pPddlParser->atomicTermFormula(pPddlParser)
 *  - PddlParser_term_return      pPddlParser->term(pPddlParser)
 *  - PddlParser_durativeActionDef_return      pPddlParser->durativeActionDef(pPddlParser)
 *  - PddlParser_daDefBody_return      pPddlParser->daDefBody(pPddlParser)
 *  - PddlParser_daGD_return      pPddlParser->daGD(pPddlParser)
 *  - PddlParser_prefTimedGD_return      pPddlParser->prefTimedGD(pPddlParser)
 *  - PddlParser_timedGD_return      pPddlParser->timedGD(pPddlParser)
 *  - PddlParser_timeSpecifier_return      pPddlParser->timeSpecifier(pPddlParser)
 *  - PddlParser_interval_return      pPddlParser->interval(pPddlParser)
 *  - PddlParser_derivedDef_return      pPddlParser->derivedDef(pPddlParser)
 *  - PddlParser_fExp_return      pPddlParser->fExp(pPddlParser)
 *  - PddlParser_fExp2_return      pPddlParser->fExp2(pPddlParser)
 *  - PddlParser_fHead_return      pPddlParser->fHead(pPddlParser)
 *  - PddlParser_effect_return      pPddlParser->effect(pPddlParser)
 *  - PddlParser_cEffect_return      pPddlParser->cEffect(pPddlParser)
 *  - PddlParser_pEffect_return      pPddlParser->pEffect(pPddlParser)
 *  - PddlParser_condEffect_return      pPddlParser->condEffect(pPddlParser)
 *  - PddlParser_binaryOp_return      pPddlParser->binaryOp(pPddlParser)
 *  - PddlParser_binaryComp_return      pPddlParser->binaryComp(pPddlParser)
 *  - PddlParser_assignOp_return      pPddlParser->assignOp(pPddlParser)
 *  - PddlParser_durationConstraint_return      pPddlParser->durationConstraint(pPddlParser)
 *  - PddlParser_simpleDurationConstraint_return      pPddlParser->simpleDurationConstraint(pPddlParser)
 *  - PddlParser_durOp_return      pPddlParser->durOp(pPddlParser)
 *  - PddlParser_durValue_return      pPddlParser->durValue(pPddlParser)
 *  - PddlParser_daEffect_return      pPddlParser->daEffect(pPddlParser)
 *  - PddlParser_timedEffect_return      pPddlParser->timedEffect(pPddlParser)
 *  - PddlParser_fAssignDA_return      pPddlParser->fAssignDA(pPddlParser)
 *  - PddlParser_fExpDA_return      pPddlParser->fExpDA(pPddlParser)
 *  - PddlParser_problem_return      pPddlParser->problem(pPddlParser)
 *  - PddlParser_problemDecl_return      pPddlParser->problemDecl(pPddlParser)
 *  - PddlParser_problemDomain_return      pPddlParser->problemDomain(pPddlParser)
 *  - PddlParser_objectDecl_return      pPddlParser->objectDecl(pPddlParser)
 *  - PddlParser_init_return      pPddlParser->init(pPddlParser)
 *  - PddlParser_initEl_return      pPddlParser->initEl(pPddlParser)
 *  - PddlParser_nameLiteral_return      pPddlParser->nameLiteral(pPddlParser)
 *  - PddlParser_atomicNameFormula_return      pPddlParser->atomicNameFormula(pPddlParser)
 *  - PddlParser_goal_return      pPddlParser->goal(pPddlParser)
 *  - PddlParser_probConstraints_return      pPddlParser->probConstraints(pPddlParser)
 *  - PddlParser_prefConGD_return      pPddlParser->prefConGD(pPddlParser)
 *  - PddlParser_metricSpec_return      pPddlParser->metricSpec(pPddlParser)
 *  - PddlParser_optimization_return      pPddlParser->optimization(pPddlParser)
 *  - PddlParser_metricFExp_return      pPddlParser->metricFExp(pPddlParser)
 *  - PddlParser_conGD_return      pPddlParser->conGD(pPddlParser)
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 *
 * The return type for any particular rule is of course determined by the source
 * grammar file.
 */
// [The "BSD licence"]
// Copyright (c) 2005-2009 Jim Idle, Temporal Wave LLC
// http://www.temporal-wave.com
// http://www.linkedin.com/in/jimidle
//
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

#ifndef	_PddlParser_H
#define _PddlParser_H
/* =============================================================================
 * Standard antlr3 C runtime definitions
 */
#include    <antlr3.h>

/* End of standard antlr 3 runtime definitions
 * =============================================================================
 */
 
#ifdef __cplusplus
extern "C" {
#endif

// Forward declare the context typedef so that we can use it before it is
// properly defined. Delegators and delegates (from import statements) are
// interdependent and their context structures contain pointers to each other
// C only allows such things to be declared if you pre-declare the typedef.
//
typedef struct PddlParser_Ctx_struct PddlParser, * pPddlParser;



#ifdef	ANTLR3_WINDOWS
// Disable: Unreferenced parameter,							- Rules with parameters that are not used
//          constant conditional,							- ANTLR realizes that a prediction is always true (synpred usually)
//          initialized but unused variable					- tree rewrite variables declared but not needed
//          Unreferenced local variable						- lexer rule declares but does not always use _type
//          potentially unitialized variable used			- retval always returned from a rule 
//			unreferenced local function has been removed	- susually getTokenNames or freeScope, they can go without warnigns
//
// These are only really displayed at warning level /W4 but that is the code ideal I am aiming at
// and the codegen must generate some of these warnings by necessity, apart from 4100, which is
// usually generated when a parser rule is given a parameter that it does not use. Mostly though
// this is a matter of orthogonality hence I disable that one.
//
#pragma warning( disable : 4100 )
#pragma warning( disable : 4101 )
#pragma warning( disable : 4127 )
#pragma warning( disable : 4189 )
#pragma warning( disable : 4505 )
#pragma warning( disable : 4701 )
#endif

/* ========================
 * BACKTRACKING IS ENABLED
 * ========================
 */
typedef struct PddlParser_getDomain_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    PddlParser_getDomain_return;

typedef struct PddlParser_getProblem_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    PddlParser_getProblem_return;

typedef struct PddlParser_pddlDoc_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    PddlParser_pddlDoc_return;

typedef struct PddlParser_domain_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    PddlParser_domain_return;

typedef struct PddlParser_domainName_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    PddlParser_domainName_return;

typedef struct PddlParser_requireDef_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    PddlParser_requireDef_return;

typedef struct PddlParser_typesDef_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    PddlParser_typesDef_return;

typedef struct PddlParser_typedNameList_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    PddlParser_typedNameList_return;

typedef struct PddlParser_singleTypeNameList_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    PddlParser_singleTypeNameList_return;

typedef struct PddlParser_type_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    PddlParser_type_return;

typedef struct PddlParser_primType_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    PddlParser_primType_return;

typedef struct PddlParser_functionsDef_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    PddlParser_functionsDef_return;

typedef struct PddlParser_functionList_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    PddlParser_functionList_return;

typedef struct PddlParser_atomicFunctionSkeleton_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    PddlParser_atomicFunctionSkeleton_return;

typedef struct PddlParser_functionSymbol_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    PddlParser_functionSymbol_return;

typedef struct PddlParser_functionType_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    PddlParser_functionType_return;

typedef struct PddlParser_constantsDef_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    PddlParser_constantsDef_return;

typedef struct PddlParser_predicatesDef_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    PddlParser_predicatesDef_return;

typedef struct PddlParser_atomicFormulaSkeleton_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    PddlParser_atomicFormulaSkeleton_return;

typedef struct PddlParser_predicate_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    PddlParser_predicate_return;

typedef struct PddlParser_typedVariableList_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    PddlParser_typedVariableList_return;

typedef struct PddlParser_singleTypeVarList_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    PddlParser_singleTypeVarList_return;

typedef struct PddlParser_constraints_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    PddlParser_constraints_return;

typedef struct PddlParser_structureDef_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    PddlParser_structureDef_return;

typedef struct PddlParser_actionDef_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    PddlParser_actionDef_return;

typedef struct PddlParser_actionSymbol_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    PddlParser_actionSymbol_return;

typedef struct PddlParser_actionDefBody_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    PddlParser_actionDefBody_return;

typedef struct PddlParser_goalDesc_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    PddlParser_goalDesc_return;

typedef struct PddlParser_fComp_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    PddlParser_fComp_return;

typedef struct PddlParser_atomicTermFormula_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    PddlParser_atomicTermFormula_return;

typedef struct PddlParser_term_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    PddlParser_term_return;

typedef struct PddlParser_durativeActionDef_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    PddlParser_durativeActionDef_return;

typedef struct PddlParser_daDefBody_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    PddlParser_daDefBody_return;

typedef struct PddlParser_daGD_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    PddlParser_daGD_return;

typedef struct PddlParser_prefTimedGD_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    PddlParser_prefTimedGD_return;

typedef struct PddlParser_timedGD_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    PddlParser_timedGD_return;

typedef struct PddlParser_timeSpecifier_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    PddlParser_timeSpecifier_return;

typedef struct PddlParser_interval_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    PddlParser_interval_return;

typedef struct PddlParser_derivedDef_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    PddlParser_derivedDef_return;

typedef struct PddlParser_fExp_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    PddlParser_fExp_return;

typedef struct PddlParser_fExp2_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    PddlParser_fExp2_return;

typedef struct PddlParser_fHead_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    PddlParser_fHead_return;

typedef struct PddlParser_effect_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    PddlParser_effect_return;

typedef struct PddlParser_cEffect_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    PddlParser_cEffect_return;

typedef struct PddlParser_pEffect_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    PddlParser_pEffect_return;

typedef struct PddlParser_condEffect_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    PddlParser_condEffect_return;

typedef struct PddlParser_binaryOp_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    PddlParser_binaryOp_return;

typedef struct PddlParser_binaryComp_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    PddlParser_binaryComp_return;

typedef struct PddlParser_assignOp_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    PddlParser_assignOp_return;

typedef struct PddlParser_durationConstraint_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    PddlParser_durationConstraint_return;

typedef struct PddlParser_simpleDurationConstraint_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    PddlParser_simpleDurationConstraint_return;

typedef struct PddlParser_durOp_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    PddlParser_durOp_return;

typedef struct PddlParser_durValue_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    PddlParser_durValue_return;

typedef struct PddlParser_daEffect_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    PddlParser_daEffect_return;

typedef struct PddlParser_timedEffect_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    PddlParser_timedEffect_return;

typedef struct PddlParser_fAssignDA_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    PddlParser_fAssignDA_return;

typedef struct PddlParser_fExpDA_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    PddlParser_fExpDA_return;

typedef struct PddlParser_problem_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    PddlParser_problem_return;

typedef struct PddlParser_problemDecl_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    PddlParser_problemDecl_return;

typedef struct PddlParser_problemDomain_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    PddlParser_problemDomain_return;

typedef struct PddlParser_objectDecl_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    PddlParser_objectDecl_return;

typedef struct PddlParser_init_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    PddlParser_init_return;

typedef struct PddlParser_initEl_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    PddlParser_initEl_return;

typedef struct PddlParser_nameLiteral_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    PddlParser_nameLiteral_return;

typedef struct PddlParser_atomicNameFormula_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    PddlParser_atomicNameFormula_return;

typedef struct PddlParser_goal_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    PddlParser_goal_return;

typedef struct PddlParser_probConstraints_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    PddlParser_probConstraints_return;

typedef struct PddlParser_prefConGD_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    PddlParser_prefConGD_return;

typedef struct PddlParser_metricSpec_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    PddlParser_metricSpec_return;

typedef struct PddlParser_optimization_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    PddlParser_optimization_return;

typedef struct PddlParser_metricFExp_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    PddlParser_metricFExp_return;

typedef struct PddlParser_conGD_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    PddlParser_conGD_return;



/** Context tracking structure for PddlParser
 */
struct PddlParser_Ctx_struct
{
    /** Built in ANTLR3 context tracker contains all the generic elements
     *  required for context tracking.
     */
    pANTLR3_PARSER   pParser;


     PddlParser_getDomain_return (*getDomain)	(struct PddlParser_Ctx_struct * ctx);
     PddlParser_getProblem_return (*getProblem)	(struct PddlParser_Ctx_struct * ctx);
     PddlParser_pddlDoc_return (*pddlDoc)	(struct PddlParser_Ctx_struct * ctx);
     PddlParser_domain_return (*domain)	(struct PddlParser_Ctx_struct * ctx);
     PddlParser_domainName_return (*domainName)	(struct PddlParser_Ctx_struct * ctx);
     PddlParser_requireDef_return (*requireDef)	(struct PddlParser_Ctx_struct * ctx);
     PddlParser_typesDef_return (*typesDef)	(struct PddlParser_Ctx_struct * ctx);
     PddlParser_typedNameList_return (*typedNameList)	(struct PddlParser_Ctx_struct * ctx);
     PddlParser_singleTypeNameList_return (*singleTypeNameList)	(struct PddlParser_Ctx_struct * ctx);
     PddlParser_type_return (*type)	(struct PddlParser_Ctx_struct * ctx);
     PddlParser_primType_return (*primType)	(struct PddlParser_Ctx_struct * ctx);
     PddlParser_functionsDef_return (*functionsDef)	(struct PddlParser_Ctx_struct * ctx);
     PddlParser_functionList_return (*functionList)	(struct PddlParser_Ctx_struct * ctx);
     PddlParser_atomicFunctionSkeleton_return (*atomicFunctionSkeleton)	(struct PddlParser_Ctx_struct * ctx);
     PddlParser_functionSymbol_return (*functionSymbol)	(struct PddlParser_Ctx_struct * ctx);
     PddlParser_functionType_return (*functionType)	(struct PddlParser_Ctx_struct * ctx);
     PddlParser_constantsDef_return (*constantsDef)	(struct PddlParser_Ctx_struct * ctx);
     PddlParser_predicatesDef_return (*predicatesDef)	(struct PddlParser_Ctx_struct * ctx);
     PddlParser_atomicFormulaSkeleton_return (*atomicFormulaSkeleton)	(struct PddlParser_Ctx_struct * ctx);
     PddlParser_predicate_return (*predicate)	(struct PddlParser_Ctx_struct * ctx);
     PddlParser_typedVariableList_return (*typedVariableList)	(struct PddlParser_Ctx_struct * ctx);
     PddlParser_singleTypeVarList_return (*singleTypeVarList)	(struct PddlParser_Ctx_struct * ctx);
     PddlParser_constraints_return (*constraints)	(struct PddlParser_Ctx_struct * ctx);
     PddlParser_structureDef_return (*structureDef)	(struct PddlParser_Ctx_struct * ctx);
     PddlParser_actionDef_return (*actionDef)	(struct PddlParser_Ctx_struct * ctx);
     PddlParser_actionSymbol_return (*actionSymbol)	(struct PddlParser_Ctx_struct * ctx);
     PddlParser_actionDefBody_return (*actionDefBody)	(struct PddlParser_Ctx_struct * ctx);
     PddlParser_goalDesc_return (*goalDesc)	(struct PddlParser_Ctx_struct * ctx);
     PddlParser_fComp_return (*fComp)	(struct PddlParser_Ctx_struct * ctx);
     PddlParser_atomicTermFormula_return (*atomicTermFormula)	(struct PddlParser_Ctx_struct * ctx);
     PddlParser_term_return (*term)	(struct PddlParser_Ctx_struct * ctx);
     PddlParser_durativeActionDef_return (*durativeActionDef)	(struct PddlParser_Ctx_struct * ctx);
     PddlParser_daDefBody_return (*daDefBody)	(struct PddlParser_Ctx_struct * ctx);
     PddlParser_daGD_return (*daGD)	(struct PddlParser_Ctx_struct * ctx);
     PddlParser_prefTimedGD_return (*prefTimedGD)	(struct PddlParser_Ctx_struct * ctx);
     PddlParser_timedGD_return (*timedGD)	(struct PddlParser_Ctx_struct * ctx);
     PddlParser_timeSpecifier_return (*timeSpecifier)	(struct PddlParser_Ctx_struct * ctx);
     PddlParser_interval_return (*interval)	(struct PddlParser_Ctx_struct * ctx);
     PddlParser_derivedDef_return (*derivedDef)	(struct PddlParser_Ctx_struct * ctx);
     PddlParser_fExp_return (*fExp)	(struct PddlParser_Ctx_struct * ctx);
     PddlParser_fExp2_return (*fExp2)	(struct PddlParser_Ctx_struct * ctx);
     PddlParser_fHead_return (*fHead)	(struct PddlParser_Ctx_struct * ctx);
     PddlParser_effect_return (*effect)	(struct PddlParser_Ctx_struct * ctx);
     PddlParser_cEffect_return (*cEffect)	(struct PddlParser_Ctx_struct * ctx);
     PddlParser_pEffect_return (*pEffect)	(struct PddlParser_Ctx_struct * ctx);
     PddlParser_condEffect_return (*condEffect)	(struct PddlParser_Ctx_struct * ctx);
     PddlParser_binaryOp_return (*binaryOp)	(struct PddlParser_Ctx_struct * ctx);
     PddlParser_binaryComp_return (*binaryComp)	(struct PddlParser_Ctx_struct * ctx);
     PddlParser_assignOp_return (*assignOp)	(struct PddlParser_Ctx_struct * ctx);
     PddlParser_durationConstraint_return (*durationConstraint)	(struct PddlParser_Ctx_struct * ctx);
     PddlParser_simpleDurationConstraint_return (*simpleDurationConstraint)	(struct PddlParser_Ctx_struct * ctx);
     PddlParser_durOp_return (*durOp)	(struct PddlParser_Ctx_struct * ctx);
     PddlParser_durValue_return (*durValue)	(struct PddlParser_Ctx_struct * ctx);
     PddlParser_daEffect_return (*daEffect)	(struct PddlParser_Ctx_struct * ctx);
     PddlParser_timedEffect_return (*timedEffect)	(struct PddlParser_Ctx_struct * ctx);
     PddlParser_fAssignDA_return (*fAssignDA)	(struct PddlParser_Ctx_struct * ctx);
     PddlParser_fExpDA_return (*fExpDA)	(struct PddlParser_Ctx_struct * ctx);
     PddlParser_problem_return (*problem)	(struct PddlParser_Ctx_struct * ctx);
     PddlParser_problemDecl_return (*problemDecl)	(struct PddlParser_Ctx_struct * ctx);
     PddlParser_problemDomain_return (*problemDomain)	(struct PddlParser_Ctx_struct * ctx);
     PddlParser_objectDecl_return (*objectDecl)	(struct PddlParser_Ctx_struct * ctx);
     PddlParser_init_return (*init)	(struct PddlParser_Ctx_struct * ctx);
     PddlParser_initEl_return (*initEl)	(struct PddlParser_Ctx_struct * ctx);
     PddlParser_nameLiteral_return (*nameLiteral)	(struct PddlParser_Ctx_struct * ctx);
     PddlParser_atomicNameFormula_return (*atomicNameFormula)	(struct PddlParser_Ctx_struct * ctx);
     PddlParser_goal_return (*goal)	(struct PddlParser_Ctx_struct * ctx);
     PddlParser_probConstraints_return (*probConstraints)	(struct PddlParser_Ctx_struct * ctx);
     PddlParser_prefConGD_return (*prefConGD)	(struct PddlParser_Ctx_struct * ctx);
     PddlParser_metricSpec_return (*metricSpec)	(struct PddlParser_Ctx_struct * ctx);
     PddlParser_optimization_return (*optimization)	(struct PddlParser_Ctx_struct * ctx);
     PddlParser_metricFExp_return (*metricFExp)	(struct PddlParser_Ctx_struct * ctx);
     PddlParser_conGD_return (*conGD)	(struct PddlParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred19_Pddl)	(struct PddlParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred58_Pddl)	(struct PddlParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred59_Pddl)	(struct PddlParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred60_Pddl)	(struct PddlParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred88_Pddl)	(struct PddlParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred90_Pddl)	(struct PddlParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred91_Pddl)	(struct PddlParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred92_Pddl)	(struct PddlParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred93_Pddl)	(struct PddlParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred94_Pddl)	(struct PddlParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred95_Pddl)	(struct PddlParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred96_Pddl)	(struct PddlParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred97_Pddl)	(struct PddlParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred109_Pddl)	(struct PddlParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred110_Pddl)	(struct PddlParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred112_Pddl)	(struct PddlParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred114_Pddl)	(struct PddlParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred117_Pddl)	(struct PddlParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred118_Pddl)	(struct PddlParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred121_Pddl)	(struct PddlParser_Ctx_struct * ctx);
    // Delegated rules
    const char * (*getGrammarFileName)();
    void	    (*free)   (struct PddlParser_Ctx_struct * ctx);
    /* @headerFile.members() */
    pANTLR3_BASE_TREE_ADAPTOR	adaptor;
    pANTLR3_VECTOR_FACTORY		vectors;
    /* End @headerFile.members() */
};

// Function protoypes for the constructor functions that external translation units
// such as delegators and delegates may wish to call.
//
ANTLR3_API pPddlParser PddlParserNew         (pANTLR3_COMMON_TOKEN_STREAM instream);
ANTLR3_API pPddlParser PddlParserNewSSD      (pANTLR3_COMMON_TOKEN_STREAM instream, pANTLR3_RECOGNIZER_SHARED_STATE state);

/** Symbolic definitions of all the tokens that the parser will work with.
 * \{
 *
 * Antlr will define EOF, but we can't use that as it it is too common in
 * in C header files and that would be confusing. There is no way to filter this out at the moment
 * so we just undef it here for now. That isn't the value we get back from C recognizers
 * anyway. We are looking for ANTLR3_TOKEN_EOF.
 */
#ifdef	EOF
#undef	EOF
#endif
#ifdef	Tokens
#undef	Tokens
#endif 
#define REQUIRE_KEY      46
#define FUNCTIONS      10
#define LETTER      49
#define PRED_INST      42
#define TYPES      7
#define EXISTS_GD      27
#define EOF      -1
#define COMPARISON_GD      29
#define ACTION      13
#define T__93      93
#define ANY_CHAR      50
#define T__94      94
#define NOT_EFFECT      34
#define T__91      91
#define NAME      45
#define T__92      92
#define T__90      90
#define PROBLEM_DOMAIN      17
#define OBJECTS      18
#define ASSIGN_EFFECT      33
#define T__99      99
#define T__98      98
#define T__97      97
#define T__96      96
#define T__95      95
#define T__80      80
#define T__81      81
#define T__82      82
#define T__83      83
#define LINE_COMMENT      52
#define PROBLEM      15
#define NUMBER      48
#define WHITESPACE      53
#define UNARY_MINUS      38
#define OR_GD      24
#define T__85      85
#define T__84      84
#define T__87      87
#define T__86      86
#define T__89      89
#define T__88      88
#define DOMAIN_NAME      5
#define PRED_HEAD      35
#define T__71      71
#define T__72      72
#define PREDICATES      11
#define VARIABLE      47
#define T__70      70
#define INIT_AT      40
#define T__76      76
#define T__75      75
#define T__74      74
#define INIT      19
#define T__73      73
#define T__79      79
#define T__78      78
#define T__77      77
#define AND_GD      23
#define T__68      68
#define T__69      69
#define T__66      66
#define T__67      67
#define T__64      64
#define FUNC_HEAD      20
#define T__65      65
#define T__62      62
#define T__63      63
#define PARAMETERS      12
#define NOT_GD      25
#define PROBLEM_NAME      16
#define T__118      118
#define DURATIVE_ACTION      14
#define T__119      119
#define T__116      116
#define T__117      117
#define T__114      114
#define T__115      115
#define PROBLEM_METRIC      44
#define T__120      120
#define CONSTANTS      9
#define T__61      61
#define T__60      60
#define T__55      55
#define T__56      56
#define T__57      57
#define T__58      58
#define T__54      54
#define IMPLY_GD      26
#define T__107      107
#define T__108      108
#define T__109      109
#define T__59      59
#define T__103      103
#define T__104      104
#define T__105      105
#define T__106      106
#define T__111      111
#define T__110      110
#define T__113      113
#define T__112      112
#define INIT_EQ      39
#define DIGIT      51
#define NOT_PRED_INIT      41
#define BINARY_OP      37
#define GOAL      36
#define FORALL_GD      28
#define T__102      102
#define T__101      101
#define T__100      100
#define DOMAIN      4
#define WHEN_EFFECT      32
#define PRECONDITION      21
#define EFFECT      22
#define PROBLEM_CONSTRAINT      43
#define AND_EFFECT      30
#define EITHER_TYPE      8
#define FORALL_EFFECT      31
#define REQUIREMENTS      6
#ifdef	EOF
#undef	EOF
#define	EOF	ANTLR3_TOKEN_EOF
#endif

#ifndef TOKENSOURCE
#define TOKENSOURCE(lxr) lxr->pLexer->rec->state->tokSource
#endif

/* End of token definitions for PddlParser
 * =============================================================================
 */
/** \} */

#ifdef __cplusplus
}
#endif

#endif

/* END - Note:Keep extra line feed to satisfy UNIX systems */
