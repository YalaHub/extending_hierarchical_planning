/** \file
 *  This C header file was generated by $ANTLR version 3.1.3 Mar 17, 2009 19:23:44
 *
 *     -  From the grammar source file : ../../model/subgoal_learning/Pddl.g
 *     -                            On : 2011-12-04 10:25:06
 *     -                 for the lexer : PddlLexerLexer *
 * Editing it, at least manually, is not wise. 
 *
 * C language generator and runtime by Jim Idle, jimi|hereisanat|idle|dotgoeshere|ws.
 *
 *
 * The lexer PddlLexer has the callable functions (rules) shown below,
 * which will invoke the code for the associated rule in the source grammar
 * assuming that the input stream is pointing to a token/text stream that could begin
 * this rule.
 * 
 * For instance if you call the first (topmost) rule in a parser grammar, you will
 * get the results of a full parse, but calling a rule half way through the grammar will
 * allow you to pass part of a full token stream to the parser, such as for syntax checking
 * in editors and so on.
 *
 * The parser entry points are called indirectly (by function pointer to function) via
 * a parser context typedef pPddlLexer, which is returned from a call to PddlLexerNew().
 *
 * As this is a generated lexer, it is unlikely you will call it 'manually'. However
 * the methods are provided anyway.
 * * The methods in pPddlLexer are  as follows:
 *
 *  -  void      pPddlLexer->T__54(pPddlLexer)
 *  -  void      pPddlLexer->T__55(pPddlLexer)
 *  -  void      pPddlLexer->T__56(pPddlLexer)
 *  -  void      pPddlLexer->T__57(pPddlLexer)
 *  -  void      pPddlLexer->T__58(pPddlLexer)
 *  -  void      pPddlLexer->T__59(pPddlLexer)
 *  -  void      pPddlLexer->T__60(pPddlLexer)
 *  -  void      pPddlLexer->T__61(pPddlLexer)
 *  -  void      pPddlLexer->T__62(pPddlLexer)
 *  -  void      pPddlLexer->T__63(pPddlLexer)
 *  -  void      pPddlLexer->T__64(pPddlLexer)
 *  -  void      pPddlLexer->T__65(pPddlLexer)
 *  -  void      pPddlLexer->T__66(pPddlLexer)
 *  -  void      pPddlLexer->T__67(pPddlLexer)
 *  -  void      pPddlLexer->T__68(pPddlLexer)
 *  -  void      pPddlLexer->T__69(pPddlLexer)
 *  -  void      pPddlLexer->T__70(pPddlLexer)
 *  -  void      pPddlLexer->T__71(pPddlLexer)
 *  -  void      pPddlLexer->T__72(pPddlLexer)
 *  -  void      pPddlLexer->T__73(pPddlLexer)
 *  -  void      pPddlLexer->T__74(pPddlLexer)
 *  -  void      pPddlLexer->T__75(pPddlLexer)
 *  -  void      pPddlLexer->T__76(pPddlLexer)
 *  -  void      pPddlLexer->T__77(pPddlLexer)
 *  -  void      pPddlLexer->T__78(pPddlLexer)
 *  -  void      pPddlLexer->T__79(pPddlLexer)
 *  -  void      pPddlLexer->T__80(pPddlLexer)
 *  -  void      pPddlLexer->T__81(pPddlLexer)
 *  -  void      pPddlLexer->T__82(pPddlLexer)
 *  -  void      pPddlLexer->T__83(pPddlLexer)
 *  -  void      pPddlLexer->T__84(pPddlLexer)
 *  -  void      pPddlLexer->T__85(pPddlLexer)
 *  -  void      pPddlLexer->T__86(pPddlLexer)
 *  -  void      pPddlLexer->T__87(pPddlLexer)
 *  -  void      pPddlLexer->T__88(pPddlLexer)
 *  -  void      pPddlLexer->T__89(pPddlLexer)
 *  -  void      pPddlLexer->T__90(pPddlLexer)
 *  -  void      pPddlLexer->T__91(pPddlLexer)
 *  -  void      pPddlLexer->T__92(pPddlLexer)
 *  -  void      pPddlLexer->T__93(pPddlLexer)
 *  -  void      pPddlLexer->T__94(pPddlLexer)
 *  -  void      pPddlLexer->T__95(pPddlLexer)
 *  -  void      pPddlLexer->T__96(pPddlLexer)
 *  -  void      pPddlLexer->T__97(pPddlLexer)
 *  -  void      pPddlLexer->T__98(pPddlLexer)
 *  -  void      pPddlLexer->T__99(pPddlLexer)
 *  -  void      pPddlLexer->T__100(pPddlLexer)
 *  -  void      pPddlLexer->T__101(pPddlLexer)
 *  -  void      pPddlLexer->T__102(pPddlLexer)
 *  -  void      pPddlLexer->T__103(pPddlLexer)
 *  -  void      pPddlLexer->T__104(pPddlLexer)
 *  -  void      pPddlLexer->T__105(pPddlLexer)
 *  -  void      pPddlLexer->T__106(pPddlLexer)
 *  -  void      pPddlLexer->T__107(pPddlLexer)
 *  -  void      pPddlLexer->T__108(pPddlLexer)
 *  -  void      pPddlLexer->T__109(pPddlLexer)
 *  -  void      pPddlLexer->T__110(pPddlLexer)
 *  -  void      pPddlLexer->T__111(pPddlLexer)
 *  -  void      pPddlLexer->T__112(pPddlLexer)
 *  -  void      pPddlLexer->T__113(pPddlLexer)
 *  -  void      pPddlLexer->T__114(pPddlLexer)
 *  -  void      pPddlLexer->T__115(pPddlLexer)
 *  -  void      pPddlLexer->T__116(pPddlLexer)
 *  -  void      pPddlLexer->T__117(pPddlLexer)
 *  -  void      pPddlLexer->T__118(pPddlLexer)
 *  -  void      pPddlLexer->T__119(pPddlLexer)
 *  -  void      pPddlLexer->T__120(pPddlLexer)
 *  -  void      pPddlLexer->REQUIRE_KEY(pPddlLexer)
 *  -  void      pPddlLexer->NAME(pPddlLexer)
 *  -  void      pPddlLexer->LETTER(pPddlLexer)
 *  -  void      pPddlLexer->ANY_CHAR(pPddlLexer)
 *  -  void      pPddlLexer->VARIABLE(pPddlLexer)
 *  -  void      pPddlLexer->NUMBER(pPddlLexer)
 *  -  void      pPddlLexer->DIGIT(pPddlLexer)
 *  -  void      pPddlLexer->LINE_COMMENT(pPddlLexer)
 *  -  void      pPddlLexer->WHITESPACE(pPddlLexer)
 *  -  void      pPddlLexer->Tokens(pPddlLexer)
 *
 * The return type for any particular rule is of course determined by the source
 * grammar file.
 */
// [The "BSD licence"]
// Copyright (c) 2005-2009 Jim Idle, Temporal Wave LLC
// http://www.temporal-wave.com
// http://www.linkedin.com/in/jimidle
//
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

#ifndef	_PddlLexer_H
#define _PddlLexer_H
/* =============================================================================
 * Standard antlr3 C runtime definitions
 */
#include    <antlr3.h>

/* End of standard antlr 3 runtime definitions
 * =============================================================================
 */
 
#ifdef __cplusplus
extern "C" {
#endif

// Forward declare the context typedef so that we can use it before it is
// properly defined. Delegators and delegates (from import statements) are
// interdependent and their context structures contain pointers to each other
// C only allows such things to be declared if you pre-declare the typedef.
//
typedef struct PddlLexer_Ctx_struct PddlLexer, * pPddlLexer;



#ifdef	ANTLR3_WINDOWS
// Disable: Unreferenced parameter,							- Rules with parameters that are not used
//          constant conditional,							- ANTLR realizes that a prediction is always true (synpred usually)
//          initialized but unused variable					- tree rewrite variables declared but not needed
//          Unreferenced local variable						- lexer rule declares but does not always use _type
//          potentially unitialized variable used			- retval always returned from a rule 
//			unreferenced local function has been removed	- susually getTokenNames or freeScope, they can go without warnigns
//
// These are only really displayed at warning level /W4 but that is the code ideal I am aiming at
// and the codegen must generate some of these warnings by necessity, apart from 4100, which is
// usually generated when a parser rule is given a parameter that it does not use. Mostly though
// this is a matter of orthogonality hence I disable that one.
//
#pragma warning( disable : 4100 )
#pragma warning( disable : 4101 )
#pragma warning( disable : 4127 )
#pragma warning( disable : 4189 )
#pragma warning( disable : 4505 )
#pragma warning( disable : 4701 )
#endif

/** Context tracking structure for PddlLexer
 */
struct PddlLexer_Ctx_struct
{
    /** Built in ANTLR3 context tracker contains all the generic elements
     *  required for context tracking.
     */
    pANTLR3_LEXER    pLexer;


     void (*mT__54)	(struct PddlLexer_Ctx_struct * ctx);
     void (*mT__55)	(struct PddlLexer_Ctx_struct * ctx);
     void (*mT__56)	(struct PddlLexer_Ctx_struct * ctx);
     void (*mT__57)	(struct PddlLexer_Ctx_struct * ctx);
     void (*mT__58)	(struct PddlLexer_Ctx_struct * ctx);
     void (*mT__59)	(struct PddlLexer_Ctx_struct * ctx);
     void (*mT__60)	(struct PddlLexer_Ctx_struct * ctx);
     void (*mT__61)	(struct PddlLexer_Ctx_struct * ctx);
     void (*mT__62)	(struct PddlLexer_Ctx_struct * ctx);
     void (*mT__63)	(struct PddlLexer_Ctx_struct * ctx);
     void (*mT__64)	(struct PddlLexer_Ctx_struct * ctx);
     void (*mT__65)	(struct PddlLexer_Ctx_struct * ctx);
     void (*mT__66)	(struct PddlLexer_Ctx_struct * ctx);
     void (*mT__67)	(struct PddlLexer_Ctx_struct * ctx);
     void (*mT__68)	(struct PddlLexer_Ctx_struct * ctx);
     void (*mT__69)	(struct PddlLexer_Ctx_struct * ctx);
     void (*mT__70)	(struct PddlLexer_Ctx_struct * ctx);
     void (*mT__71)	(struct PddlLexer_Ctx_struct * ctx);
     void (*mT__72)	(struct PddlLexer_Ctx_struct * ctx);
     void (*mT__73)	(struct PddlLexer_Ctx_struct * ctx);
     void (*mT__74)	(struct PddlLexer_Ctx_struct * ctx);
     void (*mT__75)	(struct PddlLexer_Ctx_struct * ctx);
     void (*mT__76)	(struct PddlLexer_Ctx_struct * ctx);
     void (*mT__77)	(struct PddlLexer_Ctx_struct * ctx);
     void (*mT__78)	(struct PddlLexer_Ctx_struct * ctx);
     void (*mT__79)	(struct PddlLexer_Ctx_struct * ctx);
     void (*mT__80)	(struct PddlLexer_Ctx_struct * ctx);
     void (*mT__81)	(struct PddlLexer_Ctx_struct * ctx);
     void (*mT__82)	(struct PddlLexer_Ctx_struct * ctx);
     void (*mT__83)	(struct PddlLexer_Ctx_struct * ctx);
     void (*mT__84)	(struct PddlLexer_Ctx_struct * ctx);
     void (*mT__85)	(struct PddlLexer_Ctx_struct * ctx);
     void (*mT__86)	(struct PddlLexer_Ctx_struct * ctx);
     void (*mT__87)	(struct PddlLexer_Ctx_struct * ctx);
     void (*mT__88)	(struct PddlLexer_Ctx_struct * ctx);
     void (*mT__89)	(struct PddlLexer_Ctx_struct * ctx);
     void (*mT__90)	(struct PddlLexer_Ctx_struct * ctx);
     void (*mT__91)	(struct PddlLexer_Ctx_struct * ctx);
     void (*mT__92)	(struct PddlLexer_Ctx_struct * ctx);
     void (*mT__93)	(struct PddlLexer_Ctx_struct * ctx);
     void (*mT__94)	(struct PddlLexer_Ctx_struct * ctx);
     void (*mT__95)	(struct PddlLexer_Ctx_struct * ctx);
     void (*mT__96)	(struct PddlLexer_Ctx_struct * ctx);
     void (*mT__97)	(struct PddlLexer_Ctx_struct * ctx);
     void (*mT__98)	(struct PddlLexer_Ctx_struct * ctx);
     void (*mT__99)	(struct PddlLexer_Ctx_struct * ctx);
     void (*mT__100)	(struct PddlLexer_Ctx_struct * ctx);
     void (*mT__101)	(struct PddlLexer_Ctx_struct * ctx);
     void (*mT__102)	(struct PddlLexer_Ctx_struct * ctx);
     void (*mT__103)	(struct PddlLexer_Ctx_struct * ctx);
     void (*mT__104)	(struct PddlLexer_Ctx_struct * ctx);
     void (*mT__105)	(struct PddlLexer_Ctx_struct * ctx);
     void (*mT__106)	(struct PddlLexer_Ctx_struct * ctx);
     void (*mT__107)	(struct PddlLexer_Ctx_struct * ctx);
     void (*mT__108)	(struct PddlLexer_Ctx_struct * ctx);
     void (*mT__109)	(struct PddlLexer_Ctx_struct * ctx);
     void (*mT__110)	(struct PddlLexer_Ctx_struct * ctx);
     void (*mT__111)	(struct PddlLexer_Ctx_struct * ctx);
     void (*mT__112)	(struct PddlLexer_Ctx_struct * ctx);
     void (*mT__113)	(struct PddlLexer_Ctx_struct * ctx);
     void (*mT__114)	(struct PddlLexer_Ctx_struct * ctx);
     void (*mT__115)	(struct PddlLexer_Ctx_struct * ctx);
     void (*mT__116)	(struct PddlLexer_Ctx_struct * ctx);
     void (*mT__117)	(struct PddlLexer_Ctx_struct * ctx);
     void (*mT__118)	(struct PddlLexer_Ctx_struct * ctx);
     void (*mT__119)	(struct PddlLexer_Ctx_struct * ctx);
     void (*mT__120)	(struct PddlLexer_Ctx_struct * ctx);
     void (*mREQUIRE_KEY)	(struct PddlLexer_Ctx_struct * ctx);
     void (*mNAME)	(struct PddlLexer_Ctx_struct * ctx);
     void (*mLETTER)	(struct PddlLexer_Ctx_struct * ctx);
     void (*mANY_CHAR)	(struct PddlLexer_Ctx_struct * ctx);
     void (*mVARIABLE)	(struct PddlLexer_Ctx_struct * ctx);
     void (*mNUMBER)	(struct PddlLexer_Ctx_struct * ctx);
     void (*mDIGIT)	(struct PddlLexer_Ctx_struct * ctx);
     void (*mLINE_COMMENT)	(struct PddlLexer_Ctx_struct * ctx);
     void (*mWHITESPACE)	(struct PddlLexer_Ctx_struct * ctx);
     void (*mTokens)	(struct PddlLexer_Ctx_struct * ctx);    const char * (*getGrammarFileName)();
    void	    (*free)   (struct PddlLexer_Ctx_struct * ctx);
        
};

// Function protoypes for the constructor functions that external translation units
// such as delegators and delegates may wish to call.
//
ANTLR3_API pPddlLexer PddlLexerNew         (pANTLR3_INPUT_STREAM instream);
ANTLR3_API pPddlLexer PddlLexerNewSSD      (pANTLR3_INPUT_STREAM instream, pANTLR3_RECOGNIZER_SHARED_STATE state);

/** Symbolic definitions of all the tokens that the lexer will work with.
 * \{
 *
 * Antlr will define EOF, but we can't use that as it it is too common in
 * in C header files and that would be confusing. There is no way to filter this out at the moment
 * so we just undef it here for now. That isn't the value we get back from C recognizers
 * anyway. We are looking for ANTLR3_TOKEN_EOF.
 */
#ifdef	EOF
#undef	EOF
#endif
#ifdef	Tokens
#undef	Tokens
#endif 
#define REQUIRE_KEY      46
#define FUNCTIONS      10
#define LETTER      49
#define PRED_INST      42
#define TYPES      7
#define EXISTS_GD      27
#define EOF      -1
#define COMPARISON_GD      29
#define ACTION      13
#define T__93      93
#define ANY_CHAR      50
#define T__94      94
#define NOT_EFFECT      34
#define T__91      91
#define NAME      45
#define T__92      92
#define T__90      90
#define OBJECTS      18
#define PROBLEM_DOMAIN      17
#define ASSIGN_EFFECT      33
#define T__99      99
#define T__98      98
#define T__97      97
#define T__96      96
#define T__95      95
#define T__80      80
#define T__81      81
#define T__82      82
#define T__83      83
#define LINE_COMMENT      52
#define PROBLEM      15
#define NUMBER      48
#define WHITESPACE      53
#define UNARY_MINUS      38
#define OR_GD      24
#define T__85      85
#define T__84      84
#define T__87      87
#define T__86      86
#define T__89      89
#define T__88      88
#define DOMAIN_NAME      5
#define PRED_HEAD      35
#define T__71      71
#define T__72      72
#define PREDICATES      11
#define VARIABLE      47
#define T__70      70
#define INIT_AT      40
#define T__76      76
#define T__75      75
#define T__74      74
#define INIT      19
#define T__73      73
#define T__79      79
#define T__78      78
#define T__77      77
#define AND_GD      23
#define T__68      68
#define T__69      69
#define T__66      66
#define T__67      67
#define T__64      64
#define FUNC_HEAD      20
#define T__65      65
#define T__62      62
#define T__63      63
#define PARAMETERS      12
#define NOT_GD      25
#define PROBLEM_NAME      16
#define T__118      118
#define DURATIVE_ACTION      14
#define T__119      119
#define T__116      116
#define T__117      117
#define T__114      114
#define T__115      115
#define PROBLEM_METRIC      44
#define T__120      120
#define CONSTANTS      9
#define T__61      61
#define T__60      60
#define T__55      55
#define T__56      56
#define T__57      57
#define T__58      58
#define T__54      54
#define IMPLY_GD      26
#define T__107      107
#define T__108      108
#define T__109      109
#define T__103      103
#define T__59      59
#define T__104      104
#define T__105      105
#define T__106      106
#define T__111      111
#define T__110      110
#define T__113      113
#define T__112      112
#define INIT_EQ      39
#define DIGIT      51
#define NOT_PRED_INIT      41
#define GOAL      36
#define BINARY_OP      37
#define FORALL_GD      28
#define T__102      102
#define T__101      101
#define T__100      100
#define DOMAIN      4
#define WHEN_EFFECT      32
#define PRECONDITION      21
#define EFFECT      22
#define AND_EFFECT      30
#define PROBLEM_CONSTRAINT      43
#define EITHER_TYPE      8
#define FORALL_EFFECT      31
#define REQUIREMENTS      6
#ifdef	EOF
#undef	EOF
#define	EOF	ANTLR3_TOKEN_EOF
#endif

#ifndef TOKENSOURCE
#define TOKENSOURCE(lxr) lxr->pLexer->rec->state->tokSource
#endif

/* End of token definitions for PddlLexer
 * =============================================================================
 */
/** \} */

#ifdef __cplusplus
}
#endif

#endif

/* END - Note:Keep extra line feed to satisfy UNIX systems */
